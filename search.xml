<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>每日PS技巧4：移动图层</title>
    <url>/title/682c12c4/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/04/QlJ4w8.md.png" alt="PS5_1"></p>
<a id="more"></a>

<p>昨天讲了图层模式，今天结合图层复移动再讲一下图层混合模式。</p>
<h2 id="今日技巧-图层移动和混合模式"><a href="#今日技巧-图层移动和混合模式" class="headerlink" title="今日技巧 [图层移动和混合模式]"></a>今日技巧 [图层移动和混合模式]</h2><p>首先打开两幅素材图片，然后在一幅图中，按住Ctrl+Alt，此时移动鼠标，会发现鼠标变成三角形状了，只要拖动它到另一副图的标题上，就会自动切换进去，这时释放鼠标，我们就将一幅图复制移动到另一幅图中了。</p>
<p><img src="https://s2.ax1x.com/2019/12/04/QlYufH.md.png" alt="PS5_2">  </p>
<p>这样当前窗口就有了两个图层，可自行调整图层大小和位置，如下图。</p>
<p><img src="https://s2.ax1x.com/2019/12/04/QlYJ78.md.png" alt="PS5_3">  </p>
<p>此时，新的图层在原来图层上方，而且遮住了原图层，要实现混合，可以利用图层混合模式，看上图右侧，选择变亮模式。该模式将比较两个图层的亮度，让亮的显示出来。这样，原本上方的较暗的图层就让位给下方的亮图层了，实现了图层混合，如下图。</p>
<p><img src="https://s2.ax1x.com/2019/12/04/QlYf39.md.png" alt="PS5_4">  </p>
<p>然而我们发现，原图层，左边是黑色的，这下左下角有部分黑色图层，很不协调。为了盖住这部分黑色的图层，可以复制出一份卫星图层，将复制的图层放大并移动，使得其中一部分背景图层恰好遮住黑色图层。调节模式为变亮，这样背景就干掉了，就得到了封面图片的效果。</p>
<p>最后再附上原图和效果图。</p>
<p>原图来源：2019年12月04日Baidu图片。  </p>
<p><img src="https://s2.ax1x.com/2019/12/04/QltKET.md.png" alt="PS5_5">  </p>
<p>原图来源：2019年07月11日Bing壁纸国内版。  </p>
<p><img src="https://s2.ax1x.com/2019/12/04/QltGvR.md.png" alt="PS5_6">  </p>
<p><img src="https://s2.ax1x.com/2019/12/04/QlJ4w8.md.png" alt="PS5_7">  </p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>PS快捷键和小技巧</title>
    <url>/title/34806234/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/04/QlJUQ1.md.png" alt="PS_5"></p>
<a id="more"></a>

<p>今天总结一些PS开发中可以用到的快捷键和指令，其中Alt,Ctrl,Shift,Backspace,Space等都是键盘上的按键，注意是Windows系统下的快捷键，Mac OS X系统似乎要把Ctrl键替换成Cmd键。逗号”,”表示或的意思，加号”+”表示和的意思，逗号和加号是不需要按住的。</p>
<table>
<thead>
<tr>
<th align="left">快捷操作技巧(57个)</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">F</td>
<td align="left">切换背景模式</td>
</tr>
<tr>
<td align="left">X</td>
<td align="left">切换前后景颜色</td>
</tr>
<tr>
<td align="left">D</td>
<td align="left">恢复前后景颜色默认值</td>
</tr>
<tr>
<td align="left">H + 移动鼠标</td>
<td align="left">查看整体图样</td>
</tr>
<tr>
<td align="left">[,]</td>
<td align="left">增缩笔刷大小</td>
</tr>
<tr>
<td align="left">{,}</td>
<td align="left">增缩笔刷硬度</td>
</tr>
<tr>
<td align="left">&lt;,&gt;,^,v</td>
<td align="left">上下左右微移图层(方向键)</td>
</tr>
<tr>
<td align="left">TAB</td>
<td align="left">隐藏和显示所有工具和面板</td>
</tr>
<tr>
<td align="left">Alt + 拖动图层</td>
<td align="left">复制当前图层</td>
</tr>
<tr>
<td align="left">Alt + Click图层蒙板</td>
<td align="left">开关图层蒙板</td>
</tr>
<tr>
<td align="left">Alt + Click图层中线</td>
<td align="left">开启剪贴蒙板</td>
</tr>
<tr>
<td align="left">Alt + L + M + T</td>
<td align="left">开启图层蒙板(白色)</td>
</tr>
<tr>
<td align="left">Alt + L + M + H</td>
<td align="left">开启图层蒙板(黑色)</td>
</tr>
<tr>
<td align="left">Alt + Backspace</td>
<td align="left">用前景色填充图层</td>
</tr>
<tr>
<td align="left">Ctrl+ Backspace</td>
<td align="left">用背景色填充图层</td>
</tr>
<tr>
<td align="left">Alt + (F,E,I,L,Y,S,T,D,V,W,H)</td>
<td align="left">打开各种菜单栏</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + G</td>
<td align="left">开启剪贴蒙板</td>
</tr>
<tr>
<td align="left">Ctrl + 0</td>
<td align="left">调整以适应屏幕(0是零)</td>
</tr>
<tr>
<td align="left">Ctrl + O</td>
<td align="left">打开文件(O是字母)</td>
</tr>
<tr>
<td align="left">Ctrl + Z</td>
<td align="left">撤销上一次动作</td>
</tr>
<tr>
<td align="left">Ctrl + A</td>
<td align="left">全选</td>
</tr>
<tr>
<td align="left">Ctrl + F</td>
<td align="left">重复上一次滤镜动作</td>
</tr>
<tr>
<td align="left">Ctrl + G</td>
<td align="left">将选中的图层分组</td>
</tr>
<tr>
<td align="left">Ctrl + H</td>
<td align="left">显示附加</td>
</tr>
<tr>
<td align="left">Ctrl + K</td>
<td align="left">打开首选项</td>
</tr>
<tr>
<td align="left">Ctrl + N</td>
<td align="left">新建图层</td>
</tr>
<tr>
<td align="left">Ctrl + B</td>
<td align="left">打开色彩平衡</td>
</tr>
<tr>
<td align="left">Ctrl + L</td>
<td align="left">打开图层色阶</td>
</tr>
<tr>
<td align="left">Ctrl + M</td>
<td align="left">打开图层曲线</td>
</tr>
<tr>
<td align="left">Ctrl + U</td>
<td align="left">打开图层色相</td>
</tr>
<tr>
<td align="left">Ctrl + D</td>
<td align="left">取消选区</td>
</tr>
<tr>
<td align="left">Ctrl + C</td>
<td align="left">复制当前图层到剪贴板</td>
</tr>
<tr>
<td align="left">Ctrl + J</td>
<td align="left">拷贝当前图层(图层选中模式)</td>
</tr>
<tr>
<td align="left">Ctrl + J</td>
<td align="left">转换选区为图层(选区模式)</td>
</tr>
<tr>
<td align="left">Ctrl + V</td>
<td align="left">粘贴到当前图层</td>
</tr>
<tr>
<td align="left">Ctrl + E</td>
<td align="left">合并选中图层</td>
</tr>
<tr>
<td align="left">Ctrl + [</td>
<td align="left">下移当前图层</td>
</tr>
<tr>
<td align="left">Ctrl + ]</td>
<td align="left">上移当前图层</td>
</tr>
<tr>
<td align="left">Ctrl + I(选中蒙板)</td>
<td align="left">翻转图层蒙板显示模式</td>
</tr>
<tr>
<td align="left">Ctrl + I(选中选区)</td>
<td align="left">去掉背景颜色</td>
</tr>
<tr>
<td align="left">Ctrl + I(选中图层)</td>
<td align="left">图层反向</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + I</td>
<td align="left">反向选中选区</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + [</td>
<td align="left">移动图层到最底层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + ]</td>
<td align="left">移动图层到最顶层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + E</td>
<td align="left">合并所有图层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + T</td>
<td align="left">开启变形工具</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + N</td>
<td align="left">创建50%灰度的图层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + T</td>
<td align="left">重复上一次变形</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + &lt;,&gt;,^,v</td>
<td align="left">上下左右移动图层/缩放文字</td>
</tr>
<tr>
<td align="left">Ctrl + 左右移动鼠标</td>
<td align="left">移动当前图层</td>
</tr>
<tr>
<td align="left">Ctrl + Space + 左右移动</td>
<td align="left">快速缩放图层</td>
</tr>
<tr>
<td align="left">Shift + F5</td>
<td align="left">快速填充选区</td>
</tr>
<tr>
<td align="left">Shift + Click图层关闭键</td>
<td align="left">关闭所有图层</td>
</tr>
<tr>
<td align="left">选中图层&gt;右键&gt;颜色</td>
<td align="left">用颜色标注图层</td>
</tr>
<tr>
<td align="left">新建调整图层</td>
<td align="left">改变背景颜色</td>
</tr>
<tr>
<td align="left">油漆桶 + Shift + 点背景</td>
<td align="left">改变背景颜色</td>
</tr>
<tr>
<td align="left">双击背景图层</td>
<td align="left">解锁背景图层锁定状态</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧4：图层蒙板</title>
    <url>/title/1c50c8f3/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/03/QMFiDK.md.png" alt="PS4_1"> </p>
<a id="more"></a>

<p>昨天是图层样式，今天我们来学习图层蒙板。蒙板就是在一个图层上给它套上一个魔法属性，蒙板相当于一层遮盖，盖住下一层的内容。可以把图层看作沙画作画时撒的沙，手指在沙上画，下面的亮就出来了。同样，用画笔在蒙板上画，下层的图就浮现了。蒙板实现了图层元素的结合，这是PS中的基础，很多大神P的神图，搞笑图就是利用图层蒙板结合其他技术实现超逆天的效果。</p>
<h2 id="今日技巧-图层蒙板"><a href="#今日技巧-图层蒙板" class="headerlink" title="今日技巧 [图层蒙板]"></a>今日技巧 [图层蒙板]</h2><p>首先分别在PS里打开两幅素材，拷贝一份到另一副图里，这样两幅图就在一个操作界面了，图层顺序可以调整一下，看自己。接着选中上面的一副图，点击右下角的图层蒙板选项，这时该图层右边出现一个白框，这就是蒙板，类似沙画中撒的沙，只是这沙是白的。</p>
<p>接着，选择画笔工具，调节画笔样式和大小。如下图左上角，自行选择样式并调节大小，蒙板在右下角，第一个图层右边的白框：</p>
<p><img src="https://s2.ax1x.com/2019/12/03/QMkrOP.md.png" alt="PS4_2">  </p>
<p>然后在左下角调节前景色和背景色(就是一黑一白两个框框，点击那个交叉的箭头就能调换前景和背景色)。使得前景色为黑色，背景色为白色。既然沙子(蒙板)是白的，那么用黑的就能消除掉蒙板，画笔就是利用前景的黑色对蒙板进行擦除工作。此时在需要擦除的地方按住鼠标左键，随意移动就能看到效果了。</p>
<p>那么，擦除错了怎么办呢？想想沙画，画错了再撒点儿沙子(白色)上去就好了，而用画笔就是把前景色换成白色，然后涂抹，你发现消失的又回来了。比如下面恢复一点儿原图的内容：</p>
<p><img src="https://s2.ax1x.com/2019/12/03/QMANn0.md.png" alt="PS4_3">  </p>
<p>注意看上面两幅图最左下角黑白框对掉了，在前面的是前景色，只要对掉两个颜色就能实现擦除和恢复图层内容。现在双击右侧的蒙板，就能打开蒙板，看看我们擦除的内容，黑色是擦掉的。白色是沙子，就对应留在上层的图像。</p>
<p><img src="https://s2.ax1x.com/2019/12/03/QMAXE8.md.png" alt="PS4_4">  </p>
<p>可以看到，黑色部分还有没擦干净的，但是原图看不出来了，有强迫症的同学可以把它擦干净。为何计算机把白色当沙子层，黑色当空白层呢？如果是现实中的沙画，白色发光的是沙子被擦除掉后的结果，黑色是撒上的遮盖物。然而计算机里用的是通道的概念，表示颜色是用RGB，而要擦除一个图层的内容只要使得它的RGB变为0就好了，这样下一层的内容就透过来了。在计算机里面，RGB为0就是黑色，所以黑色代表擦除。记住计算机是发光，自然界是反射光，这层逻辑是反的，那么沙画的流程在PS软件上也要反过来。相反，白色恰好是颜色最多的情况，物理上白色由其他颜色合成，所以白色代表保留所有颜色细节，对应到图层上保留所有颜色就是保持不变，所以白色部分的企鹅保持不变。</p>
<p>当然，这个作品做得不好，主要是为了学技术，不是学艺术，要美化的话，还要加其他内容，然而那就不是一个基础教程的目的了，而且一下子学多了，脑子反而乱。</p>
<p>最后再附上原图和效果图，接下来你是不是就可以用两个人的图片PS出一幅她们的合照了呢？试试吧！</p>
<p>原图来源：2019年10月13日Bing壁纸国内版。<br><img src="https://s2.ax1x.com/2019/12/03/QMVYwV.md.jpg" alt="PS4_5">  </p>
<p>原图来源：2019年11月18日Bing壁纸国内版。<br><img src="https://s2.ax1x.com/2019/12/03/QMVaYF.md.jpg" alt="PS4_6">  </p>
<p><img src="https://s2.ax1x.com/2019/12/03/QMFiDK.md.png" alt="PS4_7"> </p>
<p>另外，第一幅原图怪怪的，企鹅会出现在有山的地方，水中还有雾气，又有冰？可见，第一副图也可能是PS的，至于谁做的，我就不知道了。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧3：图层样式</title>
    <url>/title/e8aff90b/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/02/Quwn0K.md.jpg" alt="PS3_1"> </p>
<a id="more"></a>

<p>昨天是旋转，今天学习将图层叠加和变亮模式。</p>
<h2 id="今日技巧-图层变亮叠加"><a href="#今日技巧-图层变亮叠加" class="headerlink" title="今日技巧 [图层变亮叠加]"></a>今日技巧 [图层变亮叠加]</h2><p>今天给一幅中秋月圆夜的图片加上标题，要求标题文字和图片的月亮结合，使得文字发月光。标题来自于高中课本里面的一首诗《春江花月夜》。</p>
<p>《春江花月夜》是唐代诗人张若虚的诗作。此诗沿用陈隋乐府旧题，运用富有生活气息的清丽之笔，以月为主体，以江为场景，描绘了一幅幽美邈远、惝恍迷离的春江月夜图，抒写了游子思妇真挚动人的离情别绪以及富有哲理意味的人生感慨，表现了一种迥绝的宇宙意识，创造了一个深沉、寥廓、宁静的境界。全诗共三十六句，每四句一换韵，通篇融诗情、画意、哲理为一体，意境空明，想象奇特，语言自然隽永，韵律宛转悠扬，洗净了六朝宫体的浓脂腻粉，具有极高的审美价值，素有“孤篇盖全唐”之誉。</p>
<p>话说我现在还记得几句“春江潮水连海平，海上明月共潮生。滟滟随波千万里，何处春江无月明！”；“江畔何人初见月？江月何年初照人？人生代代无穷已，江月年年望相似。”</p>
<p>打开原始图片(随便一幅图都可以，太阳也行，只要有个亮的，或是图案)。利用文字工具书写任意文字，字体为华文楷体，字号220，并移动到适当位置。如下图：</p>
<p><img src="https://s2.ax1x.com/2019/12/02/Quw59J.md.png" alt="PS3_2">  </p>
<p>接着复制背景图层和文字图层，如果在设计过程中图层干扰到查看就点击图层前的眼睛，暂时关闭图层。此时文字图层在复制的背景图层上，接着用移动工具移动复制的背景图层，使得月亮刚好在第一个字“春”下面。</p>
<p><img src="https://s2.ax1x.com/2019/12/02/Qu0r5D.md.png" alt="PS3_3">  </p>
<p>接着将文字图层拉到复制的背景图层下面，按住Alt键并将鼠标移动到两个图层中间，此时出现一个向下箭头，点击。得到的结果如下图(注意看右下角图层的位置关系，关闭了背景图层，防止干扰)：</p>
<p><img src="https://s2.ax1x.com/2019/12/02/Qu01ET.md.png" alt="PS3_4">  </p>
<p>其他的字都这样制作，每次制作亮文字最好复制最初的一份文字图层来制作，这样依次制作五个字。</p>
<p><img src="https://s2.ax1x.com/2019/12/02/Qu0Orq.md.png" alt="PS3_5">  </p>
<p>五个亮字可以分组，按住Shift键，点选五幅文字图，点击分组按钮(最右下，删除键左边第二个)。然后在分组的五个文字图层里从最下面两个开始，选择第四幅设置模式为变亮，这时你会看到四五两个图层的文字都亮了。这时再选择这两幅图层，右键，找到合并图层选项，点击以合并这两个图层，这样就只剩四幅图了，注意这时可以打开背景图层，把背景图放出来好看一点。</p>
<p><img src="https://s2.ax1x.com/2019/12/02/QurAUK.md.png" alt="PS3_6"> </p>
<p>接着重复刚刚的流程，还是选择该分组里的最后两幅图，将第三幅图设置为变亮模式，此时第三个字又亮了，再合并这两个图层。重复直到五个字全亮并合并为一个图层，最后的成品就是封面了。    </p>
<p><img src="https://s2.ax1x.com/2019/12/02/QurMDI.md.png" alt="PS3_7"> </p>
<p>最后再附上原图和效果图(没加水印，加了就破坏了美景了，大忌，点击可下载)。<br>原图来源：2019年09月13日Bing壁纸国内版。</p>
<p><img src="https://s2.ax1x.com/2019/12/02/QuRCWV.md.png" alt="PS3_8">  </p>
<p><img src="https://s2.ax1x.com/2019/12/02/QusALn.md.png" alt="PS3_9">  </p>
<p><img src="https://s2.ax1x.com/2019/12/02/Quwn0K.md.jpg" alt="PS3_10"> </p>
<p>Shieber出品，必属精品！垃圾图片我才不会放到我网站上。人虽长得丑，但要想得美！</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧2：旋转</title>
    <url>/title/ac80827b/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/01/QeKLb6.md.png" alt="PS2_4"> </p>
<a id="more"></a>

<p>昨天讲了基本概念，今天来试试旋转这个功能。旋转会生成对称美，适合建筑和部分logo设计，在平面设计种可以作为装饰部分。</p>
<h2 id="今日技巧-使用旋转"><a href="#今日技巧-使用旋转" class="headerlink" title="今日技巧 [使用旋转]"></a>今日技巧 [使用旋转]</h2><p>创建(Ctrl + N)一个300x300像素，填充为黑色的图层，接着再使用Ctrl + Shift +<br>N创建透明图层。选中透明图层，在视图中选定设置水平和垂直参考线。在合适位置利用椭圆工具画一个填充为红色的圆，再接着移动画圆时留下的选区使得其与红色圆相交成一个月牙。移动月牙到中部，复制月牙图层再利用橡皮擦擦除第一个月牙的上部。如下图：</p>
<p><img src="https://s2.ax1x.com/2019/12/01/QeuOhQ.md.png" alt="PS2_1">  </p>
<p>合并两个月牙图层，再复制合并后的图层，按Ctrl + Shift + T，输入旋转角度22.5度，回车确定，接着按Ctrl + Shift + T 15次，形成下图：  </p>
<p><img src="https://s2.ax1x.com/2019/12/01/QeKKHK.md.png" alt="PS2_2">  </p>
<p>选中该图层，使用编辑中的变换，选择水平翻转。</p>
<p><img src="https://s2.ax1x.com/2019/12/01/QeKIC4.md.png" alt="PS2_3"> </p>
<p>接着选中原来的红色图层，设置其填充为绿色，参数设置面板里勾选保留透明区域颜色。最后效果如下：</p>
<p><img src="https://s2.ax1x.com/2019/12/01/QeKLb6.md.png" alt="PS2_4"> </p>
<p>接着还可以作成万花筒，但是我感觉有点儿复杂，这个主要学习旋转的使用，到这一步就够了。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧1：基本概念和水印添加</title>
    <url>/title/d5e733a9/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/30/QV1K2j.md.jpg" alt="cover"></p>
<a id="more"></a>

<h2 id="PS使用"><a href="#PS使用" class="headerlink" title="PS使用"></a>PS使用</h2><p>从今天开始，尽量做到每天分享一个PS技巧，提升自己也帮助他人。说起Photoshop，我从大三才正式用，大四老老实实的学了敬伟一百多集的教学视频，算是知道了什么是PS.</p>
<h2 id="PS软件主体架构"><a href="#PS软件主体架构" class="headerlink" title="PS软件主体架构"></a>PS软件主体架构</h2><p>主体架构为内核和插件应用。内核用C++语言开发，插件有多种，一种是利用官方SDK通过C++开发的插件，一种是利用HTML5 + CSS + JavaScript等前端语言编写的插件，实际就是一个Web App。比如，各种颜色，通道面板都是这类插件。</p>
<h2 id="PS软件发布体系"><a href="#PS软件发布体系" class="headerlink" title="PS软件发布体系"></a>PS软件发布体系</h2><p>PS肇始于视频处理领域，最开始做的时候没想到它会如此成功，随着计算机技术，尤其印刷技术的发展，PS终于发挥作用并反过来引领时尚设计和印刷业。目前大众还在使用的PS版本是CS6，发布于2012年，随后2013年发布Photoshop creative cloud (CC)，然后是CC 2014, CC 2015 一直到CC 2019，几乎每年一版。这几年随着人工智能在图像数据处理上的成功，PS软件也引入一些智能技术，在CC 2019中，一键抠图已经可以使用，再不用像以前一样去学习钢笔工具作选区抠图啦！</p>
<p>PS是一种光和色的处理黑箱，输入一张图片，通过点击相应按钮并设置部分参数，然后黑箱输出优美的图像，它强调的是对颜色，光线和像素的处理，是一种艺术再加工工具，而不是创造工具。所以使用PS，要定位于改变加工而不是创造，要创造请打开你的摄像机自己去拍照，要艺术加工请用PS。</p>
<h2 id="图像处理核心概念"><a href="#图像处理核心概念" class="headerlink" title="图像处理核心概念"></a>图像处理核心概念</h2><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">成分</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">颜色</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">分辨率</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">图层</td>
</tr>
</tbody></table>
<p><strong>颜色</strong><br>对于颜色，有各种模式，不同的模式对应的作用媒介不同。人眼是靠色相(H)，明度(S)，饱和度(B)来识别物体的。色相就是颜色种类，比如，红色，蓝色。明度就是这个颜色有多亮了。饱和度对应颜色的浓度。比如淡红，绯红，深红。PS中常用的实际是RGB模式，该模式实现的是光色的三原色(红R，绿G，蓝B），RGB模式下屏幕靠发光而被人眼识别。PS中还有另一种色彩模式是CMYK模式，分别代表Cyan(青)，Magenta(洋红), Yellow(黄)，Black(K，黑)，因为RGB中把B使用了，所以此处的黑色用K表示。CMYK是印刷用的色彩模式，也就是颜料的三原色。CMYK和RGB模式有什么不同吗？RGB是靠物体本身发光，比如你现在看到这些文字是靠屏幕发光显示的黑色，但是你看书籍上的字可不会发光，它们得靠吸收自然光并反射部分色光(颜色)，实际上一个物体呈现什么颜色，就表明它不吸收该颜色。红色物体就吸收白光种除了红色的其他所有颜色。现在，我们知道这两种模式是完全不一样的，RGB和CMYK模式也就是这么来的。在PS上设计的图片，如果要打印就需要从RGB模式调整模式为CMYK，CMYK模式会比RGB暗一些，毕竟是反射光，要吸收部分嘛。CMYK中加K(黑色)是因为CMY三种颜色无法勾兑出很纯的黑色，得单独加入黑色。还有一种模式是LAB模式，由理论推导得出，L为亮度，AB为两种颜色模式，它是一种理论模式。HSB对应人眼看物，RGB对应屏幕等发光，CMYK对应自然物反射光，LAB对应大自然颜色。</p>
<p>PS软件中RGB颜色是通过8位数字来表示的，二进制下8位数字对应的是$2^8$种程度，比如R就有256种程度(饱和度)，同理三种颜色都各自有256种程度，可以组合出$256^3$种颜色，也就是就是16777216种颜色，一千六百多万，怎么都够日常使用了，大部分人日常中只会用红橙黄绿蓝靛紫。实际上，我们可以用16位数保存(28亿多种颜色)，32位(8x$10^{29}$种)保存也可，位数越高，内存占用越大。大自然的颜色无穷无尽，但常用的8位就够了。</p>
<p><strong>分辨率</strong><br>分辨率强调的是像素点的精细程度，常用指标PPI(Pixel Per Inch，像素每英寸)。PS处理的就是图像的像素。这个概念和视频领域的标清，高清，超清，2K，4K的道理是一样的。每英寸的像素点越多，图像细节越丰富，图像也就越清晰好看，视频质量也就越高，但是占用内存也就上来了，比如手机和笔记本电脑常用的1080P就是1080x1920个像素点。现在5G开始了，接着视频肯定也会变大的。视频体积太多如何传输，那就是压缩技术了，然而和本文无关，略去不谈。</p>
<p><strong>图层</strong><br>PS是搞艺术加工的工具，而加工不只是限于在一幅图上加工，一定会用到多幅图的。我们把每一张图看做一层，多图就是多层，在图层上和图层间可以应用不同的滤镜，变形，颜色改变等等效果，最后合并为一张优美的图像，这就是PS处理图像的大致操作流程。所以，图层是十分重要的概念，不懂图层，不识PS。</p>
<h2 id="今日技巧-添加水印"><a href="#今日技巧-添加水印" class="headerlink" title="今日技巧 [添加水印]"></a>今日技巧 [添加水印]</h2><p>创建一个大小为10CMx5CM的空白图层，通过文字工具输入自己要添加的水印信息。利用编辑里面的描边设置文字描边颜色，调节图层面板的图层填充为0，透明度为65%，就可以调出一个合适的水印。在编辑里选择变换可以变化文字，选择定义图案可以存储该水印，以便今后通过填充使用，也可保存为自定义画笔预设，方便画笔调用。</p>
<p>例如下面是原始图添加一个水印，原图来源：2019年09月30日Bing壁纸国外版。</p>
<p><img src="https://s2.ax1x.com/2019/11/30/QV1aRJ.md.jpg" alt="water_print1">  </p>
<p>下面是原始图添加一堆水印(令人生厌的模式)。    </p>
<p><img src="https://s2.ax1x.com/2019/11/30/QV14sI.md.jpg" alt="water_print1">  </p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>Fucking the Win10 Update Service</title>
    <url>/title/cec87bc7/</url>
    <content><![CDATA[<p><img src="https://ftp.bmp.ovh/imgs/2019/11/07f1ac3a09f4f773.png" alt="Win10"></p>
<a id="more"></a>

<p>最近几年，Windows10自动更新升级的毛病折磨着广大的用户。比如，某游戏主播直播中突然断线，只因Windows10强制更新，电视台节目期间，Win10自动更新，联网就自动下载，而且不会和用户商量。你要播报天气预报，不好意思，win10要更新。更多操蛋案例请看知乎：<a href="https://www.zhihu.com/question/271414438" target="_blank" rel="noopener">Why so many people tend to ban Win10 auto-update?</a></p>
<p>那么，朋友就会问了：难道我不可以关掉自动更新吗？原本是可以的，不过后来微软又强行加入了新的程序使得简单的关闭更新已经不可能，而且网上搜集的关闭教程也多半过时了。特此，本文讲解三种关闭Win10自动更新的方法。</p>
<h2 id="1-从注册表关闭"><a href="#1-从注册表关闭" class="headerlink" title="1.从注册表关闭"></a>1.从注册表关闭</h2><p>所谓的程序，软件，脚步，插件等等都可以或多或少看成是Windows系统的某种服务，而所有的服务(services)都在Windows系统里做好了记录，这个记录就是注册表。注册表详细记录了用户信息，软件安装信息和配置文档信息等等。通过修改注册表就能到达修改程序行为的目的。所以Windows系统那么容易被黑客攻击，那么容易被垃圾360污染，导致越是卸载却越安装的怪病。</p>
<p>视频：当你想卸载360的时候(弹幕可关闭)。</p>
<iframe src="https://player.bilibili.com/player.html?aid=76592877&cid=131013977&page=1" width="270" height="250" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<p>扯远了，既然Windows10升级也是一项服务，那么自然可以通过注册表取消该服务的权限以达到关闭更新，这种方法是最彻底的，其他的软件工具也是通过修改注册表项来实现禁止更新，下面看看具体操作步骤。</p>
<p>1.按Win + R组合键输入services.msc<br>  在打开的服务中找到Windows Update，点击右键再点击进入属性，在常规一栏将启动类型修改为:禁用，如果改不了先点击下方停止按钮。接着进入恢复一栏，将第一次失败，第二次失败，后续失败统统改为无操作。失败计数设置为1000，或者9999等数字都可以，然后点击下方应用，确定，最后退出。这种方法，在win10早期就是关闭自动更新的方法，然而win10似乎知道了这点，所以他又加了一个Windows Update Medic Service在服务里面，就在Windows Update下面，你点击属性进去，还是像刚刚那样修改，然而你会发现：拒绝访问。这就是win10流氓的地方，自家的电脑，自己却无法访问，你说怪不怪？</p>
<p>2.按Win + R组合键输入regedit.msc，然后点击注册表项进入HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\UsoSvc，找到start，右击点修改，将数值数据2改为4，确定。接着找到FailureActions，右击修改，将0010和0018两行的第五列[01,01]修改为[00, 00]，具体为移动到01前，按住Shift和右移动键(–&gt;)，删除再输入一个0，他自动就变为00了，下一行一样的改法。保存退出。</p>
<p>3.再次按Win + R组合键输入services.msc，这次找到刚刚那个流氓Windows Update Meic Service，先点击停止，然后像修改Windows Updata那样，禁用，恢复一栏改为无操作。接着确定，退出。(还是显示拒绝访问，你不用管。)</p>
<p>你以为完了，还有</p>
<p>4.再次按Win + R组合键输入gpedit.msc打开组策略文件，依次打开计算机配置 -&gt; 管理模板 -&gt; Windows组件 -&gt; Windows更新，右击配置自动更新，进入编辑，设置为”已禁用”，点击应用，确定并退出。接着在配置自动更新下面找到”删除使用所有WIndows更新功能的访问权限”，右击设置为”已启用”，再点击应用，确定并退出。</p>
<p>然后，还有。看吧，Windows真是无所不用其极的设置障碍，只要有一处没关，就给你安装更新。</p>
<p>5.再次按Win + R组合键输入taskschd.msc打开计划程序设置界面，依次展开任务计划程序库 -&gt; Microsoft -&gt; Windows -&gt; WindowsUpdate，把里面的项目都设置为禁用。</p>
<p>看吧，这么一番骚操作，才能勉强抗衡流氓Win10，而且这个方法，不知后面会不会又被微软给绕过。试想一个漂亮妹妹，如何懂得这许多，她如何不被微软给欺负？估计她的好哥哥也被微软欺负着。本次关闭更新服务用到了，系统服务，组策略，注册表，计划任务，全面关闭才能禁止。在最后taskschd.msc里面，你都可以看到Scheduled Start 上次和下次运行的时间，你看它偷偷运行，干坏事，你还不知道。怎么老是电脑突然风扇呜呜的转，网速也掉了，原来这货没事就下载更新。</p>
<h2 id="2-免安装工具Wub关闭自动更新"><a href="#2-免安装工具Wub关闭自动更新" class="headerlink" title="2.免安装工具Wub关闭自动更新"></a>2.免安装工具Wub关闭自动更新</h2><p>上面的操作，实在为数太多而且复杂，像Windows update blocker(Wub)这类工具就能帮助你。Wub其实也是设置这些注册表和服务参数，但是只需一键修改，避免个人用户复杂操作。软件可自行百度，或者发邮件给我，我再给你。本想直接放网盘，但分享时间不好设置，也不知有没有人用，万一你喜欢更新呢，我又能怎么说？</p>
<h2 id="3-强大的dism-关闭自动更新"><a href="#3-强大的dism-关闭自动更新" class="headerlink" title="3.强大的dism++关闭自动更新"></a>3.强大的dism++关闭自动更新</h2><p>还有一款比较强大的软件，那就是Dism++，这个软件可以备份系统，在系统崩溃时恢复系统用得上，然后就是关闭更新，可以一键设置。具体请自行百度。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title>为何我们学不好数学？</title>
    <url>/title/b13586e/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2019/11/19/M2W75Q.md.png" alt="math"> </p>
<a id="more"></a>

<p>长久以来的教育给人一种数学很难，或者数学不适合女生的感觉。然而，我发现，我自己学数学也出现问题了，这到底是怎么一回事？难道我已经笨到不适合学数学了吗？</p>
<p>经过我长久的思考和查询资料并对比多位授课老师的课堂教学情况，我发现，学生的天分有影响，但是大家都是普通人，如果大家普遍感到学习的吃力，除了知识的深度之外，老师的水平也是一大重要因素。让我把话说明：那就是<strong>老师的水平太糟糕</strong>，导致明明很好懂的知识最后却成了我们的累赘。</p>
<p>我要为我的观点做证。我们当年的高考为何需要考高分？不就是为了去好的大学吗？可是好大学什么好？难道里面的人更帅？非也，我们认为好大学的教师教学水平是很好的，好大学的环境是让人成长而不是自暴自弃，觉得自己笨。所以，我们学生进一所学校你首先就要知道，很多你学不好的知识，不是你笨，而是台上某些人物实在太菜，他用其低效的，甚至是错误的方式在向你呈现一个数学概念。如果该概念十分重要，那么以此为基础的数学公式都会成为你的拖累。可是，我们作为学生又如何分辨老师的水平呢？其实很不好分辨，除了照本宣科者我们能一眼看出，那些上课认真板书者，你可有觉得他是低水平者？尤其那些无比热情，甚至把自己所谓的考研诀窍，解题秘籍传授给学生的老师，会否让你觉得他就是该领域的专家？</p>
<p>实际上，数学除了是一门逻辑学科外还是一门实在的学科，那就是说，很多数学概念可以用更为基础且简单的概念加以阐述。不要一上来就讲一堆定义，公理，定律，然后搪塞学生下一页的某个重要公式就是这么来的。</p>
<p>为了指出大部分低水平老师的拙劣教学方法，我决定亲自阐述若干数学概念。</p>
<h2 id="虚数-i-的概念"><a href="#虚数-i-的概念" class="headerlink" title="虚数$i$的概念"></a>虚数$i$的概念</h2><p>我们都知道欧拉公式$e^{i\theta} = cos\theta + isin\theta$，可是道理在哪里呢？<br>下面是我杜撰的三位大学数学老师的授课过程，请大家仔细看。</p>
<p><strong>垃圾大学</strong><br>老师：数学的范畴在一如既往地扩张，从自然数到负数、分数，再到实数虚数。有实就有虚，就是这么来的，其他的自己看书你就懂了。欧拉公式，就是把三角函数和虚数结合起来，你看数学家好聪明。</p>
<p><strong>一般大学</strong><br>老师：虚数这个名词是由17世纪著名的数学家笛卡尔创立的。实数与虚数共同引出了复数（a + bi）的概念。在数学上，复数可谓精妙绝伦，将微积分扩展到复数范畴时。欧拉公式，通过单位圆就能看出来，同学们自己看看就懂了。</p>
<p><strong>优秀大学</strong><br>老师：虚数这个名词是由17世纪著名的数学家笛卡尔创立的，对，同学们，就是那位讲“我思故我在”的笛卡尔同志，他不但是数学家，也是哲学家，现代数学起源于欧洲，这是不争的事实，实际上，对数学的思考促进了哲学的发展，比如罗素也是数学家又是哲学家。虚数并非是虚的，只是一种对照体系，实际上它们都是实在的，只是处理的问题尺度不同。$i$它从物理上看，更像是逆时针转90度的意思。同学们，考虑一个单位圆，把X轴右端点看做1，左端点看做-1，Y轴上面为$i$，下面为$-i$。那么一个$i$就是逆时针转90度。同学们画一个圆，加上X和Y轴，从X右端点起，逆时针转90度，你就到了Y轴上端点，发现此处恰好为$i$，同样，顺时针90度就是$-i$，那么$i$的平方呢？对，就是逆时针转180度，刚好到-1处。我们发现$i^2$恰好就是-1，还有$i^3$，就是逆时针转270度，就该是瞬时针转90度咯！所以也就是$-i$，不用算都知道。实际我们发现$i^1 = i$，$i^2=-1$，$i^3=-i$，$i^4=1$，这个不难记忆了吧，不用背吧？那么$i^{1191}$等于多少呢？就看逆时针转了多少圈了，除以4取余数就能得到结果。再看欧拉函数，里面的$\theta$就是逆时针转的角度，假如$\theta=\frac{\pi}{4}$，那么就是要你转45度，这时$i$就是逆时针转的推动因子，因为$i$放到$e$上面了，它本身表示要逆时针转，但是转的角度不定，所以这时给它配一个角度，那么$i\theta$就表示逆时针转的角度。以后同学们看到$e^{i\theta}$，就知道要逆时针转，然后拿出单位圆，找好角度就画好了。那为何$e^{i\theta} = cos\theta + isin\theta$呢？其实，这还是物理上的合成。你自己转到45度处，分别做到X和Y的垂线，是不是一个三角形？</p>
<p><img src="https://s1.ax1x.com/2019/11/19/M2jqGq.md.png" alt="yuan">  </p>
<p>高中三角函数学过，那么三角形的两条邻边是不是一个为斜边长乘以$cos\theta$，另一个乘以$sin\theta$，因为单位圆斜边长为1，所以两个三角函数前面系数为1。因为Y轴是虚轴，所以$sin\theta$前面带个$i$，这是不是高中物理里的矢量？$i$表明了一种方向的意思。要是$Ae^{i\theta}$就是表示把单位圆扩大$A$倍，其他的形式不变，所以右边的两条邻边就该是斜边$A$乘以三角函数的值。故而$Ae^{i\theta}<br>= Acos\theta + iAsin\theta$。对了，同学们可以把笛卡尔的<a href="https://book.douban.com/subject/1071023/" target="_blank" rel="noopener">《谈谈方法》</a>这本书读一读，对我们思考问题有很多帮助，这就作为你们的平时作业吧，看完写个心得给我，随便写。</p>
<p>上面是我对虚数的理解，所以你可以看到，一个学生，一个想从大学学到真东西的大学生如何从老师手里学到东西。进入好大学才有可能接受第三种教育，你是父母，你愿意孩子听那堂课？学习数学一定是要学一个系统，一个逻辑，以及尽可能直观的感觉，这样才能发挥个人的数学才能，相反，靠死记硬背不会培养出优秀学子。</p>
<p>我这只是一个例子，想想吧，还有多少数学概念，我们是糊里糊涂的背下来的，我们如何能学好？再来看不同大学的学生，你现在还能说各个大学的学生没有差别吗？不同大学的学生，应对同样的问题，脑袋里想的完全是两套不同的东西，这种世界观的不同，最后体现出来就是优秀大学的学生更优秀，他们应对实际问题能力更强。其实，单是这位老师推荐的书，就要吊打一堆思政课程，对人的成长的促进是不可想象的。</p>
<p>然而，我们无法改变大学老师，除了自己好好学习，多思考外，最值得的是考个好大学，不然自己被废了都不知道。</p>
]]></content>
  </entry>
  <entry>
    <title>男人和女人</title>
    <url>/title/314bc6e1/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/18/My9DpV.md.png" alt="manwoman"></p>
<a id="more"></a>

<p>女的正在打游戏，突然断线了，她急忙跑到那男的身边。<br>女：“快去看看，好像wifi有问题，很卡，明明是1000M光纤，怎么一点不中用。”<br>那男的过去看看，检查一遍，发现没什么问题。<br>男：“没什么问题。”<br>女：“怎么没问题，没问题如何会卡？”<br>男：“你知道并发吗？”<br>女：“那是个啥？”<br>男：“比如，图书馆的大门，到关门的时候，假设1000人都同时涌向门口，你觉得如何？”<br>女：“那肯定大家都走不了。”<br>男：“对，网络有的时候也这样，如果用的人多了，就会这样。”<br>女：“可是，现在就我们两人用啊？”<br>男：“不是，整栋楼的人都算。”<br>女：“那还不是一样，买网的时候说的什么网速飞起，搞了半天都是骗人的。”<br>男：“不是，事实就是这样。”<br>男：“有的时候事物各方面的状况都很好，但依然会出问题。我们对未知事物的控制能力很弱，所有指标一切正常，但突然就爆发问题，金融危机就是这样…”<br>女：“嗯，我懂了，那为什我电脑卡呢？”<br>男：“难道我刚讲的你全部没听…？”<br>女：“你那么大声干嘛，你居然敢吼我？”<br>男：“什么吼你，这就是事实…”<br>女：“你看，还那么大声，难道不是吼我？什么事实，你就是不爱我，哼，我就知道…”<br>男：“简直无理取闹，懒得和你说了！”<br>女：“那天我就看到你和那女的说话，就那么轻言细语，对我却如此粗鲁，呜呜…”<br>男：“你理智点儿好吗？”<br>女：“我哪里不理智，都是你，一点不关心我，讲什么并发，哼！都是唬人的，呜呜…” </p>
<p>接下来，是无休止的争吵…  </p>
<p>老赵：“老王，你们两口子咋咯，怎么又吵起来了？”<br>男：“她说网卡，然后我在说网卡的问题。”<br>老赵：“什么网卡，她都哭了，你好好对你老婆吧，要珍惜呀！男人啊，少出去花天酒地，好好看好家才是对的。”<br>女：“我就知道，我就知道，你果然出去花天酒地。那女的是上次我看到的那个吗？哼，看我不把那小三儿打得满地找牙！呜呜…”<br>老赵：“大妹子，我帮你教训他了，你呀，别哭啦！我就是这么一说，就一比方。”<br>女：“什么比方，分明就是有鬼，你们男人没一个好东西，呜呜….”<br>老赵：“这…”<br>男：“老赵，多谢，我来应付这个婆娘…”<br>男：“老婆大人，我错了，我来修wifi，都是这个王八蛋wifi惹的，你老人家好好玩，千错万错，都是我的错，我…”<br>女：“说，那女的是谁？”<br>男：“没有这回事…”<br>女：“刚刚老赵还说，哼，你还想骗我？”<br>男：“那就是随口一说，打比方而已…”<br>女：“我不管，我不管，呜呜…，你今天给我说清楚…”<br>男：“你双十一购物车选好了吗？”<br>女：“差不多了，今年真是太便宜啦，盖楼我第一，哈哈…”<br>男：“再多买点儿吧，帮我买瓶洗发水，诺，这个月的工资，23000，都给你了。”<br>女：“谢谢老公，那个你要什么颜色，什么牌子，什么气味的？要长条型还是圆型盒子的？”<br>男：“上面标有洗发水这三个字就行…”<br>女：“好的，我去淘宝上看看….”<br>男：“好，我去上班了。”<br>女：“晚上早点回来啊，我做你最爱吃的冷吃兔…，还要奖励你，嘿嘿..”<br>男：“是！”   </p>
<p>这个故事是我杜撰的，可能女性朋友看了不舒服，但创作的文字就是这样，千人千面而已。这个故事还可以写下去，既可以是他们的幸福生活也可以是人间悲剧，既可以倒叙他们相识的历程也可以讲讲他家儿子的牛叉人生。反正，小说，就是夸大了说，乱说，大说特说。可是我没时间，不想写小说，我今天也不是为了说这两位的故事。</p>
<p>我真正想表明的是：男人和女人，终究是不一样的动物。真的，长久以来的观察和思考让我开始意识到，自己在和完全不同的生物打交道。她们的智商不输给任何男性，但是她们的想法却千奇百怪，前一秒在哭，后一秒却又在笑，对情绪的掌控力让男性感到发慌，因为有的时候事物各方面的状况都很好，但依然会出问题。我们对未知事物的控制能力很弱，所有指标一切正常，但突然就爆发问题，河东狮吼就是这样…    </p>
<p>人生也是这样，任何情况都无法预测。谈及人生，在生命的道路上，我认为重要的有两点：一是自己要做什么样的事业？二是选择和怎样的人组成家庭？当然，事业不等于学业，女朋友也不一定等于老婆。事实上，学业最终成了爱好和谈资，女朋友真的就成了朋友，甚至是仇人。找老婆，稍微懂事理且能支持自己事业的就可，长相我已经不是很看中了。一来漂亮的女人确实少，二来自己也就长那样，没资格要求什么。在婚姻这个问题上，我认为门当户对绝不是过时的古话，而是不逾的真理，如果夫妻间思维不在一个维度，那么婚姻的恶薮自会如期而至。在人生这条路上，做事其实极其容易，而做人却尤为地难。稍不注意，事业失败了，再稍不注意，婚姻又败了。多少人有着成功的事业却没有好的生活，又有多少人有着幸福的婚姻，然而事业却永不见起色。每个成功的男人背后都有个怎样的女人我不知道，但是为了避免成为受害者，我们首先要做的就是排除掉一堆徒有其表且浮华虚荣的女人，这种女人越漂亮就越是害人。</p>
<p>同样的道理对女生一样适用，要想追求人生的幸福，首先就要排除掉一堆渣男，长得帅的，真是属于自己吗？前段时间还有女生谈到，她是颜控，找男人就要帅的。然而我看到的现实是，相当一部分好女人确实遇到帅的，但最后却都是渣男。然而她们自己看不到，也不会相信，而且别人没法儿对她们言说。女人的逻辑是：我自己选择的，怎么可能不好？所以淘宝大火，很多东西买起来很便宜，感觉不买就是亏，但不管多便宜，你最后还是花了钱，本来你是可以不买的呀！最后买的东西，也不怎么好。在感情上也是，很多渣男害了她那女人也舍不得，因为自己选择的男人，自己付出太多，沉默的成本太高，放弃就感觉自己亏了。所以新闻里我们反复看到被渣男害了还舍不得放手的女人，而且今后还会再看到这种新闻。渣男，越帅其伤害力就越大，受害的女性就越多。</p>
<p>受伤的女人往往会感叹，为什么好男人那么少？而在感情懵懂期的女性会问，为什么男生不追女生，或者<a href="https://zhuanlan.zhihu.com/p/56464994" target="_blank" rel="noopener">追着追着就不追了</a>？感觉自己也不差呀？女人们的这种想法很多，我认为是可以理解的，但又太脱离实际。因为生活是具体，但是美并不解饿，而人又有尊严，要是再考虑上机会成本，结果可想而知。我大学追女生就是失败者，我完全搞错了，追了不该追的人，把自己感动半天，现在想想挺傻的。对女生，我能说的是爱情是平等的，你相信人人平等，你要求人人平等，怎么到了爱情就该别人追你？什么女追男隔层纱，无非世人的说辞，你追男生失败和男生追女生失败的感受一样，凭什么好男人就该来追你？不能等着别人对你好，实际上就没人应该对你好，先前的好算是礼貌，后面的不好，只是常态，套个官方词汇叫新常态。一个公司，一个部门，一个班级，那么多男生不对你嘘寒问暖，你从不会怪罪，怎么有人对你好了，然后稍微的不好就让你生怨？</p>
<p>朋友的失态，即令情节重大亦易原谅，恋人的小错，即事属细微亦难宽恕。友谊的价值在于自由自在的放任，而爱情却充满着揣惴焉唯恐失其所爱的恐惧。事实证明，无端的一百个好，只要中途有一次不好，前面的一百次好也会变成不好。恩怨也是这么来的，恩恩怨怨，有恩才有怨，有多大恩就有多大怨。没有恩怨的人是陌生人，碰面擦肩而过；有恩的人，利益纠葛着，反而恩情会百倍千倍地放大你的一次错。</p>
<p>同样的，男性朋友们，没有女人需要对你好，对你的冷淡实属正常，每个人有自己的生活，你怨不得别人。怨恨只会麻痹你自己的大脑，让自己成为一个弱者，且心灵还要反复受到冲击。要是她再领着她亲爱的男友在你眼前晃，那时嫉妒，羞耻就无时不刻不在摧残着你。</p>
<p>总体来看，女人们的贞操就如一把锁，挡得住君子却挡不住小人。白天鹅往往遇到的不是什么白马王子，而是凶狠的菜刀；白菜不是做成了开水白菜，而是扔到猪圈里被猪拱。只是这个时候，女性们已无法发现自己身处猪圈，最后从某个不知什么途径认识的人里挑了头最好的猪，而又是自己挑的，爱得不得了，反而真正爱她的，值得托付的老实人得靠边站。</p>
<p>这个时代通讯发达，物质生活极为丰富，相当一部分人看不到社会的发展脉络和个人的命运，总是享受感官的刺激，而灵魂却尤为空虚，他们喜欢浪，但浪久了，只有悲剧。没有女人喜欢不思进取的男人，也没有男人喜欢浪荡的女人。</p>
<p>奉劝男性同胞们，你不要为情爱和性去找女人，而要为了家庭幸福和事业的进步去找经济适用女。我们都是普通人，太漂亮的女生你大可以过滤掉，如果不相信，端起镜子照照自己，摸摸钱包。今天的时代飞速发展，物质丰富，你要不被外界迷惑，有自己的事业。只要够牛，女人自己都会过来的，这点我切身体会，如果自己垃圾，就要努力(这话说给我自己听)。渴求美女的心，我理解，但劝你早放弃，懂得正态分布的你应该知道普通长相属于绝大多数，美女只属于最右侧，终归稀缺品。如果你发现周围美女多，那大概也是你运气好，还有化妆术的发达。不信你马上用手机搜搜20年前，30年前春晚现场观众照片，再看现在春晚，你发现女的漂亮多了，然而一个民族，不可能几十年基因改变，怎么就漂亮了，妆的呗，再多的话不说了，懂的自然懂。</p>
<p>对女人们的建议，男人是资产，你要找成长股，穷只是现在，他未来潜力如何？无论如何不要挑到垃圾股。中国股市3000多支股票，只有几十只是好股，这个比例放到男人中一样，大部分男人都是垃圾股(当然我在很大程度上也是垃圾股)，稍微动动脑子就知道，好男人其实很少，你觉得你周围的人不错是因为他和你没利益纠葛，你不知道他私下的生活，你对他的评价只是从其穿着和言谈上，看他帅不帅什么的，而一旦牵扯利益，叫他承担责任，尤其你怀孕试试？这时你就知道你遇到的都是什么垃圾，那时候，帅反而成了你无法诉说痛苦的根源。最后你发现，一般长相，一般身高的人居然是你最喜欢的，所谓的帅其实没什么用，因为生活是实在的，生活不是帅的。小说里的霸道总裁确实有，但你大概率遇不到，遇到了你也不一定珍惜，反而等着别人宠你；韩剧都是虚幻的，那是给娇娇女们准备的，然而你可不是这种人。所以少心机，多真诚，去帮助你爱的人，一起成长，就像茅台股，从2008年的80元一股涨到目前一千二百多一股，坚持这十年持有茅台的客户获得的收益是上百倍，可80元的潜力股男人，你又能看上，你有眼光发掘吗？一个男人十年后到底走到什么地步？大部分女的只看眼前别人有没有房子，车子，就说一个大学生毕业20多岁吧，怎么可能会有很多钱？潜力股就像80元的茅台，等着被发掘，慢慢升值，你需要持有他十年以上。然而你要的却是10年后的价值享受，马上就体贴温暖，马上就安逸美满，现实是这不可能。反观那种没什么潜力的垃圾股，尤其靠几套衣服，几双鞋子，几句甜言蜜语而价值虚高的垃圾股，操了一堆女人，你又能甄别？怕是你还觉得别人风趣幽默，岂不知他对别的女人一样风趣幽默。看看自己认识的男生，有多少你认为十年后大概率升值，又有多少垃圾，你自己心里就清楚了。毫不客气的说，你可能认识的男生里大部分是垃圾，一个升值的都没有，也可能有一两个，但是你真有胆识和别人保持哪怕友谊，你又请过别人吃过几顿饭，看过几次电影？</p>
<p>当然，这是一家之言，可能有些偏激，但就是这么个感受。今天的中国，此时此刻的神州大地上，这许多男女之间确实就发生着这些事儿。我相信爱情的宝贵，但也珍视感情中自由的滋味。如果拉低质量去符合别人的要求，我不如保守独身。一个男人遇到差不多聪明的女人就可以追求，一起过日子，一起奋斗，这是一种缘分和幸福。女生遇到合适的也可以去追求，女追男不丢人，这是21世纪，还用清朝的思维来武装自己？即令失败，也只自己知道而已。你不去追优秀股，然后从身边再挑再选，最后都是垃圾股，只是相对没那么垃圾而已，但你的厄运就此开启。感情它不像考试，可以补考，感情错过了，放弃了，选错了就很难补考，即便补考，代价也很大，最后还多半不及格。有的时候事物各方面的状况都很好，但依然会出问题。我们对未知事物的控制能力很弱，所有指标一切正常，但突然就爆发问题，人与人间的感情也是如此…</p>
<p>对了，忘了交代，那男的确实在外面有人了，只是女主人无意说中了，小三就是女主人猜的那位…，男主人心中的恐慌是真的，还有他的工资上个月就涨了，到了41000，这真是一个神奇的故事。确实，有的时候事物各方面的状况都很好，但依然会出问题。你对未知事物的控制能力很弱，所有指标一切正常，你以为故事结束了，但突然就爆发问题，小说的套路也是如此…男人和女人，终究是不一样的动物。</p>
]]></content>
  </entry>
  <entry>
    <title>CS强校及人工智能领域顶会</title>
    <url>/title/fa65fa6b/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/17/MsC4wd.md.png" alt="aimeeting">  </p>
<a id="more"></a>

<h2 id="计算机科学领域全球高校排行榜"><a href="#计算机科学领域全球高校排行榜" class="headerlink" title="计算机科学领域全球高校排行榜"></a>计算机科学领域全球高校排行榜</h2><table>
<thead>
<tr>
<th align="center">排名</th>
<th align="center">校名</th>
<th align="left">评分</th>
<th align="left">大牛数量</th>
<th align="left">均值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">卡内基梅隆大学</td>
<td align="left">18.7</td>
<td align="left">161</td>
<td align="left">116.4</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">麻省理工学院</td>
<td align="left">12.7</td>
<td align="left">86</td>
<td align="left">147.7</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">伊利诺伊大学香槟分校</td>
<td align="left">11.7</td>
<td align="left">97</td>
<td align="left">120.6</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">斯坦福大学</td>
<td align="left">11.1</td>
<td align="left">63</td>
<td align="left">176.1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">加州大学伯克利分校</td>
<td align="left">10.5</td>
<td align="left">85</td>
<td align="left">123.5</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">康奈尔大学</td>
<td align="left">9.3</td>
<td align="left">74</td>
<td align="left">125.7</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">密歇根大学</td>
<td align="left">9.2</td>
<td align="left">75</td>
<td align="left">122.7</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">华盛顿大学</td>
<td align="left">9.2</td>
<td align="left">62</td>
<td align="left">148.4</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">加州大学圣地亚哥分校</td>
<td align="left">8.7</td>
<td align="left">65</td>
<td align="left">133.8</td>
</tr>
<tr>
<td align="center"><strong>10</strong></td>
<td align="center"><strong>清华大学</strong></td>
<td align="left"><strong>8.6</strong></td>
<td align="left"><strong>116</strong></td>
<td align="left"><strong>74.1</strong></td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">苏黎世联邦理工大学</td>
<td align="left">8.6</td>
<td align="left">36</td>
<td align="left">238.9</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">马里兰大学</td>
<td align="left">7.8</td>
<td align="left">68</td>
<td align="left">114.7</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">佐治亚理工学院</td>
<td align="left">7.5</td>
<td align="left">88</td>
<td align="left">85.2</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">哥伦比亚大学</td>
<td align="left">6.8</td>
<td align="left">50</td>
<td align="left">136.0</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">威斯康辛大学</td>
<td align="left">6.7</td>
<td align="left">52</td>
<td align="left">128.8</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">新加坡国立大学</td>
<td align="left">6.5</td>
<td align="left">67</td>
<td align="left">97.0</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">东北大学</td>
<td align="left">6.3</td>
<td align="left">65</td>
<td align="left">97.0</td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">多伦多大学</td>
<td align="left">6.1</td>
<td align="left">72</td>
<td align="left">84.7</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">加州大学洛杉矶分校</td>
<td align="left">5.6</td>
<td align="left">39</td>
<td align="left">143.6</td>
</tr>
<tr>
<td align="center">20</td>
<td align="center">宾夕法尼亚大学</td>
<td align="left">5.6</td>
<td align="left">50</td>
<td align="left">112.0</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
<td align="left">…</td>
<td align="left">…</td>
<td align="left">…</td>
</tr>
<tr>
<td align="center"><strong>31</strong></td>
<td align="center"><strong>北京大学</strong></td>
<td align="left"><strong>4.8</strong></td>
<td align="left"><strong>111</strong></td>
<td align="left"><strong>43.2</strong></td>
</tr>
</tbody></table>
<p>北大和清华专家数那么多，但是反而评分低，说明什么问题？是不是我们好几个大牛合起来才顶别人一个？我看就是这样，这样一比，清北两校的实力就很明显了。国内数一数二，国际勉强排得上号。将评分除以人数再乘以100得到人均综合实力值，可以看到，清华北大依然很一般，还有进步空间。换句话说，清北两校的计算机牛人可能还不够牛。</p>
<h2 id="各种人工智能领域顶会"><a href="#各种人工智能领域顶会" class="headerlink" title="各种人工智能领域顶会"></a>各种人工智能领域顶会</h2><p><strong>Artificail intelligence(人工智能)</strong><br><a href="http://dblp.org/db/conf/aaai/" target="_blank" rel="noopener">AAAI</a><br><a href="http://dblp.org/db/conf/ijcai/index.html" target="_blank" rel="noopener">IJCAI</a>  </p>
<p><strong>Computer vision(计算机视觉)</strong><br><a href="http://dblp.org/db/conf/cvpr/index.html" target="_blank" rel="noopener">CVPR</a><br><a href="http://dblp.org/db/conf/eccv/index.html" target="_blank" rel="noopener">ECCV</a><br><a href="http://dblp.org/db/conf/iccv/index.html" target="_blank" rel="noopener">ICCV</a>   </p>
<p><strong>ML &amp; data mining(深度学习和数据挖掘)</strong><br><a href="http://dblp.org/db/conf/kdd/index.html" target="_blank" rel="noopener">KDD</a><br><a href="http://dblp.org/db/conf/icml/index.html" target="_blank" rel="noopener">ICML</a><br><a href="http://dblp.org/db/conf/nips/index.html" target="_blank" rel="noopener">NIPS</a>  </p>
<p><strong>NLP(自然语言处理)</strong><br><a href="http://dblp.org/db/conf/acl/index.html" target="_blank" rel="noopener">ACL</a><br><a href="http://dblp.org/db/conf/emnlp/index.html" target="_blank" rel="noopener">EMNLP</a><br><a href="http://dblp.org/db/conf/naacl/index.html" target="_blank" rel="noopener">NAACL</a>   </p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
  </entry>
  <entry>
    <title>5G之后是6G？</title>
    <url>/title/fb817f20/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/31/KooVW4.jpg" alt="5gON"></p>
<a id="more"></a>

<h2 id="5G商用"><a href="#5G商用" class="headerlink" title="5G商用"></a>5G商用</h2><p>今天上午，2019中国国际信息通信展在北京国家会议中心召开。在5G商用启动仪式上，工信部与中国移动、中国联通、中国电信、中国铁塔共同宣布5G正式商用。11月1日，也即明天，各地的5G套餐就可以办理了。对于大部分消费者来说，有尝鲜的意愿，但目前价格还比较贵，真正办理的估计不多。但不管贵不贵，速度快倒是真的。</p>
<h2 id="运营商的新玩法"><a href="#运营商的新玩法" class="headerlink" title="运营商的新玩法"></a>运营商的新玩法</h2><p>5G和4G相比，有了很多不同的情况，尤其是在运营商层面。4G时代各大运营商相互竞争，5G时代，运营商得抱团取暖，合作共赢。上面已经表明，电信和联通要共同建设通信基站，以往各自建塔的模式玩不转了，唯一能独立搞的就只有移动。5G，使用的波更短，意味着要使用更多的基站，而每个基站都挺贵的，所以总体基站建设费用会比较高，从目前公布的基础套餐价最低为128也能看出这点。据最新数据估计，5G基站建设得分好几年，总投资费用高达数万亿。</p>
<p>从频段的分配上也能看出，这两家拿到的5G频段加起来还没人家移动一家多，唯一的好处是，联通电信的频段处于最成熟的区间，布置网络要容易些。</p>
<table>
<thead>
<tr>
<th align="center">移动</th>
<th align="center">联通</th>
<th align="center">电信</th>
</tr>
</thead>
<tbody><tr>
<td align="center">260MHz</td>
<td align="center">100MHz</td>
<td align="center">100MHz</td>
</tr>
</tbody></table>
<p>时代变了，以前的冤家，现在成了亲家，仇人成友人。联通和电信多年发展的失利致使移动独大，只好两家合纵连横同移动拼，真真是有点儿三国演义的味道，然而现实是深刻的，利益是重要的，脸面是可以不要的，所以两家得合作。</p>
<p><img src="https://s2.ax1x.com/2019/10/31/Kooml9.md.jpg" alt="TelUni"></p>
<p>除此之外，运营商和用户在基站的问题上还存在一个博弈过程。用户的要求是，基站不能放我家旁，但信号必需好，放在别人家旁我没意见。所以逼着运营耍手段，给基站来个大隐身。路边的井盖，路灯，房顶的空调机，绿化树，排气管等等全都成为了基站的新替身。城市人从来看不到基站，但它们却一直在你身边。</p>
<p><img src="https://s2.ax1x.com/2019/11/01/KTx8jf.jpg" alt="basestation1"></p>
<p>你以为是绿化，其实是基站。</p>
<p><img src="https://s2.ax1x.com/2019/11/01/KTxTKK.jpg" alt="basestation2"></p>
<p>你以为是热水器，其实是基站。</p>
<p><img src="https://s2.ax1x.com/2019/11/01/KTxx2t.jpg" alt="basestation3"></p>
<p>请勿践踏花草，其实里面也是基站，一体两用。</p>
<p>5G基站大幅度增加，耗资巨大，必然导致有的地方投资薄弱，很多地方未来几年都将没有5G信号，所以买5G手机先确认自家信号，别买了用不了。下表中的城市是首批开通5G的城市，其他城市可能要等两年左右。</p>
<table>
<thead>
<tr>
<th align="center">直辖市</th>
<th align="center">省会城市</th>
</tr>
</thead>
<tbody><tr>
<td align="center">北京，上海</td>
<td align="center">成都，杭州</td>
</tr>
<tr>
<td align="center">天津，重庆</td>
<td align="center">南京，武汉等</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">单列市</th>
<th align="center">重要城市</th>
</tr>
</thead>
<tbody><tr>
<td align="center">深圳，青岛</td>
<td align="center">雄安，苏州</td>
</tr>
<tr>
<td align="center">宁波，厦门</td>
<td align="center">温州，张家口</td>
</tr>
<tr>
<td align="center">大连</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>我在想，要是5G时代，联通和电信合起来还干不过移动，是不是意味着权力的洗牌，会不会拆分一家合并到另外两家中去？运营商的套路是丰富多样的，不知未来的套餐又会出什么新花样，反正消费者要看清楚，别被忽悠。</p>
<h2 id="5G应用场景猜测"><a href="#5G应用场景猜测" class="headerlink" title="5G应用场景猜测"></a>5G应用场景猜测</h2><p>前段时间在B站上，北京邮电大学的何同学试用了5G，并就未来的应用做了讨论。他借鉴了4G刚出来时人们的反应，表明预测未来的应用确实是挺难的。</p>
<p>视频：5G有什么用</p>
<iframe src="https://player.bilibili.com/player.html?cid=95749546&aid=54737593" width="270" height="300" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

<p>尽管很难预测，但我还是大胆猜猜5G的应用。  </p>
<table>
<thead>
<tr>
<th align="center">预</th>
<th align="center">测</th>
</tr>
</thead>
<tbody><tr>
<td align="center">远程医疗</td>
<td align="center">智慧施政</td>
</tr>
<tr>
<td align="center">智能家具</td>
<td align="center">工业物联</td>
</tr>
</tbody></table>
<p>远程医疗：一是指优秀的专家可以远程做手术，节约时间和交通成本。二指医生可以通过网络对家里的病人进行指导和开展医疗服务。4G让人吃饭不出家，点外卖；5G就让人生病不出家，点医生，点药。未来的医生可能会享受很高的社会地位，他们通过提供更好的服务，赚取高额的佣金。同时，这种新的医患关系避免物理接触，保护了医生。</p>
<p>智慧施政：民智越开，则政府越弱，一旦老百姓掌握了信息，那么政府的很多服务可以取消，政府不能随便制定政策，很多政府服务要交给智慧系统，很多政府职权要还给百姓。</p>
<p>智能家具：物联网时代，硬件大爆发，未来的家庭，联网的器件增多，冰箱，空调，桌子，椅子可能都有某种程度的网络功能，并提供相应的服务。</p>
<p>工业物联：打造全新的制造链和运输链，智能驾驶，智能运输系统，同时可能出现新的产业联盟，类似今天存在的各种协会。</p>
<h2 id="5G中的Polar码"><a href="#5G中的Polar码" class="headerlink" title="5G中的Polar码"></a>5G中的Polar码</h2><p>Polar码是5G中的一种编码技术，属于5G核心技术。Polar码源于2008年的一篇论文Channel Polarization。作者是土耳其科学家埃达尔·阿勒坎（Erdal Arikan）。1981年，阿勒坎在位于加州理工学院获得本科学位，随后他去了美国的另一所名校——麻省理工学院，于1985年得到电子信息工程专业的博士学位。阿勒坎的博士生导师是美国人罗伯特·加拉格（Robert Gallager）教授，而加拉格的导师，也就是阿勒坎的师爷，则是大名鼎鼎的信息论鼻祖香农。原本以为只是个牛叉人物，没想到竟然是香农大佬门徒。不过想来也对，不是这个领域的人，又如何搞出这些编码呢？</p>
<p>华为公司在论文出来后，就调集人手攻克论文提出的编码，并最终得以攻克。前几年，华为推动的Polar码在3GPP会议上同LDPC码共同确立为5G技术，LDPC管数据信道，Polar码则控制通信信道。Polar码中，重要的是一个矩阵问题，解决了矩阵问题，编码问题就解决了。当然，我不是专家，不太懂，无法发表更多看法。</p>
<p>值得一提的是，美国人推动的LDPC就是阿勒坎的师傅加拉格搞出来的，最终两师徒的理论均成为5G核心技术，美国选了师傅，中国选了徒弟，然后相互竞争，相互斗。</p>
<p><img src="https://s2.ax1x.com/2019/10/31/Koo3FO.png" alt="Edel"></p>
<p>图为华为创始人任正非为阿勒坎颁奖，感谢其在该领域的杰出贡献</p>
<p>除了编码，5G中还有其他的核心技术，包括OFDM（正交频分复用），MIMO（多天线），新的组网结构。在Erik Dahlman的《5G NR》一书提到 “Both LTE and NR are developed by 3GPP and hence have a common background and share several technology components. Many of the design choices in NR are also based on experience from LTE. Furthermore, LTE continues to evolve in parallel with NR and is an important component in 5G radio access.” 可见，4G (LTE)中有些技术是用到5G里面的，自然5G和4G是兼容的。</p>
<h2 id="6G研究"><a href="#6G研究" class="headerlink" title="6G研究"></a>6G研究</h2><p>2018年两会期间，工信部部长苗圩表示，中国已开展6G的研发，预计2030年试使用。中国通信产业要做到，用一代，产一代，研一代。</p>
<p><img src="https://s2.ax1x.com/2019/10/31/KoTC1H.jpg" alt="miaoyu"></p>
<p>图为工信部长苗圩接受记者访问，并透露6G研究情况</p>
<p>目前的5G，仍然有缺点，很多缺点就是4G(LTE)自带的，在5G仍然没有解决，所以6G要首先解决这些问题，不然下一代通信技术不可能得到发展。5G都这么快了，6G又该如何？这种问题，想象力不够，水平不够，想不出来。但从社会生产力变革的发展和国家对通信行业的投入来看，未来搞通信的人还将大有作为。这个产业涉及的硬件如芯片，天线，软件如算法，智能调度等将得到进一步发展。当然，6G现在还处在概念期，华为也刚开始投入研究，社会上谈得不多。</p>
<p>我个人看好6G，换句话说，我认为未来从事计算机，通信，算法，芯片，天线等行业的人将大有可为。知道了这些，怎么选路就很清楚了。人一辈子能碰上一个技术浪潮，加之努力，就可能过得很好，何况处在人类技术大爆发的年代，新技术正不断冒出，新思想正时刻迸发。人人都讲抓住机遇，但机遇也要靠自己奋斗，不是喊喊口号就行。新的技术会催生新的公司，同时灭掉旧的公司。今天的淘宝，腾讯，谁说未来不会成为下一个诺基亚？对于自身来讲，个人的人生道路就看他处在历史的潮流中是抱残守缺还是革故鼎新。</p>
<h2 id="G"><a href="#G" class="headerlink" title="?G"></a>?G</h2><p>现在再进一步思考：6G过后呢？难道7G？可是信道容量是有极限的，香农定理早已经证明了这一点。<br>$$ C= Blog_{2}(1 + \frac{S}{N}), (N =n_0B)  $$<br>若上面的香农公式中，B趋于无穷，则在给定$S/n_0$的情况下，C最大只能等于<br>$$1.44\frac{S}{n_0}$$ </p>
<p>所以6G过后，是无G。没有了，等待新技术的突破吧，尤其是物理突破。没有物理理论上的突破，人类的技术就不会进步。实际上，每一次物理的突破都带来了技术的革新。我们回顾自1905年相对论诞生以来的一百多年，原子弹，核电站，GPS成为现在时态；量子力学的诞生提出了晶格理论，催生了新材料合成技术，进而推动半导体发展，集成电路发展，最后是建立于之上的计算机，互联网，一直到今天我们都还在吃量子力学的老本儿。最近一段时间，谷歌的<a href="https://www.nature.com/articles/s41586-019-1666-5" target="_blank" rel="noopener">量子霸权</a>不也再次挑动人们的眼球吗？</p>
<p>当然，有人说，难道不能突破香农定律吗？还别说，还真有这种人，而且还写了相应的文章，只是没有哪位审稿人给通过。另外，芯片行业的摩尔定律也到头了，CPU能做到1nm吗？能再小吗？不行了，因为电子有大小的，一到电子这个尺度，就要考虑量子效应。</p>
<p>所以，物理上如果不能取得新突破，则人类就会像欧洲中世纪一样，长时间生活在技术停滞发展的社会。想象如果50年后人们还在玩视频直播，还过着2019年的生活，这会不会出问题？相反，新理论会催生新的生产力，进而产生新的技术并推动文明的前进。今天的地球，斗争处于文明体之间，进步的活下来，落后的要么灭亡，要么遭奴役。这个时代是和科技战车绑架在一起的时代，任何人都只能支持科技的发展。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] 文明的冲突，[美]亨廷顿<br>[2] 5G核心技术，Qualcomm(高通)中国<br>[3] 手机基站天线去哪儿了？知乎老狼<br>[4] 5G NR: The Next Generation Wireless Access Technology<br>[5] Channel Polarization, Erdal Arikan, Senior Member, IEEE.  </p>
]]></content>
      <categories>
        <category>通信</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title>资深大牛的博客</title>
    <url>/title/f2d8edc5/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5YRsK.jpg" alt="niubility"></p>
<a id="more"></a>

<h2 id="整理一份行业大牛的博客"><a href="#整理一份行业大牛的博客" class="headerlink" title="整理一份行业大牛的博客"></a>整理一份行业大牛的博客</h2><p>00.<a href="http://www.yinwang.org/" target="_blank" rel="noopener">王垠</a></p>
<p>01.<a href="https://blog.codingnow.com/" target="_blank" rel="noopener">云风</a></p>
<p>02.<a href="http://blog.yufeng.info/" target="_blank" rel="noopener">余峰</a></p>
<p>03.<a href="https://www.cnblogs.com/Solstice/" target="_blank" rel="noopener">陈硕</a></p>
<p>04.<a href="http://blog.zhaojie.me/" target="_blank" rel="noopener">老赵</a></p>
<p>05.<a href="https://blog.csdn.net/luoshengyang" target="_blank" rel="noopener">老罗</a></p>
<p>06.<a href="https://blog.csdn.net/21aspnet" target="_blank" rel="noopener">无界</a></p>
<p>07.<a href="https://evilcos.me/" target="_blank" rel="noopener">余弦</a></p>
<p>08.<a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰</a></p>
<p>09.<a href="http://mindhacks.cn/" target="_blank" rel="noopener">刘未鹏</a></p>
<p>10.<a href="https://www.trinea.cn/" target="_blank" rel="noopener">吴更新</a></p>
<p>11.<a href="http://www.cppblog.com/vczh" target="_blank" rel="noopener">VCZh</a></p>
<p>12.<a href="https://www.byvoid.com/blog" target="_blank" rel="noopener">BYVoid</a></p>
<p>13.<a href="https://blog.csdn.net/v_july_v" target="_blank" rel="noopener">七月在线创始人</a></p>
<p>14.<a href="http://www.zhuangbiaowei.com/blog/" target="_blank" rel="noopener">读书，思考，生活</a></p>
<p>15.<a href="https://www.captainbed.net/troubleshooter/" target="_blank" rel="noopener">床长人工智能教程</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>双托管代码</title>
    <url>/title/53e77485/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5YBa4.md.jpg" alt="dulgit"></p>
<a id="more"></a>

<hr>
<h2 id="一：背景"><a href="#一：背景" class="headerlink" title="一：背景"></a>一：背景</h2><p>近期美国加紧封锁大棒，不但对中国，据说连委内瑞纳一个小国也被禁止使用Photoshop。结合前段时间github封禁中东开发者的情况，我认为中国的开发者需要把代码迁移一下，迁移到国内。目前国内的托管平台有多个，腾讯开发者平台，码云，还有最近华为开放的ihub，我选择了码云。</p>
<hr>
<h2 id="二：双托管"><a href="#二：双托管" class="headerlink" title="二：双托管"></a>二：双托管</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先查看配置.</span><br><span class="line">$git remote -v </span><br><span class="line">origin git@github.com:USERNAME/package.git (fetch)</span><br><span class="line">origin git@github.com:USERNAME/package.git (push)</span><br><span class="line">删除github的配置.</span><br><span class="line">$git remote rm origin</span><br><span class="line">重新添加新配置.</span><br><span class="line">$git remote add github git@github.com:USERNAME/package.git</span><br><span class="line">$git remote add gitee  git@gitee.com:USERNAME1/package1.git</span><br><span class="line">解决推送冲突</span><br><span class="line">$git pull gitee master --allow-unrelated-histories</span><br><span class="line">推送到两个平台</span><br><span class="line">$git push gitee  master </span><br><span class="line">$git push github master</span><br></pre></td></tr></table></figure>

<p>如果想存放在多个平台，修改同上面一样，只需要加入另一个平台的地址就行。</p>
<p>目前，国内平台多，但和Github比还有差距，仍需相关方继续推动，促进国内源代码托管。同时做好国际化，鼓励国外工程师托管优质代码到中国的服务器。</p>
]]></content>
      <categories>
        <category>代码托管</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>校训？笑训？</title>
    <url>/title/cc8c4bdd/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KqWhGD.md.png" alt="university"></p>
<a id="more"></a>

<p>我的高中是在抗战时期建立的，那时南开大学的创立者张伯苓迫于日军轰炸将南开大学校迁到西南。高中故特意聘请他为学校的董事长，让他署理学校，在那个年代就用董事制度，算是很科学的了。张董事长，为我们学校题的校训是“尽心为公，努力增能”，着重于公能教育。在那个年代，此二字正是时代的需要。</p>
<p>南开大学的校训是“允公允能、日新月异”，也是强调公能，直到现在，南开的校训没改，我的高中校训也没改过。我们高中的校歌和南开大学旋律一样，只是改了几个字。当然，我不是要说我高中历史，而是想说高校的校训，前面只是引子。</p>
<p>从各个高校的校训中，我们可以看到一个高校的性格或者说使命。中国的高校很多，每所的定位又不同。就那39所985高校来看，我发现各个高校的校训也很能反映其特点。</p>
<h2 id="校训"><a href="#校训" class="headerlink" title="校训"></a>校训</h2><ul>
<li>浙江大学———求是创新  </li>
<li>同济大学———同舟共济  </li>
<li>天津大学———实事求是  </li>
<li>东南大学———止于至善  </li>
<li>东北大学———光明、真理、勇气  </li>
<li>清华大学———自强不息、厚德载物  </li>
<li>南开大学———允公允能、日新月异  </li>
<li>山东大学———学无止境、气有浩然  </li>
<li>厦门大学———自强不息、止于至善  </li>
<li>湖南大学———实事求是、敢为人先  </li>
<li>中南大学———知行合一、经世致用  </li>
<li>南京大学———诚朴雄伟、励学敦行  </li>
<li>四川大学———海纳百川、有容乃大  </li>
<li>兰州大学———自强不息、独树一帜  </li>
<li>北京大学———爱国、进步、民主、科学  </li>
<li>复旦大学———博学而笃志、切问而近思  </li>
<li>吉林大学———求实、创新、励志、图强  </li>
<li>武汉大学———自强、弘毅、求是、拓新  </li>
<li>中山大学———博学、审问、慎思、明辨、笃行  </li>
<li>重庆大学———耐劳苦、尚俭朴、勤学业、爱国  </li>
<li>中国人民大学—-实事求是  </li>
<li>西北工业大学—-公、诚、勇、毅  </li>
<li>中国海洋大学—-海纳百川、取则行远  </li>
<li>中央民族大学—-美美与共、知行合一  </li>
<li>华东师范大学—-求实创造、为人师表  </li>
<li>电子科技大学—-求实求真、大气大为  </li>
<li>北京理工大学—-德以明理、学以精工  </li>
<li>北京师范大学—-学为人师、行为世范  </li>
<li>华南理工大学—-博学慎思、明辨笃行  </li>
<li>上海交通大学—-饮水思源、爱国荣校  </li>
<li>大连理工大学—-团结、进取、求实、创新  </li>
<li>华中科技大学—-明德、厚学、求是、创新  </li>
<li>中国农业大学—-解民生之多艰、育天下之英才  </li>
<li>西安交通大学—-精勤求学、敦笃励志、果毅力行  </li>
<li>哈尔滨工业大学—–规格严格、功夫到家  </li>
<li>西北农林科技大学–诚朴勇毅中国  </li>
<li>北京航空航天大学–德才兼备、知行合一  </li>
<li>中国科学技术大学–红专并进、理实交融  </li>
<li>国防科学技术大学–厚德博学、强军兴国  </li>
</ul>
<table>
<thead>
<tr>
<th align="center">独字</th>
<th align="center">高频字</th>
<th align="center">分类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">145</td>
<td align="center">求，学</td>
<td align="center">985高校</td>
</tr>
</tbody></table>
<p>清华的校训应该是取自《易经》乾坤二卦的解释“天行健，君子以自强不息；地势坤，君子以厚德载物”。本来我不知道，直到有天读《易经》时发现原来清华校训大有来头。所以，清华确实强，人家很有修养，校训直接从中国最古老的书里找。北大的校训和五四运动的科学民主有关，德先生和赛先生进入人家校训，今天北大的学生仍然是推动国家民主科学的先锋。</p>
<p>反观我的大学母校们，校训要自己看，自己学，校歌到今天我都不知道，也没唱过。反而我的高中给我的印象更深刻，时刻不忘的公能，而大学给我的感觉就是一个加工厂，培养一批具有知识的高级动物。工厂提供产品，教堂提供虔信，法庭提供公道，而学校要增加智慧的光芒。我确实从大学学到一点儿知识，但没有学到灵性。我更多地学会了长袖善舞的机巧和溜须拍马的嘴皮子，而没有学到真正值得追求的东西。大多数情况下，我们的学校培养的不是顺从的羔羊，而是凶狠的野驴和倔强的骡子；学校培养不出合乎德行的品性，培养的全都是虚伪的道德外表，一种令人生厌的，外来的文化皮毛，和一些专务世俗虚荣的眼光和手脚。再看部分大学生，他们热衷于各种套路和关系，喜好各种名头和称谓。别人考了个什么证，他便也考个什么证；别人参加比赛，即令其不参加，也少不了风言风语。他们做事最不会忘记的是拍视频，拍照片，最后拿回去做成报告，做到简历上，这些智慧和机巧成为了他们上升的资本和渠道。总之，相当一部分大学生会钻营，有心机，玩得来大的，也玩得转小的，他们太聪明，聪明到自己都不认识自己。拥有小聪明，缺少大智慧。</p>
<p>一所大学，不光是传授知识的场所，更该是培养人性和思想的福地，大学还是要有点儿不那么功利的精神才行。要说知识，各所高校教的知识又真的会差多少呢？各个大学的学生又真能差到哪里去？但是，大学环境的不同，各位官老爷和教务人员治校水平的不同，最终导致学生的不同性格和命运，我认为高校当反思，当然学生也要反思。一切事物的本性在较弱时容易屈服，长硬了就改不了，人心如白纸，看怎么写，尤其是高校打算怎么往学生心里写。</p>
<p>今天一谈教育，就夸自己什么双一流，985，211高校，但是培养的学生有多少有真实本领，又有多少具有独立思考和真知灼见呢？我们骂社会风气不好，利益至上，腐败横流，但我们的大学培养的学生不正是在社会上呼风唤雨的那群人吗？我们的校训强调的都是好的，一说嘴里吐出的全都是仁义道德，但是社会一染，干的又全都开始不清不楚起来。我们的老师喜欢划重点，学生也爱划重点，但是人生的重点谁来划？知识确实能学进去，不，简直是打进去。本来可以明白地和明亮地放在心智眼前的事情，却晦涩，迷惑地讲，错杂地看待。</p>
<p>长此以往，学生回忆起母校的时候，除了能谈谈那几栋楼，和吃饭睡觉的场所外，又还能有什么呢？有多少不照着PPT念的老师？有多少既教书还育人的师长？历史文化底蕴知多少，精神追求是什么？</p>
<p>我们的学校确实需要培养工程师和科学家，但工程师和科学家应该具有灵性，而不是魔性与奴性。工程师和科学家们不但要学会做工程和科研，还要学会做人。尤其是大学要教育学生学会做人，当然老师更要为人师表，率先垂范。</p>
<p>当今这个时代，实在做事最容易，做人却尤其的难。大部分人听不进去真话，反而是捧场话最得人心。最后，聪明的中国人学会了真话实话不全说，套话空话满天飞，忠言逆耳成了批评人的辞令，一用到自己身上却都说自己情况不同，你说怪不怪？怎么一个真理，用到自己身上就不管用？</p>
<p>所以，高校的老爷们，多多抓人文教育，把你的校训交给大家，把校服发给大学娇娇子们，让他们把校歌唱起来。学校既要教学生硬科学，也要给他们注入软文化。别看今天学生不耐烦这些，按照人性犯贱的规律，毕业了他出去后能记起的就是他今天骂得最多，最烦的东西。将来他懂道理了，他不但自己回忆起学校的种种好，旁人要是讲出个学校的不好，他一定同那人拼命。</p>
]]></content>
      <categories>
        <category>高校</category>
      </categories>
      <tags>
        <tag>校训</tag>
      </tags>
  </entry>
  <entry>
    <title>何以修身？</title>
    <url>/title/70af6bb7/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5YMqS.jpg" alt="beyourself"></p>
<a id="more"></a>

<h2 id="保持谦虚"><a href="#保持谦虚" class="headerlink" title="保持谦虚"></a>保持谦虚</h2><p>据我所知，人越是不懂便叫得越厉害，越是懂得多反而谦虚谨慎。人的认知犹如一个气球，懂得越多则撑得越大，接触的未知面就愈广，所以自然就愈谦虚；相反，什么都不懂的人，未知面很是狭小，如此他们便自以为什么都懂，与之理性地争论毫无作用，在他们的认知逻辑里，只要没人说自己不懂，自己便全都懂，所以他们首先想的不是解决问题，而是解决提问题的人。如此，长傲和多言成了他们的随身法宝。长傲、多言这两个弊病，我自己也经常犯，细细想来，古时世卿大夫的兴与衰，近来官场的祸与福，未尝不是由这两个弊病导致的。</p>
<p>这样看来，保持谦虚谨慎实在人性中的一大亮点。而世人包括我自己在内，又多不谦虚。因为不谦虚，所以便傲起来了，这样的例子太多太多。做官的一俟官位稳当了，官性就起来了，人性就龟缩了。被人一口一个书记，部长，领导叫着，自己也一步步走入自己挖的坑，跳入权势和名利的争夺圈。须知，权力的本质在于，即使不曾刻意追逐，甚至是被迫拥有，掌权者也会自然而然去追逐更多的权力。因为这样傲起来地快，所以倒下去也便一样地快。由此，身败名裂者，历史上实在为数太多。骄傲起来的，气焰盛了，便觉得自己了不得了，觉得老子天下第一聪明，但这种聪明多的是小聪明，少有大智慧。然而，人们真的就没有反躬自省的时候吗？实际是有的，但狂傲之人往往不习惯于理智上的反省，而习惯于情绪上的反省。中文里有个词叫闭门思过，你说他思谁的过？他思别人的过！不用说，我们自己也这么干过。我们和别人出了争端，闹了矛盾时多半不会反思，反而是相互指责，谩骂，攻讦。我们喜欢用的句式是：他…如何如何，都是他…怎样怎样。这里的一个例子是女人对男人的控诉：他又不爱我了，他又…我了，他总是….。这种甩黑锅的习惯甚至不是人的缺点，而是人的特点。即令监狱里被判刑的囚犯都说自己是被冤枉的，那么作为一个正常人，我们又如何肯轻易认错呢？然而，时代和科技的进步，家庭的和睦，无不有谦虚谨慎的功，也无不表明狂傲，多言的过。事实证明只有修谦虚谨慎的功，才弥补得了狂傲，多言的过。狂傲，多言只会自欺欺人，只会自己给自己洗脑，别人不来骗自己，反而自己要骗自己。</p>
<p>自己骗自己的范例，股市体现得最为精妙。凡是买股票的，没有不觉自己决策英明的。做多的，总盼着涨，即令下跌，眼随着曲线往下看，但心却依然在往上升。明明跌了，却还要反复骗自己肯定会涨。玩股票讲究两点：一要选得准，二要拿得稳。很多人也知道这两点，但第一点98%的人不知道自己不具备，反而觉得自己全具备。第一点学个半吊子，第二点又死守，学什么却什么都不对，最后只能被割韭菜为人接盘。没有人发现，股票分析师有大机构养着。他们自己可能从不操作股票，反而靠写各种炒股书籍来指挥散户，实际上他们的工作就是忽悠散户。他们不靠买卖股票赚钱，他们靠开讲座，卖书忽悠散户买卖股票挣钱。股市里，大家都说要稳，要谨慎，然而自己骗自己者，少吗？道听途说，盲目自信害着谁，自己遭了才知道。实际上即便遭了，很多人还不知道。狂傲，盲目自大作的祟，即令他们踩最多的坑，倒最大的霉，嘴上却还唱着最美的赞歌。</p>
<p>同样的，那男的看我了，是不是喜欢我？或者那女的瞅了我两眼，是不是对我有意思？看吧，人的大脑里总是有奇思妙想，总觉得有好事发生。电影里面数花瓣判断对方爱不爱我的把戏不也是自己内心犹豫不决，缺乏判断造成的吗？这也是自己骗自己。怎么一个男的长得帅的看你几眼就是喜欢你？怎的一个女的瞅你一下就是有意思？照照镜子吧！自我脑补，自我麻痹，自我欺骗，看来我们的大脑很不中用。</p>
<h2 id="读书以明理"><a href="#读书以明理" class="headerlink" title="读书以明理"></a>读书以明理</h2><p>面对我们自己的愚蠢，怎么办？我想，人生路上，还是多读点书为好。肚子饿了，知道吃饭，脑子饿了，精神空虚了，则宜读书。多读一册书，就多懂一行。懂得一行就掌握了一个维度，懂得多个领域，就掌握了多个维度。多掌握几个维度，也免得被人忽悠。许多人讲，工作太忙啦，没时间读书呀！我想说这话的人不是没时间读书，而是那个手机，它太好玩了，他们说的没时间，是玩了手机后没有时间。关于这点，有两个凡是：凡是要等到有了实验室方才做研究的，有了实验室也不肯做研究；凡是要等到有了时间方才读书的，有了时间也不肯去读书。</p>
<p>多读书，多体会别人面对各种情形时的判断和决策过程，这样，我们才能在面对复杂问题时提出妥善的解决方案，而不是如热锅上蚂蚁般团团转，撞了车也才不至于只懂得打电话找老公。多读书，使我们知道对问题的思考，往往不只一面，而是很多面，很可能还要翻一个面。我们要保持头脑开放，不能双脚踏在现代，而头脑还在宋代。爱因斯坦说过：“重大问题发生时，依我们当时的思想水准往往无法解决”。认知学上有个词叫“知识的错觉”：意思是说每个人懂的知识其实很少，但我们却以为自己懂得很多。我们不知道自己不知道，反而以为自己全知道，原因是我们把存在于他人大脑中的知识也看成是自己的。这就是我说的自己骗自己。我们面临的许多困难，其实并非真有多么困难，实乃我们见解上的困难，是书读少了的困难。</p>
<p>多读书，看览世间事，使我们知晓做人之道有时在于：含含糊糊的事要看得清清楚楚，而清清楚楚的事要显得含含糊糊。多读书，让我们知道不光要懂得积极工作的“生活技术”，还要懂得恋爱靠机会，而结婚靠智慧的“生活艺术”。多读书，我们才能保养自己的灵魂，尽量维持人生的幸福。许多人嘴上讲着保持精神上的纯粹，一讲都是满口的仁义道德，但他们肉体上却更加频繁地和俗事打着交道，食欲，睡欲，性欲，愤怒，骄傲和妒忌几乎成了他们维持生活的必需品。呼应理性与真理的能力人人皆有。不幸的是，响应非理性与谬论的倾向也同样存在每个人身上，特别是当谬误居然可以唤起令人愉悦的情感时，或者吁求非理性的时候，我们生命深处那原始的、兽性的部分，居然与之一拍即合。我们几乎都渴望和平与自由，但是却很少有人会对成就和平自由局面的思想、情感、行动产生热情。反过来说，没有人希望战争、独裁，但是却有相当多的人对造成战争独裁局面的思想、情感、行动怀抱深深的喜悦。嘴上说的都是自由，平等，正义，然而生活中最吸引人眼球的却是恐怖，暴力，色情。</p>
<p>多读书，能避免自己孤陋寡闻。书籍不但充实我们的灵魂，也同样减轻了我们精神上的痛苦，同时还可能解决我们面临的困难，这实在是很划算的事。诵读一册好书就是在不断地对话，书讲着，而我们的灵魂答着。当窗外阳光投射出的阴影从西边转到东边时，读者已经在书中看到了一个时代的兴亡、一种艺术的发展延续、一个人一生的得意与失落。虽然我们未环球旅行，但通过书籍，我们看到了现实的七大洲，并徜徉在心中的第八大洲。</p>
<p>多读书，明晰道理，使人聪明。聪明意味着遵循理智的指导，而愚蠢刚好相反，听任感情摆布，把理智限制于头脑的狭小角落里，而让感情囊括身体的其余部分。多读书，看别人犯的错，真正让自己谦逊。一个浮躁的人往往会急于为自己辩护，而辩护的结果又往往无济于事；一个勇于承认错误的人则给人一种尊贵、高尚的感觉。要知道：争辩永无止境，谦让受益更多! 发现自己的错误，需要智慧；承认错误，需要勇气；改正错误，则需要决心。</p>
<p>本文既是写给自己看，也帮助有需要的人。我很清楚，只有周围人的素质高了，社会才更理性，更安全，更有希望。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>小杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>中国狗和中国人(傅斯年)</title>
    <url>/title/7ac6e5db/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KLfQEt.jpg" alt="chinese"></p>
<a id="more"></a>

<p>有一天，我见着一位北京警犬学校的人，问他道:“你们训练的狗，单是外国种呢，或是也有中国狗?”他答道:“单是外国种的狗。”</p>
<p>中国狗也很聪明，它的嗅觉有时竟比外国狗还要灵敏，不过太不专心了。教它去探一件事，它每每在半路上，碰着母狗，或者一群狗打架，或者争食物的时候，便把它的使命丢开了，所以教不成材。</p>
<p>我听了这一番话，很有点感触，何以中国狗这样像中国人呢?不是不聪明，只是缺乏责任心。中国人“小时了了”的很多，大了，几乎人人要沉沦。留学在国外的成绩颇不恶——胡适之先生说，犹太人在美国大学的成绩最好，其次便是中国学生，至于真美国人，远不如这两个民族——然而一经回国，所学的都向爪哇国去了。大约也是遇着了母狗，或者加入一群狗打架，或者争食物，所以就把已经觉悟的使命丢掉了。</p>
<p>中国狗和中国人同生在一个地带，一个社会以内，因为受一样环境的支配，和西洋的狗和人比起来，自必有人狗一致的中国派的趋向。和狗有同样的趋向，并不是可羞的事。所不得了者，这趋向偏偏是无责任心。</p>
<p>我以为中国人的无责任心，真要算达于极点了。单独的行动，百人中有九十九个是卑鄙的。为什么呢?卑鄙可以满足他自身肉体的快乐——他只对这个负责任——至于卑鄙而发生的许多恶影响，反正他以为在别人身上，他是对于自己以外的不负责任的，所以不顾了。团体的行动，百人中有九十九个是过度的。斗狠起来过度，求的目的便在度之外，手段更是过度的。这可就中国历年的政治斗争证明。为什么要这样呢?</p>
<p>他以为虽过度了，于他自己无害；成功了他可抢得很多的一份，失败了人人分一份，他所分的一份也不比别人多，所以不择手段。一人得，或一团体得，而国家失的事，屡屡得见。现在“鱼行”当道固不必说了，就是前几年也有若干溢出轨道的事；若国会的解散，民国六年临时参议院的召集等等，都是以一团体的利害做前提，而把国家的根本组织打散。我很觉得中国人没有民族的责任心——这就是不怕亡国灭种。我又觉得中国人没有事业的责任心——所以成就的事业极少。没有私立的学校，公立的学校也多半等于官署；没有有力的工厂；没有不磨的言论机关。一时要做事业，不过预备他交游攘臂的媒介物：一旦求得善价，还是沽出去罢!</p>
<p>中国人所以到了这个地步，不能不说是受历史的支配。专制之下，自然无责任可负；久而久之，自然成遗传性。中国狗所以如此，也是遗传性。中国狗满街走是没有“生活”的。西洋狗是猎物种，当年的日耳曼人就极爱狗，常教狗做事，不专教它跑街，所以责任心不曾忘了。中国人在专制之下，所以才是散沙。西洋人在当年的贵族时代，中流阶级也还有组织，有组织便有生活，有生活便有责任心。中国人没有责任心，也便没有生活。不负责任地活着，自然没有活着的生趣。</p>
<p>我总觉得中国人的民族是灰色的，前途希望很难说。自五四运动以后，我才觉得改造的基本的萌芽露出了。若说这五四运动单是爱国运动，我便不赞一词了。我对这五四运动所重视的，是它的出发点是直接行动，是唤起公众责任心的运动。我是绝不主张国家主义的人，然而人类生活的发挥，全以责任心为基石。所以，五四运动自是今后偌大的一个平民运动的最先一步。</p>
<p>不过这一线光明也很容易烟消云散。若不把“社会性”用心地培植一番——就是使责任心成习惯——恐怕仍是个不熟而落的果子。</p>
<p>前清末年的改造运动，无论它革命也罢，立宪也罢，总有艰苦不拔、蓬蓬勃勃的气象，总算对于民族责任心有透彻的觉悟。民国元、二年间更是朝气曈曈。然而一经袁世凯的狂风暴雨，全国人的兽性大发。官僚武人在那里趁火打劫，青年人便预备着趁火打劫。所以我以为中国人觉悟还算容易，最难的是把这觉悟维持着，发挥去。</p>
<p>我们自己以为是有新思想的人，别人也说我们有新思想。我以为惭愧得很。我们生理上、心理上，驮着两三千年的历史——为遗传性的缘故，又在“中国化”的灰色水里，浸了二十多年，现在住着的，又是神堂，天天必得和庙祝周旋揖让。所以就境界上和习惯上讲，我们只可说是知道新思想可贵的人，并不是彻底地把新思想代替了旧思想的人。我不曾见过一个能把新思想完全代替了旧思想的人。我们应常常自省，我们若生在皇帝时代，能不能有一定不做官的决心?学生在科举时代，能不能一定不提考篮?能不能有绝俗遗世的魄力?不要和好人比，单和阮嗣宗、李卓吾、袁子才之流比，我们有没有他们那样敢于自用的魄力?我们连袁子才的不成才的魄力亦没有，那么，后人看我们，和我们看前人一样，我们现在颜自负的觉悟，不和当年提过考篮而不中秀才的人发生一种“生不逢时”的感情一样么?有什么了不起呢?这感情能造出什么生活来呢?</p>
<p>所以新思想不是即刻能贯彻了的，我们须得改造习惯。</p>
]]></content>
      <categories>
        <category>议论</category>
      </categories>
      <tags>
        <tag>讽刺</tag>
      </tags>
  </entry>
  <entry>
    <title>小杂感(鲁迅)</title>
    <url>/title/e0f1fbc4/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KLRHJO.jpg" alt="zagan"></p>
<a id="more"></a>

<p>蜜蜂的刺，一用即丧失了它自己的生命；犬儒的刺，一用则苟延了他自己的生命。他们就是如此不同。<br>约翰穆勒说：专制使人们变成冷嘲，而他竟不知道共和使人们变成沉默。<br>要上战场，莫如做军医；要革命，莫如走后方；要杀人，莫如做刽子手。既英雄，又稳当。<br>与名流学者谈，对于他之所讲，当装作偶有不懂之处。太不懂被看轻，太懂了被厌恶。偶有不懂之处，彼此最为合宜。<br>世间大抵只知道指挥刀所以指挥武士，而不想到也可以指挥文人。<br>又是演讲录，又是演讲录，但可惜都没有讲明他何以和先前大两样了；也没有讲明他演讲时，自己是否真相信自己的话。<br>阔的聪明人种种譬如昨日死，不阔的傻子种种实在昨日死，曾经阔气的要复古，正在阔气的要保持现状，未曾阔气的要革新。大抵如是，大抵! 他们之所谓复古，是回到他们所记得的若干年前，并非虞夏商周。<br>女人的天性中有母性，有女儿性；无妻性。妻性是逼成的，只是母性和女儿性的混合。<br>防被欺，自称盗贼的无须防，得其反倒是好人；自称正人君子的必须防，得其反则是盗贼。<br>楼下一个男人病得要死，那间壁的一家唱着留声机；对面是弄孩子。楼上有两人狂笑；还有打牌声，河中的船上有女人哭着她死去的母亲。人类的悲欢并不相通，我只觉得他们吵闹。<br>每一个破衣服人走过，叭儿狗就叫起来，其实并非都是狗主人的意旨或使嗾。叭儿狗往往比它的主人更严厉。恐怕有一天总要不准穿破布衫，否则便是共产党，革命，反革命，不革命。<br>革命的被杀于反革命的。反革命的被杀于革命的。不革命的或当作革命的而被杀于反革命的，或当作反革命的而被杀于革命的，或并不当作什么而被杀于革命的或反革命的，革命，革革命，革革革命，革革……。<br>人感到寂寞时，会创作；一感到干净时，即无创作，他已经一无所爱。创作总根于爱。杨朱无书，创作虽说抒写自己的心，但总愿意有人看。创作是有社会性的，但有时只要有一个人看便满足：好友，爱人。<br>人往往憎和尚，憎尼姑，憎回教徒，憎耶教徒，而不憎道士。懂得此理者，懂得中国大半。<br>要自杀的人，也会怕大海的汪洋，怕夏天死尸的易烂。但遇到澄静的清池，凉爽的秋夜，他往往也自杀了。<br>凡为当局所“诛”者皆有“罪”。刘邦除秦苛暴，“与父老约，法三章耳。”而后来仍有族诛，仍禁挟书，还是秦法。法三章者，话一句耳。<br>一见短袖子，立刻想到白臂膊，立刻想到全裸体，立刻想到生殖器，立刻想到性交，立刻想到杂交，立刻想到私生子。中国人的想像惟在这一层能够如此跃进。<br>九月二十四日。  </p>
]]></content>
      <categories>
        <category>议论</category>
      </categories>
      <tags>
        <tag>讽刺</tag>
      </tags>
  </entry>
  <entry>
    <title>变色龙(契诃夫)</title>
    <url>/title/64a8f1c3/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KL2G34.md.jpg" alt="chameleon"></p>
<a id="more"></a>

<p>　　警官奥楚蔑洛夫穿着新的军大衣，手里拿着个小包，穿过市集的广场。他身后跟着个巡警，生着棕红色头发，端着一个罗筛，上面盛着没收来的醋栗，装得满满的。四下里一片寂静……广场上连人影也没有。小铺和酒店敞开大门，无精打采地面对着上帝创造的这个世界，像是一张张饥饿的嘴巴。店门附近连一个乞丐都没有。</p>
<p>　　“你竟敢咬人，该死的东西！”奥楚蔑洛夫忽然听见说话声。“伙计们，别放走它！如今咬人可不行！抓住它！哎哟，……哎哟！”狗的尖叫声响起来。奥楚蔑洛夫往那边一看，瞧见商人彼楚京的木柴场里窜出来一条狗，用三条腿跑路，不住地回头看。在它身后，有一个人追出来，穿着浆硬的花布衬衫和敞开怀的坎肩。他紧追那条狗，身子往前一探，扑倒在地，抓住那条狗的后腿。紧跟着又传来狗叫声和人喊声：“别放走它！”带着睡意的脸纷纷从小铺里探出来，不久木柴场门口就聚上一群人，象是从地底下钻出来的一样。</p>
<p>　　“仿佛出乱子了，长官！”巡警说。</p>
<p>　　奥楚蔑洛夫把身子微微往左边一转，迈步往人群那边走过去。在木柴场门口，他看见上述那个敞开坎肩的人站在那儿，举起右手，伸出一根血淋淋的手指头给那群人看。他那张半醉的脸上露出这样的神情：“我要揭你的皮，坏蛋！”而且那根手指头本身就象是一面胜利的旗帜。奥楚蔑洛夫认出这个人就是首饰匠赫留金。闹出这场乱子的祸首是一条白毛小猎狗，尖尖的脸，背上有一块黄斑，这时候坐在人群中央的地上，前腿劈开，浑身发抖。它那含泪的眼睛里流露出苦恼和恐惧。</p>
<p>　　“这儿出了什么事？”奥楚蔑洛夫挤到人群中去，问道。“你在这儿干什么？你干吗竖起手指头？……是谁在嚷？”</p>
<p>　　“我本来走我的路，长官，没招谁没惹谁”赫留金凑着空拳头咳嗽，开口说。“我正跟密特里•密特里奇谈木柴的事，忽然间，这个坏东西无缘无故把我的手指头咬一口。请您原谅我，我是个干活的人。我的活儿是细致的。这得赔我一笔钱才成，因为我也许一个星期都不能动这根手指头了。法律上，长官，也没有这么一条，说是人受了畜生的害就该忍着。要是人人都遭狗咬，那还不如别在这个世界上活着的好……”</p>
<p>　　“嗯！不错”，奥楚蔑洛夫严厉地说，咳嗽着，动了动眉毛。“不错，这是谁家的狗？这种事我不能放过不管。我要拿点颜色出来叫那些放出狗来闯祸的人看看！现在也该管管不愿意遵守法令的老爷们了！等到罚了款，他，这个混蛋，才会明白把狗和别的畜生放出来有什么下场！我要给他点厉害瞧瞧。“叶尔德林”，警官对巡警说，“你去调查清楚这是谁家的狗，打个报告上来！这条狗得打死才成。不许拖延！这多半是条疯狗。我问你们：这是谁家的狗？”</p>
<p>　　“这条狗象是日加洛夫将军家的！”人群里有个人说。</p>
<p>　　“日加洛夫将军家的？嗯！……你，叶尔德林，把我身上的大衣脱下来。天好热！大概快要下雨了。只是有一件事我不懂：它怎么会咬你的？”奥楚蔑洛夫对赫留金说。“难道它够得到你的手指头？它身子矮小，可是你，要知道，长得这么高大！你这个手指头多半是让小钉子扎破了，后来却异想天开，要人家赔你钱了。你这种人啊……，谁都知道是个什么路数！我可知道你们这些魔鬼！”</p>
<p>　　“他，长官，把他的雪茄烟戳到它脸上去，拿它开心。它呢，不肯做傻瓜，就咬了他一口。他是个无聊的人，长官！”</p>
<p>　　“你胡说，独眼龙！你眼睛看不见，为什么胡说？长官是明白人，看得出来谁胡说，谁像当着上帝的面一样凭良心说话。我要胡说，就让调解法官审判我好了。他的法律上写得明白。如今大家都平等了。不瞒您说，我弟弟就在当宪兵。”</p>
<p>　　“少说废话！”</p>
<p>　　“不，这条狗不是将军家的，”巡警深思地说。“将军家里没有这样的狗，他家里的狗大半是大猎狗。”</p>
<p>　　“你拿得准吗？”</p>
<p>　　“拿得准，长官！”</p>
<p>　　“我自己也知道，将军家里的狗都名贵，都是良种。这条狗呢，鬼才知道是什么东西！毛色不好，模样也不中看，完全是下贱呸子。他老人家会养这样的狗？！你的脑筋上哪儿去了？要是这样的狗在彼得堡或者莫斯科让人碰上，你们知道会怎样？那儿才不管什么法律不法律，一转眼的工夫就叫它断了气！你，赫留金，受了苦，这件事不能放过不管。得教训他们一下！是时候了……”</p>
<p>　　“不过也可能是将军家的狗，”巡警把他的想法说出来。“它脸上又没写着。”“前几天我在他家院子里就见到过这样一条狗。”</p>
<p>　　“没错儿，是将军家的！”人群里有人说。</p>
<p>　　“嗯！叶尔德林，给我穿上大衣吧。好像起风了，怪冷的，你带着这条狗到将军家里去一趟，在那儿问一下。你就说这条狗是我找着，派你送去的。你说以后不要把它放到街上来。也许是名贵的狗，要是每个猪猡都拿雪茄烟戳到它脸上去，要不了多久就能把它作践死。狗是娇嫩的动物嘛。你，蠢货，把手放下来！用不着把你那根蠢手指头摆出来！这都怪你自己不好！”</p>
<p>　　“将军家的厨师来了，我们来问问他吧。喂，普洛诃尔！你过来，亲爱的！你看看这条狗。是你们家的吗？”</p>
<p>　　“瞎猜！我们那儿从来也没有过这样的狗！”</p>
<p>　　“那就用不着费很多工夫去问了，”奥楚蔑洛夫说。“这是条野狗！用不着多说了。既然他说是野狗，那就是野狗，弄死它算了。”</p>
<p>　　“这条狗不是我们家的，”普洛诃尔继续说。“可这是将军哥哥的狗，他前几天到我们这儿来了。我们的将军不喜欢这种狗。他老人家的哥哥喜欢。”</p>
<p>　　“莫非他老人家的哥哥来了？乌拉吉米尔•伊凡尼奇来了？”奥楚蔑洛夫问，他整个脸上洋溢着动情的笑容。“可了不得，主啊！我还不知道呢！他要来住一阵吧？”</p>
<p>　　“住一阵……”</p>
<p>　　“可了不得，主啊！他是惦记弟弟了。可我还不知道呢！那么这是他老人家的狗？很高兴，你把它带去吧。这条小狗怪不错的，挺伶俐，它把这家伙的手指头咬一口！哈哈哈哈！咦，你干吗发抖？呜呜，呜呜。它生气了，小坏包，好一条小狗崽子……”</p>
<p>　　普洛诃尔把狗叫过来，带着它离开了木柴场。那群人就对着赫留金哈哈大笑。</p>
<p>　　“我早晚要收拾你！”奥楚蔑洛夫对他威胁说，然后把身上的大衣裹一裹紧，继续在市集的广场上巡视。</p>
]]></content>
      <categories>
        <category>议论</category>
      </categories>
      <tags>
        <tag>讽刺</tag>
      </tags>
  </entry>
  <entry>
    <title>理解矩阵</title>
    <url>/title/ee25c1c5/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/03/KXkZ5R.md.jpg" alt="matrix"></p>
<a id="more"></a>

<p><a href="https://blog.csdn.net/myan/article/details/647511," target="_blank" rel="noopener" title="myan">原作者</a> </p>
<p>前不久chensh出于不可告人的目的，要充当老师，教别人线性代数。于是我被揪住就线性代数中一些务虚性的问题与他讨论了几次。很明显，chensh觉得，要让自己在讲线性代数的时候不被那位强势的学生认为是神经病，还是比较难的事情。</p>
<p>可怜的chensh，谁让你趟这个地雷阵？！色令智昏啊！</p>
<p>线性代数课程，无论你从行列式入手还是直接从矩阵入手，从一开始就充斥着莫名其妙。比如说，在全国一般工科院系教学中应用最广泛的同济线性代数教材（现在到了第四版），一上来就介绍逆序数这个“前无古人，后无来者”的古怪概念，然后用逆序数给出行列式的一个极不直观的定义，接着是一些简直犯傻的行列式性质和习题——把这行乘一个系数加到另一行上，再把那一列减过来，折腾得那叫一个热闹，可就是压根看不出这个东西有嘛用。大多数像我一样资质平庸的学生到这里就有点犯晕：连这是个什么东西都模模糊糊的，就开始钻火圈表演了，这未免太“无厘头”了吧！于是开始有人逃课，更多的人开始抄作业。这下就中招了，因为其后的发展可以用一句峰回路转来形容，紧跟着这个无厘头的行列式的，是一个同样无厘头但是伟大的无以复加的家伙的出场——矩阵来了！多年之后，我才明白，当老师犯傻似地用中括号把一堆傻了吧叽的数括起来，并且不紧不慢地说：“这个东西叫做矩阵”的时候，我的数学生涯掀开了何等悲壮辛酸、惨绝人寰的一幕！自那以后，在几乎所有跟“学问”二字稍微沾点边的东西里，矩阵这个家伙从不缺席。对于我这个没能一次搞定线性代数的笨蛋来说，矩阵老大的不请自来每每搞得我灰头土脸，头破血流。长期以来，我在阅读中一见矩阵，就如同阿Q见到了假洋鬼子，揉揉额角就绕道走。</p>
<p>事实上，我并不是特例。一般工科学生初学线性代数，通常都会感到困难。这种情形在国内外皆然。瑞典数学家Lars Garding在其名著Encounter with Mathematics中说：“如果不熟悉线性代数的概念，要去学习自然科学，现在看来就和文盲差不多。”然而“按照现行的国际标准，线性代数是通过公理化来表述的，它是第二代数学模型，…，这就带来了教学上的困难。”事实上，当我们开始学习线性代数的时候，不知不觉就进入了“第二代数学模型”的范畴当中，这意味着数学的表述方式和抽象性有了一次全面的进化，对于从小一直在“第一代数学模型”，即以实用为导向的、具体的数学模型中学习的我们来说，在没有并明确告知的情况下进行如此剧烈的paradigm shift，不感到困难才是奇怪的。</p>
<p>大部分工科学生，往往是在学习了一些后继课程，如数值分析、数学规划、矩阵论之后，才逐渐能够理解和熟练运用线性代数。即便如此，不少人即使能够很熟练地以线性代数为工具进行科研和应用工作，但对于很多这门课程的初学者提出的、看上去是很基础的问题却并不清楚。比如说：</p>
<ul>
<li><p>矩阵究竟是什么东西？向量可以被认为是具有n个相互独立的性质（维度）的对象的表示，矩阵又是什么呢？我们如果认为矩阵是一组列（行）向量组成的新的复合向量的展开式，那么为什么这种展开式具有如此广泛的应用？特别是，为什么偏偏二维的展开式如此有用？如果矩阵中每一个元素又是一个向量，那么我们再展开一次，变成三维的立方阵，是不是更有用？</p>
</li>
<li><p>矩阵的乘法规则究竟为什么这样规定？为什么这样一种怪异的乘法规则却能够在实践中发挥如此巨大的功效？很多看上去似乎是完全不相关的问题，最后竟然都归结到矩阵的乘法，这难道不是很奇妙的事情？难道在矩阵乘法那看上去莫名其妙的规则下面，包含着世界的某些本质规律？如果是的话，这些本质规律是什么？</p>
</li>
<li><p>行列式究竟是一个什么东西？为什么会有如此怪异的计算规则？行列式与其对应方阵本质上是什么关系？为什么只有方阵才有对应的行列式，而一般矩阵就没有（不要觉得这个问题很蠢，如果必要，针对$m*n$矩阵定义行列式不是做不到的，之所以不做，是因为没有这个必要，但是为什么没有这个必要）？而且，行列式的计算规则，看上去跟矩阵的任何计算规则都没有直观的联系，为什么又在很多方面决定了矩阵的性质？难道这一切仅是巧合？</p>
</li>
<li><p>矩阵为什么可以分块计算？分块计算这件事情看上去是那么随意，为什么竟是可行的？</p>
</li>
<li><p>对于矩阵转置运算$A^T$，有$(AB)^T = B^TA^T$，对于矩阵求逆运算$A^{-1}$，有$(AB)^{-1} = B^{-1}A^{-1}$。两个看上去完全没有什么关系的运算，为什么有着类似的性质？这仅仅是巧合吗？</p>
</li>
<li><p>为什么说$P^{-1}AP$得到的矩阵与A矩阵“相似”？这里的“相似”是什么意思？</p>
</li>
<li><p>特征值和特征向量的本质是什么？它们定义就让人很惊讶，因为Ax =λx，一个诺大的矩阵的效应，竟然不过相当于一个小小的数λ，确实有点奇妙。但何至于用“特征”甚至“本征”来界定？它们刻划的究竟是什么？</p>
</li>
</ul>
<p>这样的一类问题，经常让使用线性代数已经很多年的人都感到为难。就好像大人面对小孩子的刨根问底，最后总会迫不得已地说“就这样吧，到此为止”一样，面对这样的问题，很多老手们最后也只能用：“就是这么规定的，你接受并且记住就好”来搪塞。然而，这样的问题如果不能获得回答，线性代数对于我们来说就是一个粗暴的、不讲道理的、莫名其妙的规则集合，我们会感到，自己并不是在学习一门学问，而是被不由分说地“抛到”一个强制的世界中，只是在考试的皮鞭挥舞之下被迫赶路，全然无法领略其中的美妙、和谐与统一。直到多年以后，我们已经发觉这门学问如此的有用，却仍然会非常迷惑：怎么这么凑巧？</p>
<p>我认为，这是我们的线性代数教学中直觉性丧失的后果。上述这些涉及到“如何能”、“怎么会”的问题，仅仅通过纯粹的数学证明来回答，是不能令提问者满意的。比如，如果你通过一般的证明方法论证了矩阵分块运算确实可行，那么这并不能够让提问者的疑惑得到解决。他们真正的困惑是：矩阵分块运算为什么竟然是可行的？究竟只是凑巧，还是说这是由矩阵这种对象的某种本质所必然决定的？如果是后者，那么矩阵的这些本质是什么？只要对上述那些问题稍加考虑，我们就会发现，所有这些问题都不是单纯依靠数学证明所能够解决的。像我们的教科书那样，凡事用数学证明，最后培养出来的学生，只能熟练地使用工具，却欠缺真正意义上的理解。</p>
<p>自从1930年代法国布尔巴基学派兴起以来，数学的公理化、系统性描述已经获得巨大的成功，这使得我们接受的数学教育在严谨性上大大提高。然而数学公理化的一个备受争议的副作用，就是一般数学教育中直觉性的丧失。数学家们似乎认为直觉性与抽象性是矛盾的，因此毫不犹豫地牺牲掉前者。然而包括我本人在内的很多人都对此表示怀疑，我们不认为直觉性与抽象性一定相互矛盾，特别是在数学教育中和数学教材中，帮助学生建立直觉，有助于它们理解那些抽象的概念，进而理解数学的本质。反之，如果一味注重形式上的严格性，学生就好像被迫进行钻火圈表演的小白鼠一样，变成枯燥的规则的奴隶。</p>
<p>对于线性代数的类似上述所提到的一些直觉性的问题，两年多来我断断续续地反复思考了四、五次，为此阅读了好几本国内外线性代数、数值分析、代数和数学通论性书籍，其中像前苏联的名著《数学：它的内容、方法和意义》、龚昇教授的《线性代数五讲》、前面提到的Encounter with Mathematics（《数学概观》）以及Thomas A. Garrity的《数学拾遗》都给我很大的启发。不过即使如此，我对这个主题的认识也经历了好几次自我否定。比如以前思考的一些结论曾经写在自己的blog里，但是现在看来，这些结论基本上都是错误的。因此打算把自己现在的有关理解比较完整地记录下来，一方面是因为我觉得现在的理解比较成熟了，可以拿出来与别人探讨，向别人请教。另一方面，如果以后再有进一步的认识，把现在的理解给推翻了，那现在写的这个snapshot也是很有意义的。</p>
<p>因为打算写得比较多，所以会分几次慢慢写。也不知道是不是有时间慢慢写完整，会不会中断，写着看吧。</p>
<hr>
<p>今天先谈谈对线形空间和矩阵的几个核心概念的理解。这些东西大部分是凭着自己的理解写出来的，基本上不抄书，可能有错误的地方，希望能够被指出。但我希望做到直觉，也就是说能把数学背后说的实质问题说出来。</p>
<p>首先说说空间(space)，这个概念是现代数学的命根子之一，从拓扑空间开始，一步步往上加定义，可以形成很多空间。线形空间其实还是比较初级的，如果在里面定义了范数，就成了赋范线性空间。赋范线性空间满足完备性，就成了巴那赫空间；赋范线性空间中定义角度，就有了内积空间，内积空间再满足完备性，就得到希尔伯特空间。</p>
<p>总之，空间有很多种。你要是去看某种空间的数学定义，大致都是“存在一个集合，在这个集合上定义某某概念，然后满足某些性质”，就可以被称为空间。这未免有点奇怪，为什么要用“空间”来称呼一些这样的集合呢？大家将会看到，其实这是很有道理的。</p>
<p>我们一般人最熟悉的空间，毫无疑问就是我们生活在其中的（按照牛顿的绝对时空观）的三维空间，从数学上说，这是一个三维的欧几里德空间，我们先不管那么多，先看看我们熟悉的这样一个空间有些什么最基本的特点。仔细想想我们就会知道，这个三维的空间：</p>
<ol>
<li>由很多（实际上是无穷多个）位置点组成；  </li>
<li>这些点之间存在相对的关系；  </li>
<li>可以在空间中定义长度、角度；  </li>
<li>这个空间可以容纳运动，这里我们所说的运动是从一个点到另一个点的移动（变换），而不是微积分意义上的“连续”性的运动，</li>
</ol>
<p>上面的这些性质中，最最关键的是第4条。第1、2条只能说是空间的基础，不算是空间特有的性质，凡是讨论数学问题，都得有一个集合，大多数还得在这个集合上定义一些结构（关系），并不是说有了这些就算是空间。而第3条太特殊，其他的空间不需要具备，更不是关键的性质。只有第4条是空间的本质，也就是说，容纳运动是空间的本质特征。</p>
<p>认识到了这些，我们就可以把我们关于三维空间的认识扩展到其他的空间。事实上，不管是什么空间，都必须容纳和支持在其中发生的符合规则的运动（变换）。你会发现，在某种空间中往往会存在一种相对应的变换，比如拓扑空间中有拓扑变换，线性空间中有线性变换，仿射空间中有仿射变换，其实这些变换都只不过是对应空间中允许的运动形式而已。</p>
<p>因此只要知道，“空间”是容纳运动的一个对象集合，而变换则规定了对应空间的运动。</p>
<p>下面我们来看看线性空间。线性空间的定义任何一本书上都有，但是既然我们承认线性空间是个空间，那么有两个最基本的问题必须首先得到解决，那就是：</p>
<ol>
<li><p>空间是一个对象集合，线性空间也是空间，所以也是一个对象集合。那么线性空间是什么样的对象的集合？或者说，线性空间中的对象有什么共同点吗？</p>
</li>
<li><p>线性空间中的运动如何表述的？也就是，线性变换是如何表示的？</p>
</li>
</ol>
<p>我们先来回答第一个问题，回答这个问题的时候其实是不用拐弯抹角的，可以直截了当的给出答案。线性空间中的任何一个对象，通过选取基和坐标的办法，都可以表达为向量的形式。通常的向量空间我就不说了，举两个不那么平凡的例子：</p>
<p>L1. 最高次项不大于n次的多项式的全体构成一个线性空间，也就是说，这个线性空间中的每一个对象是一个多项式。如果我们以$x_0, x_1, …, x_n$为基，那么任何一个这样的多项式都可以表达为一组n+1维向量，其中的每一个分量ai其实就是多项式中x(i-1)项的系数。值得说明的是，基的选取有多种办法，只要所选取的那一组基线性无关就可以。这要用到后面提到的概念了，所以这里先不说，提一下而已。</p>
<p>L2. 闭区间[a, b]上的n阶连续可微函数的全体，构成一个线性空间。也就是说，这个线性空间的每一个对象是一个连续函数。对于其中任何一个连续函数，根据魏尔斯特拉斯定理，一定可以找到最高次项不大于n的多项式函数，使之与该连续函数的差为0，也就是说，完全相等。这样就把问题归结为L1了。后面就不用再重复了。</p>
<p>所以说，向量是很厉害的，只要你找到合适的基，用向量可以表示线性空间里任何一个对象。这里头大有文章，因为向量表面上只是一列数，但是其实由于它的有序性，所以除了这些数本身携带的信息之外，还可以在每个数的对应位置上携带信息。为什么在程序设计中数组最简单，却又威力无穷呢？根本原因就在于此。这是另一个问题了，这里就不说了。</p>
<p>下面来回答第二个问题，这个问题的回答会涉及到线性代数的一个最根本的问题。</p>
<p>线性空间中的运动，被称为线性变换。也就是说，你从线性空间中的一个点运动到任意的另外一个点，都可以通过一个线性变化来完成。那么，线性变换如何表示呢？很有意思，在线性空间中，当你选定一组基之后，不仅可以用一个向量来描述空间中的任何一个对象，而且可以用矩阵来描述该空间中的任何一个运动（变换）。而使某个对象发生对应运动的方法，就是用代表那个运动的矩阵，乘以代表那个对象的向量。</p>
<p>简而言之，在线性空间中选定基之后，向量刻画对象，矩阵刻画对象的运动，用矩阵与向量的乘法施加运动。</p>
<p>是的，矩阵的本质是运动的描述。如果以后有人问你矩阵是什么，那么你就可以响亮地告诉他，矩阵的本质是运动的描述。（chensh，说你呢！）</p>
<p>可是多么有意思啊，向量本身不是也可以看成是n x 1矩阵吗？这实在是很奇妙，一个空间中的对象和运动竟然可以用相类同的方式表示。能说这是巧合吗？如果是巧合的话，那可真是幸运的巧合！可以说，线性代数中大多数奇妙的性质，均与这个巧合有直接的关系。</p>
<p>接着理解矩阵。</p>
<hr>
<p>上一篇里说“矩阵是运动的描述”，到现在为止，好像大家都还没什么意见。但是我相信早晚会有数学系出身的网友来拍板转。因为运动这个概念，在数学和物理里是跟微积分联系在一起的。我们学习微积分的时候，总会有人照本宣科地告诉你，初等数学是研究常量的数学，是研究静态的数学，高等数学是变量的数学，是研究运动的数学。大家口口相传，差不多人人都知道这句话。但是真知道这句话说的是什么意思的人，好像也不多。简而言之，在我们人类的经验里，运动是一个连续过程，从A点到B点，就算走得最快的光，也是需要一个时间来逐点地经过AB之间的路径，这就带来了连续性的概念。而连续这个事情，如果不定义极限的概念，根本就解释不了。古希腊人的数学非常强，但就是缺乏极限观念，所以解释不了运动，被芝诺的那些著名悖论（飞箭不动、飞毛腿阿喀琉斯跑不过乌龟等四个悖论）搞得死去活来。因为这篇文章不是讲微积分的，所以我就不多说了。有兴趣的读者可以去看看齐民友教授写的《重温微积分》。我就是读了这本书开头的部分，才明白“高等数学是研究运动的数学”这句话的道理。</p>
<p>不过在我这个《理解矩阵》的文章里，“运动”的概念不是微积分中的连续性的运动，而是瞬间发生的变化。比如这个时刻在A点，经过一个“运动”，一下子就“跃迁”到了B点，其中不需要经过A点与B点之间的任何一个点。这样的“运动”，或者说“跃迁”，是违反我们日常的经验的。不过了解一点量子物理常识的人，就会立刻指出，量子（例如电子）在不同的能量级轨道上跳跃，就是瞬间发生的，具有这样一种跃迁行为。所以说，自然界中并不是没有这种运动现象，只不过宏观上我们观察不到。但是不管怎么说，“运动”这个词用在这里，还是容易产生歧义的，说得更确切些，应该是“跃迁”。因此这句话可以改成：</p>
<p>“矩阵是线性空间里跃迁的描述”。</p>
<p>可是这样说又太物理，也就是说太具体，而不够数学，也就是说不够抽象。因此我们最后换用一个正牌的数学术语——变换，来描述这个事情。这样一说，大家就应该明白了，所谓变换，其实就是空间里从一个点（元素/对象）到另一个点（元素/对象）的跃迁。比如说，拓扑变换，就是在拓扑空间里从一个点到另一个点的跃迁。再比如说，仿射变换，就是在仿射空间里从一个点到另一个点的跃迁。附带说一下，这个仿射空间跟向量空间是亲兄弟。做计算机图形学的朋友都知道，尽管描述一个三维对象只需要三维向量，但所有的计算机图形学变换矩阵都是4 x 4的。说其原因，很多书上都写着“为了使用中方便”，这在我看来简直就是企图蒙混过关。真正的原因，是因为在计算机图形学里应用的图形变换，实际上是在仿射空间而不是向量空间中进行的。想想看，在向量空间里相一个向量平行移动以后仍是相同的那个向量，而现实世界等长的两个平行线段当然不能被认为同一个东西，所以计算机图形学的生存空间实际上是仿射空间。而仿射变换的矩阵表示根本就是4 x 4的。又扯远了，有兴趣的读者可以去看《计算机图形学——几何工具算法详解》。</p>
<p>一旦我们理解了“变换”这个概念，矩阵的定义就变成：</p>
<p>“矩阵是线性空间里的变换的描述。”</p>
<p>到这里为止，我们终于得到了一个看上去比较数学的定义。不过还要多说几句。教材上一般是这么说的，在一个线性空间V里的一个线性变换T，当选定一组基之后，就可以表示为矩阵。因此我们还要说清楚到底什么是线性变换，什么是基，什么叫选定一组基。线性变换的定义是很简单的，设有一种变换T，使得对于线性空间V中间任何两个不相同的对象x和y，以及任意实数a和b，有：T(ax + by) = aT(x) + bT(y)，那么就称T为线性变换。</p>
<p>定义都是这么写的，但是光看定义还得不到直觉的理解。线性变换究竟是一种什么样的变换？我们刚才说了，变换是从空间的一个点跃迁到另一个点，而线性变换，就是从一个线性空间V的某一个点跃迁到另一个线性空间W的另一个点的运动。这句话里蕴含着一层意思，就是说一个点不仅可以变换到同一个线性空间中的另一个点，而且可以变换到另一个线性空间中的另一个点去。不管你怎么变，只要变换前后都是线性空间中的对象，这个变换就一定是线性变换，也就一定可以用一个非奇异矩阵来描述。而你用一个非奇异矩阵去描述的一个变换，一定是一个线性变换。有的人可能要问，这里为什么要强调非奇异矩阵？所谓非奇异，只对方阵有意义，那么非方阵的情况怎么样？这个说起来就会比较冗长了，最后要把线性变换作为一种映射，并且讨论其映射性质，以及线性变换的核与像等概念才能彻底讲清楚。我觉得这个不算是重点，如果确实有时间的话，以后写一点。以下我们只探讨最常用、最有用的一种变换，就是在同一个线性空间之内的线性变换。也就是说，下面所说的矩阵，不作说明的话，就是方阵，而且是非奇异方阵。学习一门学问，最重要的是把握主干内容，迅速建立对于这门学问的整体概念，不必一开始就考虑所有的细枝末节和特殊情况，自乱阵脚。</p>
<p>接着往下说，什么是基呢？这个问题在后面还要大讲一番，这里只要把基看成是线性空间里的坐标系就可以了。注意是坐标系，不是坐标值，这两者可是一个“对立矛盾统一体”。这样一来，“选定一组基”就是说在线性空间里选定一个坐标系。就这意思。</p>
<p>好，最后我们把矩阵的定义完善如下：</p>
<p>“矩阵是线性空间中的线性变换的一个描述。在一个线性空间中，只要我们选定一组基，那么对于任何一个线性变换，都能够用一个确定的矩阵来加以描述。”</p>
<p>理解这句话的关键，在于把“线性变换”与“线性变换的一个描述”区别开。一个是那个对象，一个是对那个对象的表述。就好像我们熟悉的面向对象编程中，一个对象可以有多个引用，每个引用可以叫不同的名字，但都是指的同一个对象。如果还不形象，那就干脆来个很俗的类比。</p>
<p>比如有一头猪，你打算给它拍照片，只要你给照相机选定了一个镜头位置，那么就可以给这头猪拍一张照片。这个照片可以看成是这头猪的一个描述，但只是一个片面的的描述，因为换一个镜头位置给这头猪拍照，能得到一张不同的照片，也是这头猪的另一个片面的描述。所有这样照出来的照片都是这同一头猪的描述，但是又都不是这头猪本身。</p>
<p>同样的，对于一个线性变换，只要你选定一组基，那么就可以找到一个矩阵来描述这个线性变换。换一组基，就得到一个不同的矩阵。所有这些矩阵都是这同一个线性变换的描述，但又都不是线性变换本身。</p>
<p>但是这样的话，问题就来了如果你给我两张猪的照片，我怎么知道这两张照片上的是同一头猪呢？同样的，你给我两个矩阵，我怎么知道这两个矩阵是描述的同一个线性变换呢？如果是同一个线性变换的不同的矩阵描述，那就是本家兄弟了，见面不认识，岂不成了笑话。</p>
<p>好在，我们可以找到同一个线性变换的矩阵兄弟们的一个性质，那就是：</p>
<p>若矩阵A与B是同一个线性变换的两个不同的描述（之所以会不同，是因为选定了不同的基，也就是选定了不同的坐标系），则一定能找到一个非奇异矩阵P，使得A、B之间满足这样的关系：</p>
<p>$$A = P^{-1}BP$$</p>
<p>线性代数稍微熟一点的读者一下就看出来，这就是相似矩阵的定义。没错，所谓相似矩阵，就是同一个线性变换的不同的描述矩阵。按照这个定义，同一头猪的不同角度的照片也可以成为相似照片。俗了一点，不过能让人明白。</p>
<p>而在上面式子里那个矩阵P，其实就是A矩阵所基于的基与B矩阵所基于的基这两组基之间的一个变换关系。关于这个结论，可以用一种非常直觉的方法来证明（而不是一般教科书上那种形式上的证明），如果有时间的话，我以后在blog里补充这个证明。</p>
<p>这个发现太重要了。原来一族相似矩阵都是同一个线性变换的描述啊！难怪这么重要！工科研究生课程中有矩阵论、矩阵分析等课程，其中讲了各种各样的相似变换，比如什么相似标准型，对角化之类的内容，都要求变换以后得到的那个矩阵与先前的那个矩阵式相似的，为什么这么要求？因为只有这样要求，才能保证变换前后的两个矩阵是描述同一个线性变换的。当然，同一个线性变换的不同矩阵描述，从实际运算性质来看并不是不分好环的。有些描述矩阵就比其他的矩阵性质好得多。这很容易理解，同一头猪的照片也有美丑之分嘛。所以矩阵的相似变换可以把一个比较丑的矩阵变成一个比较美的矩阵，而保证这两个矩阵都是描述了同一个线性变换。</p>
<p>这样一来，矩阵作为线性变换描述的一面，基本上说清楚了。但是，事情没有那么简单，或者说，线性代数还有比这更奇妙的性质，那就是，矩阵不仅可以作为线性变换的描述，而且可以作为一组基的描述。而作为变换的矩阵，不但可以把线性空间中的一个点给变换到另一个点去，而且也能够把线性空间中的一个坐标系（基）表换到另一个坐标系（基）去。而且，变换点与变换坐标系，具有异曲同工的效果。线性代数里最有趣的奥妙，就蕴含在其中。理解了这些内容，线性代数里很多定理和规则会变得更加清晰、直觉。</p>
<p>这个留在下一篇再写吧。</p>
<p>因为有别的事情要做，下一篇可能要过几天再写了。</p>
<p>这两篇文章发表于去年的4月。在第二部分结束的时候，我说： “矩阵不仅可以作为线性变换的描述，而且可以作为一组基的描述。而 作为变换的矩阵，不但可以把线性空间中的一个点给变换到另一个点去，而且也能够把线性空间中的一个坐标系（基）表换到另一个坐标系（基）去。而且，变换点 与变换坐标系，具有异曲同工的效果。线性代数里最有趣的奥妙，就蕴含在其中。理解了这些内容，线性代数里很多定理和规则会变得更加清晰、直觉。</p>
<p>这个留在下一篇再写吧。</p>
<p>因为有别的事情要做，下一篇可能要过几天再写了。 ”</p>
<hr>
<p>然而这一拖就是一年半。一年半以来，这两篇粗糙放肆的文章被到处转载，以至于在Google的搜索提示中，我的名字跟“矩阵”是一对关联词汇。这对于学生时代数学一直很差的我来说，实在是令人惶恐的事情。数学是何等辉煌精致的学问！代表着人类智慧的最高成就，是人与上帝对话的语言。而我实在连数学的门都还没进去，不要说谈什么理解，就是稍微难一些的题目我也很少能解开。我有什么资格去谈矩阵这样重要的一个数学概念呢？更何况，我的想法直观是直观，未见的是正确的啊，会不会误人子弟呢？因此，算了吧，到此为止吧！我这么想，是时不时收到的来信逐渐改变了我的想法。</p>
<p>一年半以来，我收到过不下一百封直接的来信，要求我把后面的部分写出来。这些来信大部分是国内的网友和学生，也有少数来自正在国外深造的朋友，大部分是鼓励，有的是诚挚的请求，也有少数严厉斥责我不守承诺。不管是何种态度，这都表明他们对我这一点点小小的思考成果的鼓励，特别是对于我这种思维的视角和尝试的鼓励。他们在信中让我知道，尽管我的数学水平不高，但是我这种从普通人（而不是数学家）视角出发，强调对数学概念和规则的直觉理解的思路，对于很多人是有益的。也许这条路子在数学中绝非正道，也不会走得很远，但是无论如何，在一定的阶段，对一部分人来说，较之目前数学教材普遍采用的思路，这种方式可能更容易理解一些。既然是可能对一部分人有帮助的事情，那么我就不应该心存太多杂念，应该不断思考和总结下去。</p>
<p>所以，下面就是你们来信要求我写出来的东西。</p>
<p>首先来总结一下前面两部分的一些主要结论：</p>
<ol>
<li>首先有空间，空间可以容纳对象运动的。一种空间对应一类对象。</li>
<li>有一种空间叫线性空间，线性空间是容纳向量对象运动的。</li>
<li>运动是瞬时的，因此也被称为变换。</li>
<li>矩阵是线性空间中运动（变换）的描述。</li>
<li>矩阵与向量相乘，就是实施运动（变换）的过程。</li>
<li>同一个变换，在不同的坐标系下表现为不同的矩阵，但是它们的本质是一样的，所以本征值相同。</li>
</ol>
<p>下面让我们把视力集中到一点以改变我们以往看待矩阵的方式。我们知道，线性空间里的基本对象是向量，而向量是这么表示的：</p>
<p>[a1, a2, a3, …, an]</p>
<p>矩阵呢？矩阵是这么表示的：</p>
<p>a11, a12, a13, …, a1n<br>a21, a22, a23, …, a2n<br>              …<br>an1, an2, an3, …, ann  </p>
<p>不用太聪明，我们就能看出来，矩阵是一组向量组成的。特别的，n维线性空间里的方阵是由n个n维向量组成的。我们在这里只讨论这个n阶的、非奇异的方阵，因为理解它就是理解矩阵的关键，它才是一般情况，而其他矩阵都是意外，都是不得不对付的讨厌状况，大可以放在一边。这里多一句嘴，学习东西要抓住主流，不要纠缠于旁支末节。很可惜我们的教材课本大多数都是把主线埋没在细节中的，搞得大家还没明白怎么回事就先被灌晕了。比如数学分析，明明最要紧的观念是说，一个对象可以表达为无穷多个合理选择的对象的线性和，这个概念是贯穿始终的，也是数学分析的精华。但是课本里自始至终不讲这句话，反正就是让你做吉米多维奇，掌握一大堆解偏题的技巧，记住各种特殊情况，两类间断点，怪异的可微和可积条件（谁还记得柯西条件、迪里赫莱条件…？），最后考试一过，一切忘光光。要我说，还不如反复强调这一个事情，把它深深刻在脑子里，别的东西忘了就忘了，真碰到问题了，再查数学手册嘛，何必因小失大呢？</p>
<p>言归正传。如果一组向量是彼此线性无关的话，那么它们就可以成为度量这个线性空间的一组基，从而事实上成为一个坐标系体系，其中每一个向量都躺在一根坐标轴上，并且成为那根坐标轴上的基本度量单位（长度1）。</p>
<p>现在到了关键的一步。看上去矩阵就是由一组向量组成的，而且如果矩阵非奇异的话（我说了，只考虑这种情况），那么组成这个矩阵的那一组向量也就是线性无关的了，也就可以成为度量线性空间的一个坐标系。结论：矩阵描述了一个坐标系。</p>
<p>“慢着！”，你嚷嚷起来了，“你这个骗子！你不是说过，矩阵就是运动吗？怎么这会矩阵又是坐标系了？”</p>
<p>嗯，所以我说到了关键的一步。我并没有骗人，之所以矩阵又是运动，又是坐标系，那是因为——</p>
<p>“运动等价于坐标系变换”。</p>
<p>对不起，这话其实不准确，我只是想让你印象深刻。准确的说法是：</p>
<p>“对象的变换等价于坐标系的变换”。</p>
<p>或者：</p>
<p>“固定坐标系下一个对象的变换等价于固定对象所处的坐标系变换。”</p>
<p>说白了就是：</p>
<p><strong>运动是相对的。</strong></p>
<p>让我们想想，达成同一个变换的结果，比如把点(1, 1)变到点(2, 3)去，你可以有两种做法。第一，坐标系不动，点动，把(1, 1)点挪到(2, 3)去。第二，点不动，变坐标系，让x轴的度量（单位向量）变成原来的1/2，让y轴的度量（单位向量）变成原先的1/3，这样点还是那个点，可是点的坐标就变成(2, 3)了。方式不同，结果一样。</p>
<p>从第一个方式来看，那就是我在《理解矩阵》1/2中说的，把矩阵看成是运动描述，矩阵与向量相乘就是使向量（点）运动的过程。在这个方式下，</p>
<p>Ma = b</p>
<p>的意思是：</p>
<p>“向量a经过矩阵M所描述的变换，变成了向量b。”</p>
<p>而从第二个方式来看，矩阵M描述了一个坐标系，姑且也称之为M。那么：</p>
<p>Ma = b</p>
<p>的意思是：</p>
<p>“有一个向量，它在坐标系M的度量下得到的度量结果向量为a，那么它在坐标系I的度量下，这个向量的度量结果是b。”</p>
<p>这里的I是指单位矩阵，就是主对角线是1，其他为零的矩阵。</p>
<p>而这两个方式本质上是等价的。</p>
<p>我希望你务必理解这一点，因为这是本篇的关键。</p>
<p>正因为是关键，所以我得再解释一下。</p>
<p>在M为坐标系的意义下，如果把M放在一个向量a的前面，形成Ma的样式，我们可以认为这是对向量a的一个环境声明。它相当于是说：</p>
<p>“注意了！这里有一个向量，它在坐标系M中度量，得到的度量结果可以表达为a。可是它在别的坐标系里度量的话，就会得到不同的结果。为了明确，我把M放在前面，让你明白，这是该向量在坐标系M中度量的结果。”</p>
<p>那么我们再看孤零零的向量b：</p>
<p>b</p>
<p>多看几遍，你没看出来吗？它其实不是b，它是：</p>
<p>Ib</p>
<p>也就是说：“在单位坐标系，也就是我们通常说的直角坐标系I中，有一个向量，度量的结果是b。”</p>
<p>而Ma = Ib的意思就是说：</p>
<p>“在M坐标系里量出来的向量a，跟在I坐标系里量出来的向量b，其实根本就是一个向量啊！”</p>
<p>这哪里是什么乘法计算，根本就是身份识别嘛。</p>
<p>从这个意义上我们重新理解一下向量。向量这个东西客观存在，但是要把它表示出来，就要把它放在一个坐标系中去度量它，然后把度量的结果（向量在各个坐标轴上的投影值）按一定顺序列在一起，就成了我们平时所见的向量表示形式。你选择的坐标系（基）不同，得出来的向量的表示就不同。向量还是那个向量，选择的坐标系不同，其表示方式就不同。因此，按道理来说，每写出一个向量的表示，都应该声明一下这个表示是在哪个坐标系中度量出来的。表示的方式，就是 Ma，也就是说，有一个向量，在M矩阵表示的坐标系中度量出来的结果为a。我们平时说一个向量是[2 3 5 7]T，隐含着是说，这个向量在 I 坐标系中的度量结果是[2 3 5 7]T，因此，这个形式反而是一种简化了的特殊情况。</p>
<p>注意到，M矩阵表示出来的那个坐标系，由一组基组成，而那组基也是由向量组成的，同样存在这组向量是在哪个坐标系下度量而成的问题。也就是说，表述一个矩阵的一般方法，也应该要指明其所处的基准坐标系。所谓M，其实是 IM，也就是说，M中那组基的度量是在 I 坐标系中得出的。从这个视角来看，M×N也不是什么矩阵乘法了，而是声明了一个在M坐标系中量出的另一个坐标系N，其中M本身是在I坐标系中度量出来的。</p>
<p>回过头来说变换的问题。我刚才说，“固定坐标系下一个对象的变换等价于固定对象所处的坐标系变换”，那个“固定对象”我们找到了，就是那个向量。但是坐标系的变换呢？我怎么没看见？</p>
<p>请看：</p>
<p>Ma = Ib</p>
<p>我现在要变M为I，怎么变？对了，再前面乘以个M-1，也就是M的逆矩阵。换句话说，你不是有一个坐标系M吗，现在我让它乘以个M-1，变成I，这样一来的话，原来M坐标系中的a在I中一量，就得到b了。</p>
<p>我建议你此时此刻拿起纸笔，画画图，求得对这件事情的理解。比如，你画一个坐标系，x轴上的衡量单位是2，y轴上的衡量单位是3，在这样一个坐标系里，坐标为(1，1)的那一点，实际上就是笛卡尔坐标系里的点(2, 3)。而让它原形毕露的办法，就是把原来那个坐标系:</p>
<p>2 0<br>0 3</p>
<p>的x方向度量缩小为原来的1/2，而y方向度量缩小为原来的1/3，这样一来坐标系就变成单位坐标系I了。保持点不变，那个向量现在就变成了(2, 3)了。</p>
<p>怎么能够让“x方向度量缩小为原来的1/2，而y方向度量缩小为原来的1/3”呢？就是让原坐标系：</p>
<p>2 0<br>0 3</p>
<p>被矩阵：</p>
<p>1/2   0<br>0   1/3</p>
<p>左乘。而这个矩阵就是原矩阵的逆矩阵。</p>
<p>下面我们得出一个重要的结论：</p>
<p>“对坐标系施加变换的方法，就是让表示那个坐标系的矩阵与表示那个变化的矩阵相乘。”</p>
<p>再一次的，矩阵的乘法变成了运动的施加。只不过，被施加运动的不再是向量，而是另一个坐标系。</p>
<p>如果你觉得你还搞得清楚，请再想一下刚才已经提到的结论，矩阵MxN，一方面表明坐标系N在运动M下的变换结果，另一方面，把M当成N的前缀，当成N的环境描述，那么就是说，在M坐标系度量下，有另一个坐标系N。这个坐标系N如果放在I坐标系中度量，其结果为坐标系MxN。</p>
<p>在这里，我实际上已经回答了一般人在学习线性代数是最困惑的一个问题，那就是为什么矩阵的乘法要规定成这样。简单地说，是因为：</p>
<ol>
<li><p>从变换的观点看，对坐标系N施加M变换，就是把组成坐标系N的每一个向量施加M变换。</p>
</li>
<li><p>从坐标系的观点看，在M坐标系中表现为N的另一个坐标系，这也归结为，对N坐标系基的每一个向量，把它在I坐标系中的坐标找出来，然后汇成一个新的矩阵。</p>
</li>
<li><p>至于矩阵乘以向量为什么要那样规定，那是因为一个在M中度量为a的向量，如果想要恢复在I中的真像，就必须分别与M中的每一个向量进行內积运算。我把这个结论的推导留给感兴趣的朋友吧。应该说，其实到了这一步，已经很容易了。</p>
</li>
</ol>
<p>综合以上1/2/3，矩阵的乘法就得那么规定，一切有根有据，绝不是哪个神经病胡思乱想出来的。</p>
<p>我已经无法说得更多了。矩阵又是坐标系，又是变换。到底是坐标系，还是变换，已经说不清楚了，运动与实体在这里统一了，物质与意识的界限已经消失了，一切归于无法言说，无法定义了。道可道，非常道，名可名，非常名。矩阵是在是不可道之道，不可名之名的东西。到了这个时候，我们不得不承认，我们伟大的线性代数课本上说的矩阵定义，是无比正确的：</p>
<p>“矩阵就是由m行n列数放在一起组成的数学对象。”</p>
<p>好了，这基本上就是我想说的全部了。还留下一个行列式的问题。矩阵M的行列式实际上是组成M的各个向量按照平行四边形法则搭成一个n维立方体的体积。对于这一点，我只能感叹于其精妙，却无法揭开其中奥秘了。也许我掌握的数学工具不够，我希望有人能够给我们大家讲解其中的道理了。</p>
<p>我不知道是否讲得足够清楚了，反正这一部分需要您花些功夫去推敲。</p>
<p>此外，请大家不必等待这个系列的后续部分。以我的工作情况而言，近期内很难保证继续投入脑力到这个领域中，尽管我仍然对此兴致浓厚。不过如果还有（四）的话，可能是一些站在应用层面的考虑，比如对计算机图形学相关算法的理解。但是我不承诺这些讨论近期内会出现了。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义新闻邮件</title>
    <url>/title/3af7bfc2/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/08/19/mlBDsI.png" alt="mlBDsI.png"></p>
<a id="more"></a>

<h2 id="自定义邮件服务"><a href="#自定义邮件服务" class="headerlink" title="自定义邮件服务"></a>自定义邮件服务</h2><p>平时看新闻，发现各种新闻都是别人挑选出来给自己看的，尤其是利用深度学习算法，每个人都只能看到自己的想象中的世界。我特别讨厌这种情况，但是又挡不住媒体们的套路，所以我干脆自己设计了一个新闻邮件。该邮件从各大网站提取各行各业信息，确保信息题材的广泛。</p>
<h2 id="科技文"><a href="#科技文" class="headerlink" title="科技文"></a>科技文</h2><p>封面是从科学网站<a href="https://www.sciencemag.org/" target="_blank" rel="noopener">Science</a>提取的播客信息，可以一键听播客，也可以点击图片或标题阅读内容。</p>
<h2 id="社会类"><a href="#社会类" class="headerlink" title="社会类"></a>社会类</h2><p>打算开发中文版新闻邮件，采集政治，经济，科技，教育等类目新闻并实现每日推送。</p>
]]></content>
      <categories>
        <category>邮件服务</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Mail</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言陷阱</title>
    <url>/title/c1ec2509/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5YA5d.jpg" alt="ctraps"></p>
<a id="more"></a>

<h2 id="第1个陷阱：数组下标最大为n-1"><a href="#第1个陷阱：数组下标最大为n-1" class="headerlink" title="第1个陷阱：数组下标最大为n-1"></a>第1个陷阱：数组下标最大为n-1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i, a[10];</span><br><span class="line">for (i = 0; i &lt;= 10; i++)</span><br><span class="line">	a[i] = 0;            //a[10]可能存放的是变量i，所以会导致死循环</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt;= 9; i++)</span><br><span class="line">	a[i] = 0;</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt; 10; i++)</span><br><span class="line">	a[i] = 0;           //推荐写法，i &lt; 10要比i &lt;= 9更好，10是出口,0是入口</span><br></pre></td></tr></table></figure>

<h2 id="第2个陷阱：同一符号的不同作用"><a href="#第2个陷阱：同一符号的不同作用" class="headerlink" title="第2个陷阱：同一符号的不同作用"></a>第2个陷阱：同一符号的不同作用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p-&gt;s = &quot;-&gt;&quot;	          // -&gt;是访问结构体 p-&gt;就是(*p)-&gt;的简写，&quot;-&gt;&quot;仅是一个字符串</span><br></pre></td></tr></table></figure>

<h2 id="第3个陷阱：赋值和比较运算符混用"><a href="#第3个陷阱：赋值和比较运算符混用" class="headerlink" title="第3个陷阱：赋值和比较运算符混用"></a>第3个陷阱：赋值和比较运算符混用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (x = y)            //x == y误写为 x = y，若y不等于零，则程序侥幸能运行，难发现</span><br><span class="line">	break; </span><br><span class="line"></span><br><span class="line">if ( (x = y) != 0)</span><br><span class="line">	break;</span><br><span class="line"></span><br><span class="line">while (c = &apos; &apos;||c==&apos;\t&apos;||c==&apos;\n&apos;)           //=符号运算优先级最低，&apos; &apos;为真，所以死循环</span><br><span class="line">	c = getc(f);</span><br><span class="line"></span><br><span class="line">while (c == &apos;\t&apos; || c = &apos; &apos; || c == &apos;\n&apos;)   //等价于如下的赋值语句，会报错</span><br><span class="line">while (c == &apos;\t&apos; || c) = (&apos; &apos; || c == &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">if ( (fd == open(argv[i], 0)) &lt; 0)          //比较结果为0或1，永远不小于0，所以error()永不执行</span><br><span class="line">	error();</span><br><span class="line"></span><br><span class="line">if (c == 1);</span><br><span class="line">if (1 == c);          //凡是比较常量的，常量左写，让对的对，错一定让编译器抛出错</span><br></pre></td></tr></table></figure>

<h2 id="第4个陷阱：混用逻辑与或和位与或运算符，对齐"><a href="#第4个陷阱：混用逻辑与或和位与或运算符，对齐" class="headerlink" title="第4个陷阱：混用逻辑与或和位与或运算符，对齐"></a>第4个陷阱：混用逻辑与或和位与或运算符，对齐</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &amp;&amp; b;</span><br><span class="line">a &amp; b;                // 若a &amp; b 不为0，则程序侥幸能运行</span><br><span class="line"></span><br><span class="line">parttab[] = &#123;</span><br><span class="line">	046, &quot;left  s&quot;,   //为了对齐125, 46被写成046，而046是八进制数</span><br><span class="line">	047, &quot;right r&quot;,</span><br><span class="line">	125, &quot;frammis&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第5个陷阱：单目符号和多符号的贪心分析法则"><a href="#第5个陷阱：单目符号和多符号的贪心分析法则" class="headerlink" title="第5个陷阱：单目符号和多符号的贪心分析法则"></a>第5个陷阱：单目符号和多符号的贪心分析法则</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a---b;               //编译器识别为a-- - b;</span><br><span class="line"></span><br><span class="line">n--&gt;0                //n-- &gt; 0 不同于n- -&gt;;</span><br><span class="line"></span><br><span class="line">a+++++b;             //(a++)++ +b，错误a++不做左值</span><br><span class="line"></span><br><span class="line">y = x/*p;            //到底是指针还是注释？x/(*p), x/*p?</span><br></pre></td></tr></table></figure>


<h2 id="第6个陷阱：’’和””的不同"><a href="#第6个陷阱：’’和””的不同" class="headerlink" title="第6个陷阱：’’和””的不同"></a>第6个陷阱：’’和””的不同</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char *a;</span><br><span class="line">a = &quot;xyz&quot;            //&quot;xyz&quot;提供x的地址	</span><br><span class="line">					 </span><br><span class="line">char hello[] = &#123;&apos;H&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;,&apos; &apos;,&apos;w&apos;,&apos;o&apos;,&apos;r&apos;,&apos;l&apos;,&apos;d&apos;,&apos;\n&apos;,0&#125;;</span><br><span class="line">printf(hello);       </span><br><span class="line">                     //&apos; &apos;内为char或者说int，而&quot; &quot;括号内字符串常量</span><br><span class="line"></span><br><span class="line">printf(&quot;Hello world\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&apos;\n&apos;);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">c = &apos;yes&apos;;           //c可能等于y或者s，视不同机器的实现</span><br><span class="line">c = &quot;yes&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="第7个陷阱：嵌套注释"><a href="#第7个陷阱：嵌套注释" class="headerlink" title="第7个陷阱：嵌套注释"></a>第7个陷阱：嵌套注释</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*&quot;/* &quot;*/</span><br></pre></td></tr></table></figure>

<h2 id="第8个陷阱：函数声明"><a href="#第8个陷阱：函数声明" class="headerlink" title="第8个陷阱：函数声明 "></a>第8个陷阱：函数声明 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(*(void(*)())0)();   //按照用的规则来，去掉哑变量</span><br><span class="line">					 //(void(*)())是一种强制类型转换操作，类似于unsigned a</span><br><span class="line">					 //它表示的是一个函数指针，且该指针指向的函数返回值为void型，且函数没有参数</span><br><span class="line">					 //整个表达式是把0这个数转换为0这个位置，然后读取0位置的函数并执行</span><br><span class="line">					 // (* (void (*)())0 )()</span><br><span class="line">					 // (指针 类型转换 地址)()</span><br><span class="line">(*((*)())0)();       //默认返回类型为int，一般会出错，段错误，核心已转储</span><br><span class="line"></span><br><span class="line">float *g(), (*h)();</span><br><span class="line">(float (*)())        //指向返回值为浮点类型的函数指针的类型转换符号</span><br><span class="line"></span><br><span class="line">int func()&#123;&#125;</span><br><span class="line">(int (*)()) p = func;</span><br><span class="line">(*p)()               //简写为p() 但不是*p()，因为()优先和p结合</span><br></pre></td></tr></table></figure>

<h2 id="第9个陷阱：优先级别"><a href="#第9个陷阱：优先级别" class="headerlink" title="第9个陷阱：优先级别 "></a>第9个陷阱：优先级别 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(* / + -) &gt; (&lt;&lt; &gt;&gt;) &gt; (&gt; &lt; &gt;= &lt;= ==) &gt; (&amp;&amp; || !) &gt; (=) &gt; (? :) &gt; (,)</span><br><span class="line">                     //各种运算符号的优先级别，算术大于移位大于比较大于逻辑大于赋值大于三目运算大于逗号运算符号。</span><br><span class="line"></span><br><span class="line">FLAG = 01000100000;  //假设为二进制表示</span><br><span class="line">if (flags &amp; FLAG)    //flags &amp;&amp; FLAGE</span><br><span class="line">	do sth;</span><br><span class="line"></span><br><span class="line">r = hi&lt;&lt;4 + low      //hi &lt;&lt; (4 + low)</span><br><span class="line">r = (hi&lt;&lt;4) + low;   //正确写法</span><br><span class="line">r = hi&lt;&lt;4 | low;     //这种写法也可，但hi得指高位，low指低位</span><br><span class="line"></span><br><span class="line">while (c = getc(in) != EOF) //c一直为1，直到文件末尾为0，可能导致对文件循环读取</span><br><span class="line">	putc(c, stdout);</span><br></pre></td></tr></table></figure>

<h2 id="第10个陷阱：分号"><a href="#第10个陷阱：分号" class="headerlink" title="第10个陷阱：分号 "></a>第10个陷阱：分号 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (x[i] &gt; big);     //big = x[i]一定会得到执行</span><br><span class="line">	big = x[i]; </span><br><span class="line"></span><br><span class="line">if (n &lt; 3)          </span><br><span class="line">	return           //return logre.date = x[0];</span><br><span class="line">logre.date = x[0];</span><br><span class="line">logre.time = x[1];</span><br><span class="line">logre.code = x[2];</span><br><span class="line"></span><br><span class="line">struct logrec&#123;</span><br><span class="line">	int date;</span><br><span class="line">	int time;</span><br><span class="line">	int code;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;&#125;             //main函数返回类型为struct logrec类型</span><br></pre></td></tr></table></figure>

<h2 id="第11个陷阱：switch-省略break"><a href="#第11个陷阱：switch-省略break" class="headerlink" title="第11个陷阱：switch 省略break; "></a>第11个陷阱：switch 省略break; </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case &apos;\n&apos;:</span><br><span class="line">	linecount++;     //故意省略break，可以继续执行下面的case</span><br><span class="line">case &apos;\t&apos;:</span><br><span class="line">case &apos; &apos;:</span><br></pre></td></tr></table></figure>

<h2 id="第12个陷阱：函数调用"><a href="#第12个陷阱：函数调用" class="headerlink" title="第12个陷阱：函数调用 "></a>第12个陷阱：函数调用 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f();                 //调用函数f</span><br><span class="line">f;                   //获得函数f的地址然后丢弃，什么也不做</span><br></pre></td></tr></table></figure>

<h2 id="第13个陷阱：悬挂else"><a href="#第13个陷阱：悬挂else" class="headerlink" title="第13个陷阱：悬挂else "></a>第13个陷阱：悬挂else </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (x == 0)</span><br><span class="line">	if (y == 0) error();</span><br><span class="line">else&#123;</span><br><span class="line">	z = x + y;</span><br><span class="line">	f(&amp;z);</span><br><span class="line">&#125;                    //else 按照最近匹配原则和内部if配对</span><br></pre></td></tr></table></figure>

<h2 id="第14个陷阱：数组和指针几乎等价"><a href="#第14个陷阱：数组和指针几乎等价" class="headerlink" title="第14个陷阱：数组和指针几乎等价 "></a>第14个陷阱：数组和指针几乎等价 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int *p, a[12];</span><br><span class="line">p = a;               //a既是数组名也是其首地址</span><br><span class="line">*a = 10;             //就是a[0] = 10</span><br><span class="line">*p = 10;             //也是a[0] = 10</span><br><span class="line">a[i]                 //可以写成i[a]或者a + i;</span><br><span class="line"></span><br><span class="line">char *r *malloc();                 //错误1:可能分配失败, 要检测r是否为NULL</span><br><span class="line">r = malloc(strlen(s) + strlen(t)); //错误2:缺少&apos;\0&apos;字符的存储位置</span><br><span class="line">strcpy(r,s);</span><br><span class="line">strcat(r,t);                       //错误3:未释放内存</span><br><span class="line">                     </span><br><span class="line">char r*, *malloc();  //一种可行的写法</span><br><span class="line">r = malloc(strlen(s) + strlen(t) + 1);</span><br><span class="line">if (!r)&#123;</span><br><span class="line">	complain();</span><br><span class="line">	exit(1);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">	strcpy(r,s);</span><br><span class="line">	strcat(r,t);</span><br><span class="line">&#125;</span><br><span class="line">free(r);</span><br><span class="line">p = NULL;</span><br></pre></td></tr></table></figure>

<h2 id="第15个陷阱：是数组还是指针做参数？"><a href="#第15个陷阱：是数组还是指针做参数？" class="headerlink" title="第15个陷阱：是数组还是指针做参数？ "></a>第15个陷阱：是数组还是指针做参数？ </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int strlen(char s[])&#123;&#125;</span><br><span class="line">int strlen(char *s)&#123;&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;&#125; //等价于下面写法</span><br><span class="line">int main(int argc, char *argv[])&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第16个陷阱：数组下标和指针访问"><a href="#第16个陷阱：数组下标和指针访问" class="headerlink" title="第16个陷阱：数组下标和指针访问"></a>第16个陷阱：数组下标和指针访问</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int cal[12][31];     //以下几种写法完全等价，有点儿绕</span><br><span class="line"></span><br><span class="line">cal[i][j], *(cal[i] + j), *(*(cal + i) + j)</span><br><span class="line">cal[i][j], *(i[cal] + j), j[i[cal]]</span><br></pre></td></tr></table></figure>

<h2 id="第17个陷阱：对操作优化"><a href="#第17个陷阱：对操作优化" class="headerlink" title="第17个陷阱：对操作优化 "></a>第17个陷阱：对操作优化 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define N 1024</span><br><span class="line">static char buffer[N];</span><br><span class="line">static char *bufptr;</span><br><span class="line"></span><br><span class="line">void bufwrite(char *p, int n)</span><br><span class="line">&#123;</span><br><span class="line">	while (--n &gt;= 0)&#123;</span><br><span class="line">		if (bufptr == &amp;buffer[N])</span><br><span class="line">			flushbuffer();</span><br><span class="line">		*bufptr++ = *p++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void memcpy(char *dest, const char *source, int k)</span><br><span class="line">&#123;</span><br><span class="line">	while (--k &gt;= 0)</span><br><span class="line">		*dest++ = *source++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void bufwrite(char *p, int n)</span><br><span class="line">&#123;                    //优化版，一次拷贝k个字符</span><br><span class="line">	while (n &gt; 0)&#123;</span><br><span class="line">		int k, rem;</span><br><span class="line">		if (bufptr == &amp;buffer[N])</span><br><span class="line">			flushbuffer();</span><br><span class="line"></span><br><span class="line">		rem = N - (bufptr - buffer); //buffer + N - bufptr;</span><br><span class="line">		k = n &gt; rem ? rem : n;</span><br><span class="line">		memcpy(bufptr, p, k);</span><br><span class="line">		bufptr += k;</span><br><span class="line">		p += k;</span><br><span class="line">		n -= k;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="第18个陷阱：求值顺序"><a href="#第18个陷阱：求值顺序" class="headerlink" title="第18个陷阱：求值顺序 "></a>第18个陷阱：求值顺序 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(x, y)              //函数有两个参数，求值顺序未定</span><br><span class="line">f( (x, y) )          //函数有一个参数，先求x，再求y</span><br><span class="line"></span><br><span class="line">i = 0;</span><br><span class="line">while (i &lt; n)</span><br><span class="line">	y[i] = x[i++];   //错误，i++求值顺序未定</span><br><span class="line">	y[i++] = x[i];   //错误，i++求值顺序未定</span><br><span class="line"></span><br><span class="line">i = 0;</span><br><span class="line">while (i &lt; n)</span><br><span class="line">	y[i] = x[i];     //正确</span><br><span class="line">	++i;</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">for (;i &lt; n; ++i)    //正确</span><br><span class="line">	y[i] = x[i];</span><br></pre></td></tr></table></figure>


<h2 id="第19个陷阱：-amp-amp"><a href="#第19个陷阱：-amp-amp" class="headerlink" title="第19个陷阱：&amp;&amp; || !"></a>第19个陷阱：&amp;&amp; || !</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i = 0;               //&amp;&amp;误用为&amp;，若&amp;操作结果为零才能发现此错误</span><br><span class="line">while (i &lt; tabsize &amp; tab[i] != x) </span><br><span class="line">	i++;</span><br></pre></td></tr></table></figure>

<h2 id="第20个陷阱：数溢出"><a href="#第20个陷阱：数溢出" class="headerlink" title="第20个陷阱：数溢出 "></a>第20个陷阱：数溢出 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ((unsigned)a + (unsigned)b &gt; INT_MAX)</span><br><span class="line">	complain();      //加法溢出时，若检测溢出位标志会失败</span><br><span class="line">                    </span><br><span class="line">if (a &gt;INT_MAX - b)  //最好用减法，减法防止溢出，</span><br><span class="line">	complain();</span><br></pre></td></tr></table></figure>


<h2 id="第21个陷阱：main-函数无返回值"><a href="#第21个陷阱：main-函数无返回值" class="headerlink" title="第21个陷阱：main 函数无返回值 "></a>第21个陷阱：main 函数无返回值 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;hello world!\n&quot;);</span><br><span class="line">&#125;                    //返回垃圾整数，导致操作系统误判程序执行失败，而实际又执行成功了</span><br><span class="line"></span><br><span class="line">int main(int argc, char **)</span><br><span class="line">&#123;                    </span><br><span class="line">	printf(&quot;hello world!\n&quot;);</span><br><span class="line">	return 0;        //一种可行的写法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第22个陷阱：声明和引用"><a href="#第22个陷阱：声明和引用" class="headerlink" title="第22个陷阱：声明和引用 "></a>第22个陷阱：声明和引用 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a;               //a未赋值，则默认为0</span><br><span class="line">int b = 1;</span><br><span class="line">extern int c;        //引用外部变量</span><br><span class="line">static int d;        //限制d在该文件，不可被外部引用</span><br></pre></td></tr></table></figure>

<h2 id="第23个陷阱：调用外部函数要声明参数类型"><a href="#第23个陷阱：调用外部函数要声明参数类型" class="headerlink" title="第23个陷阱：调用外部函数要声明参数类型 "></a>第23个陷阱：调用外部函数要声明参数类型 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int isvowel(char);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a;</span><br><span class="line">	char c;</span><br><span class="line"></span><br><span class="line">	c = &apos;a&apos;;</span><br><span class="line">	a = isvowel(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第24个陷阱：变量类型错误使用"><a href="#第24个陷阱：变量类型错误使用" class="headerlink" title="第24个陷阱：变量类型错误使用"></a>第24个陷阱：变量类型错误使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	char c;</span><br><span class="line">	for (i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">		scanf(&quot;%d&quot;, &amp;c);   //%c还是%d? </span><br><span class="line">		printf(&quot;%d &quot;, i);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第25个陷阱：外部变量类型引用时声明错误"><a href="#第25个陷阱：外部变量类型引用时声明错误" class="headerlink" title="第25个陷阱：外部变量类型引用时声明错误 "></a>第25个陷阱：外部变量类型引用时声明错误 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long n;</span><br><span class="line">extern int n;       //到底用long 还是int?</span><br></pre></td></tr></table></figure>

<h2 id="第26个陷阱：缓冲区释放错误"><a href="#第26个陷阱：缓冲区释放错误" class="headerlink" title="第26个陷阱：缓冲区释放错误 "></a>第26个陷阱：缓冲区释放错误 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">static char buf[BUFSIZ]; //正确位置</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int c;</span><br><span class="line">	char buf[BUFSIZ];    //错误位置，放在此处，main执行完buf就没了，释放buf时出错</span><br><span class="line">	setbuf(stdout, buf)  //最好作为main函数第一句</span><br><span class="line"></span><br><span class="line">	while ((c = getchar()) != EOF)</span><br><span class="line">		putchar(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第27个陷阱：宏定义缺少必要的括号"><a href="#第27个陷阱：宏定义缺少必要的括号" class="headerlink" title="第27个陷阱：宏定义缺少必要的括号 "></a>第27个陷阱：宏定义缺少必要的括号 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define abs(x) x &gt;= 0 ? x : -x</span><br><span class="line">abs(a-b)                 //a - b &gt;= 0 ? a - b : -a-b 此处错误，应为-(a-b)</span><br><span class="line">abs(a) + 1               //a &gt;= 0 ? a : -a + 1       又错   </span><br><span class="line">#define abs(x) ((x) &gt;= 0 ?(x):-(x)) //良定义</span><br><span class="line"></span><br><span class="line">#define max(biggest, x)  ((biggest) &gt; (x) ? (bigget) : (x))</span><br><span class="line">max(bigest, x[i++])      //宏中最好不要有带有副作用的操作存在，类似i++</span><br><span class="line">max(a,max(b,max(c,d)))   //宏定义展开过长 </span><br><span class="line">max(max(a,b),max(c,d))   //((((a)&gt;(b)?(a):(b)))&gt;(((c)&gt;(d)?(c):(d)))?(((a)&gt;(b)?(a):(b))):(((c)&gt;(d)?(c):(d))))</span><br><span class="line"></span><br><span class="line">bigest = a;              //一种比较a,b,c,d的好方法，代码清晰</span><br><span class="line">if (bigest &lt; b) bigest = b;</span><br><span class="line">if (bigest &lt; c) bigest = c;</span><br><span class="line">if (bigest &lt; d) bigest = d;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define assert(e) if (!e) assert_error(__FILE__,__LINE__)</span><br><span class="line">if (x &gt; 0 &amp;&amp; y &gt; 0)</span><br><span class="line">	assert(x &gt; y);       //展开后if和else匹配出错</span><br><span class="line">else</span><br><span class="line">	assert(x &lt; y);</span><br><span class="line">#define assert(e) &#123; if (!e) assert_error(__FILE__,__LINE__) &#125;</span><br><span class="line">if (x &gt; 0 &amp;&amp; y &gt; 0)</span><br><span class="line">	assert(x &gt; y);       //解决了if和else配对，但会在&#125;后多一个; </span><br><span class="line">else</span><br><span class="line">	assert(x &lt; y);</span><br><span class="line">						 //一种可行的写法</span><br><span class="line">#define assert(e) ((void)((e)||_assert_error(__FILE__,__LINE__)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define T1 struct foo *</span><br><span class="line">typedef struct foo *T2</span><br><span class="line">T1 a, b;                 //struct foo *a, b ，此处b的类型不对</span><br><span class="line">T2 a, b;                 //struct foo *a, *b, 正确</span><br></pre></td></tr></table></figure>

<h2 id="第28个陷阱：编译器不区分大小写"><a href="#第28个陷阱：编译器不区分大小写" class="headerlink" title="第28个陷阱：编译器不区分大小写 "></a>第28个陷阱：编译器不区分大小写 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char * Malloc(unsigned n) //Malloc等于是malloc</span><br><span class="line">&#123;</span><br><span class="line">	char *p, *malloc(unsigned); </span><br><span class="line">	p = malloc(n);        //循环调用自身，内存被耗尽，系统崩溃</span><br><span class="line">	if (p == NULL)</span><br><span class="line">		panic(&quot;out of memory&quot;);</span><br><span class="line">	return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第29个陷阱：字符有无符号"><a href="#第29个陷阱：字符有无符号" class="headerlink" title="第29个陷阱：字符有无符号 "></a>第29个陷阱：字符有无符号 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(unsigned char) c;        //强制声明无符号</span><br></pre></td></tr></table></figure>

<h2 id="第30个陷阱：乘除2的倍数用移位"><a href="#第30个陷阱：乘除2的倍数用移位" class="headerlink" title="第30个陷阱：乘除2的倍数用移位 "></a>第30个陷阱：乘除2的倍数用移位 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mid  = (low + high) &gt;&gt; 2; //除以4</span><br><span class="line">mid  = low &lt;&lt; 2;          //乘以2</span><br></pre></td></tr></table></figure>

<h2 id="第31个陷阱：空指针位置0的读写权限"><a href="#第31个陷阱：空指针位置0的读写权限" class="headerlink" title="第31个陷阱：空指针位置0的读写权限 "></a>第31个陷阱：空指针位置0的读写权限 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char *p;</span><br><span class="line">	p = NULL;             //空指针一般不可写，可读与否看系统</span><br><span class="line">	printf(&quot;Location 0 contains %d\n&quot;,*p);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第32个陷阱：负数成了被除数"><a href="#第32个陷阱：负数成了被除数" class="headerlink" title="第32个陷阱：负数成了被除数 "></a>第32个陷阱：负数成了被除数 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h = n % HASHSIZE;         // n小于0时，结果未定义</span><br><span class="line">if (h &lt; 0)</span><br><span class="line">	h += HASHSIZE;</span><br><span class="line"></span><br><span class="line">h = (unsigned n) % HASHSIZE; //强制无符号</span><br></pre></td></tr></table></figure>

<h2 id="第33个陷阱：部分宏定义无法判断字符的范围"><a href="#第33个陷阱：部分宏定义无法判断字符的范围" class="headerlink" title="第33个陷阱：部分宏定义无法判断字符的范围 "></a>第33个陷阱：部分宏定义无法判断字符的范围 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define toupper(c) ((c)+&apos;A&apos;-&apos;a&apos;)</span><br><span class="line">#define tolower(c) ((c)+&apos;a&apos;-&apos;A&apos;)</span><br><span class="line"></span><br><span class="line">int c;</span><br><span class="line">while ((c = getchar()) != EOF)</span><br><span class="line">	putchar(tolower(c));  //错误，c可能就是小写字符</span><br><span class="line">	putchar(toupper(c));  //错误，c可能就是大写字符</span><br><span class="line">						  </span><br><span class="line">int c;                    //一种可行的写法</span><br><span class="line">while ((c = getchar()) != EOF)</span><br><span class="line">	putchar(isupper(c) ? tolower(c) : c);</span><br><span class="line">	putchar(islower(c) ? toupper(c) : c);</span><br><span class="line"></span><br><span class="line">int toupper (int c)       //或者使用函数</span><br><span class="line">&#123;</span><br><span class="line">	if (c &gt;= &apos;a&apos; &amp;&amp; c &lt;= &apos;z&apos;)</span><br><span class="line">		return c + &apos;A&apos; - &apos;a&apos;;</span><br><span class="line">&#125;                         //同时也有宏，选择使用一种</span><br><span class="line">#define _toupper(c) ((c)+&apos;A&apos;-&apos;a&apos;)</span><br><span class="line">#define _tolower(c) ((c)+&apos;a&apos;-&apos;A&apos;)</span><br></pre></td></tr></table></figure>

<h2 id="第34个陷阱：释放内存"><a href="#第34个陷阱：释放内存" class="headerlink" title="第34个陷阱：释放内存"></a>第34个陷阱：释放内存</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct node *p, *head;</span><br><span class="line">for (p = head; p; p = p-&gt;next)</span><br><span class="line">	free((char *)p);      //此处释放了，p-&gt;next仍正确，但再次循环就会出错</span><br><span class="line"></span><br><span class="line">struct node *p, *head, *tmp;</span><br><span class="line">for (p = head; p; p = tmp)</span><br><span class="line">	tmp = p -&gt; next;      //使用临时指针缓存</span><br><span class="line">	free((char *)p);</span><br></pre></td></tr></table></figure>


<h2 id="第35个陷阱：默认数组递增序列"><a href="#第35个陷阱：默认数组递增序列" class="headerlink" title="第35个陷阱：默认数组递增序列"></a>第35个陷阱：默认数组递增序列</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void printnum(long n, void (*p)())</span><br><span class="line">&#123;</span><br><span class="line">	if ( n &lt; 0)&#123;</span><br><span class="line">		(*p)(&apos;-&apos;);</span><br><span class="line">		n = -n;</span><br><span class="line">	&#125;</span><br><span class="line">	if ( n &gt;= 10)</span><br><span class="line">		printnum( n / 10,p);</span><br><span class="line"></span><br><span class="line">	(*p)((int)(n%10) + &apos;0&apos;);    //+号，暗含所有数按序编排，实际可能不是这样</span><br><span class="line">&#125;</span><br><span class="line">	(*p)(&quot;0123456789&quot;[n % 10]); //此写法可行，字符串作为数组名，</span><br><span class="line">								//提供了首地址，n % 10作为下标取其中的字符</span><br></pre></td></tr></table></figure>

<h2 id="第36个陷阱：指针不可直接相加，可相减，单独加数"><a href="#第36个陷阱：指针不可直接相加，可相减，单独加数" class="headerlink" title="第36个陷阱：指针不可直接相加，可相减，单独加数"></a>第36个陷阱：指针不可直接相加，可相减，单独加数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int func()</span><br><span class="line">&#123;</span><br><span class="line">	char s[10];</span><br><span class="line">	char *p1, p2;</span><br><span class="line">	char *mid;</span><br><span class="line">	</span><br><span class="line">	p1 = s, </span><br><span class="line">	p2 = &amp;s[9];</span><br><span class="line">	mid = (p1 + p2) / 2         //错误，不可相加</span><br><span class="line">	mid = (p1 + p2) &gt;&gt;1         //错误，不可相加</span><br><span class="line"></span><br><span class="line">	mid = (p2 - p1)/2  + p1     //正确，指针p1可以加数</span><br><span class="line">	mid = (p2 - p1) &gt;&gt; 1 + p1   //错误，+ 优先级高</span><br><span class="line">	mid = ((p2-p1)&gt;&gt;1) + p1     //正确</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第37个陷阱：空指针引发段错误，核心转储"><a href="#第37个陷阱：空指针引发段错误，核心转储" class="headerlink" title="第37个陷阱：空指针引发段错误，核心转储"></a>第37个陷阱：空指针引发段错误，核心转储</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char s[100];</span><br><span class="line">p = malloc(strlen(s) + 1);      </span><br><span class="line">if (p)</span><br><span class="line">	do sth;</span><br><span class="line">else</span><br><span class="line">	exit(1);</span><br><span class="line"></span><br><span class="line">free(p);</span><br><span class="line">p = NULL;                       //把指针给管起来</span><br><span class="line">char s[100];</span><br><span class="line">p = malloc(strlen(s) + 1);      </span><br><span class="line">if (p)</span><br><span class="line">	do sth;</span><br><span class="line">else</span><br><span class="line">	exit(1);</span><br><span class="line"></span><br><span class="line">free(p);</span><br><span class="line">p = NULL;                       //把指针给管起来</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>关于glibc中strcmp函数的其他几种写法</title>
    <url>/title/6e24e863/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JvCR.jpg" alt="gnu"></p>
<a id="more"></a>

<h1 id="glibc"><a href="#glibc" class="headerlink" title=" glibc"></a> glibc</h1><p><a href="https://www.gnu.org/" target="_blank" rel="noopener">GNU</a>组织实现的C运行库，是Linux系统最底层的API。</p>
<ol>
<li>strcmp</li>
</ol>
<hr>
<p>strcmp, <strong>String Compare Function</strong>, compare S1 and S2, returning less than, equal to or greater than zero if S1 is lexicographically less than, equal to or greater than S2. 字符串S1中字符一旦大于S2中的字符就返回大于零的数(两字符差值)，小于就返回小于零的数，等于就返回零。</p>
<h2 id="2-由头"><a href="#2-由头" class="headerlink" title="2.由头"></a>2.由头</h2><p>最近看书，发现C语言指针和数组特别神奇，很多复杂的函数，只要有指针就能简化代码。刚好在glic中发现字符串比较函数strcmp的官方写法，自己又结合书籍整理了一番，提出了几个自己写的版本。</p>
<h2 id="3-自定义版"><a href="#3-自定义版" class="headerlink" title="3.自定义版"></a>3.自定义版</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int strcmp0(char *p1, char *p2)</span><br><span class="line">&#123;   //最简单的写法，指针当数组用</span><br><span class="line">	int i;</span><br><span class="line">	for (i = 0; p1[i] == p2[i]; i++)&#123;</span><br><span class="line">		if (p1[i] == &apos;\0&apos;)</span><br><span class="line">			return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	return p1[i] - p2[i];</span><br><span class="line"></span><br><span class="line">int strcmp1(char *p1, char *p2)</span><br><span class="line">&#123;	//数组下标自增</span><br><span class="line">	int i = 0;</span><br><span class="line">	for (; p1[i] == p2[i];)&#123;</span><br><span class="line">		if (p1[i++] == &apos;\0&apos;)</span><br><span class="line">			return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	return p1[i] - p2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int strcmp2(char *p1, char *p2)</span><br><span class="line">&#123;	//使用指针取值</span><br><span class="line">	for (; *p1 == *p2; p1++, p2++)&#123;</span><br><span class="line">		if (*p1 == &apos;\0&apos;)</span><br><span class="line">			return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	return *p1 - *p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int strcmp3(char *p1, char *p2)</span><br><span class="line">&#123;	//放弃判断&apos;\0&apos;，而用!取反</span><br><span class="line">	for (; *p1 == *p2; p1++, p2++)&#123;</span><br><span class="line">		if (!*p1)</span><br><span class="line">			return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	return *p1 - *p2;</span><br><span class="line"></span><br><span class="line">int strcmp4(char *p1, char *p2)</span><br><span class="line">&#123;	//指针自增，注意*--p1中*和--的优先级，此法最简，不知有错没？</span><br><span class="line">	while (*p1++ == *p2++);</span><br><span class="line">	return *--p1 - *--p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-官方版"><a href="#4-官方版" class="headerlink" title="4.官方版"></a>4.官方版</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int </span><br><span class="line">STRCMP(const char *p1, const char *p2)</span><br><span class="line">&#123;</span><br><span class="line">  const unsigned char *s1 = (const unsigned char *) p1;</span><br><span class="line">  const unsigned char *s2 = (const unsigned char *) p2;</span><br><span class="line">  unsigned char c1, c2;</span><br><span class="line"></span><br><span class="line">  do</span><br><span class="line">	&#123;</span><br><span class="line">	  c1 = (unsigned char) *s1++;</span><br><span class="line">	  c2 = (unsigned char) *s2++;</span><br><span class="line">	  if (c1 == &apos;\0&apos;)</span><br><span class="line">	return c1 - c2;</span><br><span class="line">	&#125;</span><br><span class="line">  while (c1 == c2);</span><br><span class="line"></span><br><span class="line">  return c1 - c2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-结语"><a href="#5-结语" class="headerlink" title="5.结语"></a>5.结语</h2><p>看了官方版本，感觉自己还很有差距。C语言灵活，但太容易出错，指针简直就是一把瑞士尖刀，弄不好就要戳到自己身上。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是P问题、NP问题和NPC问题？</title>
    <url>/title/a509ddba/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KqYZBn.jpg" alt="NP"></p>
<a id="more"></a>

<p>Note: 本文原地址已遗失，若作者发现可知会本人。</p>
<p>这或许是众多OIer最大的误区之一。</p>
<p>你会经常看到网上出现“这怎么做，这不是NP问题吗”、“这个只有搜了，这已经被证明是NP问题了”之类的话。你要知道，大多数人此时所说的NP问题其实都是指的NPC问题，他们没有搞清楚NP问题和NPC问题的概念。NP问题并不是那种“只有搜才行”的问题，NPC问题才是。好，行了，基本上这个误解已经被澄清了。下面的内容都是在讲什么是P问题，什么是NP问题，什么是NPC问题，你如果不是很感兴趣就可以不看了。接下来你可以看到，把NP问题当成是NPC问题是一个多大的错误。</p>
<p>还是先用几句话简单说明一下时间复杂度。时间复杂度并不是表示一个程序解决问题需要花多少时间，而是当问题规模扩大后，程序需要的时间长度增长得有多快。也就是说，对于高速处理数据的计算机来说，处理某一个特定数据的效率不能衡量一个程序的好坏，而应该看当这个数据的规模变大到数百倍后，程序运行时间是否还是一样，或者也跟着慢了数百倍，或者变慢了数万倍。不管数据有多大，程序处理花的时间始终是那么多的，我们就说这个程序很好，具有O(1)的时间复杂度，也称常数级复杂度;数据规模变得有多大，花的时间也跟着变得有多长，这个程序的时间复杂度就是O(n)，比如找n个数中的最大值;而像冒泡排序、插入排序等，数据扩大2倍，时间变慢4倍的，属于$O(n^2)$的复杂度。还有一些穷举类的算法，所需时间长度成几何阶数上涨，这就是$O(a^n)$的指数级复杂度，甚至$O(n!)$的阶乘级复杂度。不会存在$O(2*n^2)$的复杂度，因为前面的那个“2”是系数，根本不会影响到整个程序的时间增长。同样地，$O(n^3+n^2)$ 的复杂度也就是$O(n^3)$的复杂度。因此，我们会说，一个$O(0.01*n^3)$的程序的效率比$O(100*n^2)$的效率低，尽管在n很小的时候，前者优于后者，但后者时间随数据规模增长得慢，最终$O(n^3)$的复杂度将远远超过$O(n^2)$。我们也说，$O(n^{100})$的复杂度小于$O(1.01^n)$的复杂度。</p>
<p>容易看出，前面的几类复杂度被分为两种级别，其中后者的复杂度无论如何都远远大于前者:一种是$O(1)，O(log(n))，O(n^a)$等，我们把它叫做多项式级的复杂度，因为它的规模n出现在底数的位置;另一种是$O(a^n)$和$O(n!)$型复杂度，它是非多项式级的，其复杂度计算机往往不能承受。当我们在解决一个问题时，我们选择的算法通常都需要是多项式级的复杂度，非多项式级的复杂度需要的时间太多，往往会超时，除非是数据规模非常小。</p>
<p>自然地，人们会想到一个问题:会不会所有的问题都可以找到复杂度为多项式级的算法呢?很遗憾，答案是否定的。有些问题甚至根本不可能找到一个正确的算法来，这称之为“不可解问题”(UndecidableDecisionProblem))。TheHaltingProblem)就是一个著名的不可解问题，在我的Blog上有过专门的介绍和证明。再比如，输出从1到n这n个数的全排列。不管你用什么方法，你的复杂度都是阶乘级，因为你总得用阶乘级的时间打印出结果来。有人说，这样的“问题”不是一个“正规”的问题，正规的问题是让程序解决一个问题，输出一个“YES””或“NO”(这被称为判定性问题)，或者一个什么什么的最优值(这被称为最优化问题)。那么，根据这个定义，我也能举出一个不大可能会有多项式级算法的问题来:Hamilton回路。问题是这样的:给你一个图，问你能否找到一条经过每个顶点一次且恰好一次(不遗漏也不重复)最后又走回来的路(满足这个条件的路径叫做Hamilton回路)。这个问题现在还没有找到多项式级的算法。事实上，这个问题就是我们后面要说的NPC问题。</p>
<p>下面引入P类问题的概念:如果一个问题可以找到一个能在多项式的时间里解决它的算法，那么这个问题就属于P问题。P是英文单词多项式的第一个字母。哪些问题是P类问题呢?通常NOI和NOIP不会出不属于P类问题的题目。我们常见到的一些信息奥赛的题目都是P问题。道理很简单，一个用穷举换来的非多项式级时间的超时程序不会涵盖任何有价值的算法。</p>
<p>接下来引入NP问题的概念。这个就有点难理解了，或者说容易理解错误。在这里强调(回到我竭力想澄清的误区上)，NP问题不是非P类问题。NP问题是指可以在多项式的时间里验证一个解的问题。NP问题的另一个定义是，可以在多项式的时间里猜出一个解的问题。比方说，我RP很好，在程序中需要枚举时，我可以一猜一个准。现在某人拿到了一个求最短路径的问题，问从起点到终点是否有一条小于100个单位长度的路线。它根据数据画好了图，但怎么也算不出来，于是来问我:你看怎么选条路走得最少?我说，我RP很好，肯定能随便给你指条很短的路出来。然后我就胡乱画了几条线，说就这条吧。那人按我指的这条把权值加起来一看，嘿，神了，路径长度98，比100小。于是答案出来了，存在比100小的路径。别人会问他这题怎么做出来的，他就可以说，因为我找到了一个比100小的解。在这个题中，找一个解很困难，但验证一个解很容易。验证一个解只需要O(n)的时间复杂度，也就是说我可以花O(n)的时间把我猜的路径的长度加出来。那么，只要我RP好，猜得准，我一定能在多项式的时间里解决这个问题。我猜到的方案总是最优的，不满足题意的方案也不会来骗我去选它。这就是NP问题。当然有不是NP问题的问题，即你猜到了解但是没用，因为你不能在多项式的时间里去验证它。下面我要举的例子是一个经典的例子，它指出了一个目前还没有办法在多项式的时间里验证一个解的问题。很显然，前面所说的Hamilton回路是NP问题，因为验证一条路是否恰好经过了每一个顶点非常容易。但我要把问题换成这样:试问一个图中是否不存在Hamilton回路。这样问题就没法在多项式的时间里进行验证了，因为除非你试过所有的路，否则你不敢断定它“没有Hamilton回路”。</p>
<p>之所以要定义NP问题，是因为通常只有NP问题才可能找到多项式的算法。我们不会指望一个连多项式地验证一个解都不行的问题存在一个解决它的多项式级的算法。相信读者很快明白，信息学中的号称最困难的问题——“NP问题”，实际上是在探讨NP问题与P类问题的关系。</p>
<p>很显然，所有的P类问题都是NP问题。也就是说，能多项式地解决一个问题，必然能多项式地验证一个问题的解——既然正解都出来了，验证任意给定的解也只需要比较一下就可以了。关键是，人们想知道，是否所有的NP问题都是P类问题。我们可以再用集合的观点来说明。如果把所有P类问题归为一个集合P中，把所有NP问题划进另一个集合NP中，那么，显然有P属于NP。现在，所有对NP问题的研究都集中在一个问题上，即究竟是否有P=NP?通常所谓的“NP问题”，其实就一句话:证明或推翻P=NP。</p>
<p>NP问题一直都是信息学的巅峰。巅峰，意即很引人注目但难以解决。在信息学研究中，这是一个耗费了很多时间和精力也没有解决的终极问题，好比物理学中的大统一和数学中的歌德巴赫猜想等。</p>
<p>目前为止这个问题还“啃不动”。但是，一个总的趋势、一个大方向是有的。人们普遍认为，P=NP不成立，也就是说，多数人相信，存在至少一个不可能有多项式级复杂度的算法的NP问题。人们如此坚信P≠NP是有原因的，就是在研究NP问题的过程中找出了一类非常特殊的NP问题叫做NP-完全问题，也即所谓的NPC问题。C是英文单词“完全”的第一个字母。正是NPC问题的存在，使人们相信P≠NP。下文将花大量篇幅介绍NPC问题，你从中可以体会到NPC问题使P=NP变得多么不可思议。</p>
<p>为了说明NPC问题，我们先引入一个概念——约化(Reducibility，有的资料上叫“归约”)。</p>
<p>简单地说，一个问题A可以约化为问题B的含义即是，可以用问题B的解法解决问题A，或者说，问题A可以“变成”问题B。《算法导论》上举了这么一个例子。比如说，算法导论》上举了这么一个例子。比如说，上举了这么一个例子。比如说，现在有两个问题:求解一个一元一次方程和求解一个一元二次方程。那么我们说，前者可以约化为后者，意即知道如何解一个一元二次方程那么一定能解出一元一次方程。我们可以写出两个程序分别对应两个问题，那么我们能找到一个“规则”，按照这个规则把解一元一次方程程序的输入数据变一下，用在解一元二次方程的程序上，两个程序总能得到一样的结果。这个规则即是:两个方程的对应项系数不变，一元二次方程的二次项系为0。按照这个规则把前一个问题转换成后一个问题，两个问题就等价了。同样地，我们可以说，Hamilton回路可以约化为TS”P问题(TravellingS”alesm)anProblem)，旅行商问题):在Hamilton回路问题中，两点相连即这两点距离为0，两点不直接相连则令其距离为1，于是问题转化为在TS”P问题中，是否存在一条长为0的路径。Hamilton回路存在当且仅当TS”P问题中存在长为0的回路。</p>
<p>“问题A可约化为问题B”有一个重要的直观意义:B的时间复杂度高于或者等于A的时间复杂度。也就是说，问题A不比问题B难。这很容易理解。既然问题A能用问题B来解决，倘若B的时间复杂度比A的时间复杂度还低了，那A的算法就可以改进为B的算法，两者的时间复杂度还是相同。正如解一元二次方程比解一元一次方程难，因为解决前者的方法可以用来解决后者。</p>
<p>很显然，约化具有一项重要的性质:约化具有传递性。如果问题A可约化为问题B，问题B可约化为问题C，则问题A一定可约化为问题C。这个道理非常简单，就不必阐述了。</p>
<p>现在再来说一下约化的标准概念就不难理解了:如果能找到这样一个变化法则，对任意一个程序A的输入，都能按这个法则变换成程序B的输入，使两程序的输出相同，那么我们说，问题A可约化为问题B。</p>
<p>当然，我们所说的“可约化”是指的可“多项式地”约化(Polynom)ial-tim)eReducible)，即变换输入的方法是能在多项式的时间里完成的。约化的过程只有用多项式的时间完成才有意义。</p>
<p>好了，从约化的定义中我们看到，一个问题约化为另一个问题，时间复杂度增加了，问题的应用范围也增大了。通过对某些问题的不断约化，我们能够不断寻找复杂度更高，但应用范围更广的算法来代替复杂度虽然低，但只能用于很小的一类问题的算法。再回想前面讲的P和NP问题，联想起约化的传递性，自然地，我们会想问，如果不断地约化上去，不断找到能“通吃”若干小NP问题的一个稍复杂的大NP问题，那么最后是否有可能找到一个时间复杂度最高，并且能“通吃”所有的NP问题的这样一个超级NP问题?答案居然是肯定的。也就是说，存在这样一个NP问题，所有的NP问题都可以约化成它。换句话说，只要解决了这个问题，那么所有的NP问题都解决了。这种问题的存在难以置信，并且更加不可思议的是，这种问题不只一个，它有很多个，它是一类问题。这一类问题就是传说中的NPC问题，也就是NP-完全问题。NPC问题的出现使整个NP问题的研究得到了飞跃式的发展。我们有理由相信，NPC问题是最复杂的问题。再次回到全文开头，我们可以看到，人们想表达一个问题不存在多项式的高效算法时应该说它“属于NPC问题”。此时，我的目的终于达到了，我已经把NP问题和NPC问题区别开了。到此为止，本文已经写了近5000字了，我佩服你还能看到这里来，同时也佩服一下自己能写到这里来。</p>
<p>NPC问题的定义非常简单。同时满足下面两个条件的问题就是NPC问题。首先，它得是一个NP问题;然后，所有的NP问题都可以约化到它。证明一个问题是NPC问题也很简单。先证明它至少是一个NP问题，再证明其中一个已知的NPC问题能约化到它(由约化的传递性，则NPC问题定义的第二条也得以满足;至于第一个NPC问题是怎么来的，下文将介绍)，这样就可以说它是NPC问题了。</p>
<p>既然所有的NP问题都能约化成NPC问题，那么只要任意一个NPC问题找到了一个多项式的算法，那么所有的NP问题都能用这个算法解决了，NP也就等于P了。因此，给NPC找一个多项式算法太不可思议了。因此，前文才说，“正是NPC问题的存在，使人们相信P≠NP”。我们可以就此直观地理解，NPC问题目前没有多项式的有效算法，只能用指数级甚至阶乘级复杂度的搜索。</p>
<p>顺便讲一下NP-Hard问题。NP-Hard问题是这样一种问题，它满足NPC问题定义的第二条但不一定要满足第一条(就是说，NP-Hard问题要比NPC问题的范围广)。NP-Hard问题同样难以找到多项式的算法，但它不列入我们的研究范围，因为它不一定是NP问题。即使NPC问题发现了多项式级的算法，NP-Hard问题有可能仍然无法得到多项式级的算法。事实上，由于NP-Hard放宽了限定条件，它将有可能比所有的NPC问题的时间复杂度更高从而更难以解决。</p>
<p>不要以为NPC问题是一纸空谈。NPC问题是存在的。确实有这么一个非常具体的问题属于NPC问题。下文即将介绍它。</p>
<p>下文即将介绍逻辑电路问题。这是第一个NPC问题。其它的NPC问题都是由这个问题约化而来的。因此，逻辑电路问题是NPC类问题的“鼻祖”。</p>
<p>逻辑电路问题是指的这样一个问题:给定一个逻辑电路，问是否存在一种输入使输出为True。什么叫做逻辑电路呢?一个逻辑电路由若干个输入，一个输出，若干“逻辑门”和密密麻麻的线组成。看下面一例，不需要解释你马上就明白了。</p>
<p><img src="https://s2.ax1x.com/2019/11/02/Kq8Z0x.md.png" alt="logic1"></p>
<p>这是个较简单的逻辑电路，当输入1、输入2、输入3分别为True、True、False或False、True、False时，输出为True。有输出无论如何都不可能为True的逻辑电路吗?有。下面就是一个简单的例子。</p>
<p><img src="https://s2.ax1x.com/2019/11/02/Kq8GnI.png" alt="logic2"></p>
<p>上面这个逻辑电路中，无论输入是什么，输出都是False。我们就说，这个逻辑电路不存在使输出为True的一组输入。回到上文，给定一个逻辑电路，问是否存在一种输入使输出为True，这即逻辑电路问题。</p>
<p>逻辑电路问题属于NPC问题。这是有严格证明的。它显然属于NP问题，并且可以直接证明所有的NP问题都可以约化到它(不要以为NP问题有无穷多个将给证明造成不可逾越的困难)。证明过程相当复杂，其大概意思是说任意一个NP问题的输入和输出都可以转换成逻辑电路的输入和输出(想想计算机内部也不过是一些0和1的运算)，因此对于一个NP问题来说，问题转化为了求出满足结果为True的一个输入(即一个可行解)。</p>
<p>有了第一个NPC问题后，一大堆NPC问题就出现了，因为再证明一个新的NPC问题只需要将一个已知的NPC问题约化到它就行了。后来，Hamilton回路成了NPC问题，TSP问题也成了NPC问题。现在被证明是NPC问题的有很多，任何一个找到了多项式算法的话所有的NP问题都可以完美解决了。因此说，正是因为NPC问题的存在，P=NP变得难以置信。P=NP问题还有许多有趣的东西，有待大家自己进一步的挖掘。攀登这个信息学的巅峰是我们这一代的终极目标。现在我们需要做的，至少是不要把概念弄混淆了。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux上可用的文献目录管理工具</title>
    <url>/title/4388879e/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JHDU.md.png" alt="bibliography"></p>
<a id="more"></a>

<p>针对文献管理，Linux有很多的解决方案。借助BibTex的力量，这些工具可以帮你导入引用源，然后自动生成一个结构化文献目录。这里给大家提供了一些Linux上参考文献管理工具的不完全列表。</p>
<ol>
<li><p>Zotero<br>这应该是最著名的参考文献聚集工具，Zotero作为一个浏览器的扩展插件。当然，它也有一个方便的Linux 独立工具。拥有强大的性能，Zotero 很容易上手，并且也可以和LibreOffice 或者是其他的文本编辑器配套使用来管理文档的参考文献。我个人很欣赏其操作界面和插件管理器。可惜的是，如果你对参考文献有很多不同的需求的话，很快就会发现 Zotero 功能有限。</p>
</li>
<li><p>JabRef<br>JabRef 是最先进的文献管理工具之一。你可以导入大量的格式，可以在其外部的数据库里查找相应的条目（像Google Scholar），并且能直接输出到你喜欢的编辑器。JabRef 可以很好的兼容你的运行环境，甚至也支持插件。最后还有一点，JabRef可以连接你自己的SQL 数据库。而唯一的缺点就是其学习使用的难度。</p>
</li>
<li><p>KBibTex<br>对于 KDE 使用者，这个桌面环境也拥有它自己专有的文献管理工具KBibTex。这个程序的品质，正如你所期望。程序可高度定制，通过快捷键就可以很好的操作和体验。你可以很容易找到副本、可以预览结果、也可以直接输出到LaTex 编辑器。而我认为这款软件最大的特色在于它集成了Bigsonomy ，Google Scholar ，甚至是你的Zotero账号。唯一的缺憾是界面看起来实在是有点乱。多花点时间设置软件可以让你使用起来得心应手。</p>
</li>
<li><p>Bibfilex<br>可以运行在Gtk 和Qt 环境中，Bibfilex是一个基于 Biblatex 的界面友好的工具。相对于JabRef 和KBibTex ，缺少了一些高级的功能，但这也让他更加的快速和轻巧。不用想太多，这绝对是快速做文献目录的一个聪明的选择。界面很舒服，仅仅反映了一些必要的功能。我给出了其使用的完全手册，你可以从官方的下载页面去获得。</p>
</li>
<li><p>Pybliographer<br>正如它的名字一样，Pybliographer是一个用 Python 写的非图形化的文献目录管理工具。我个人比较喜欢把Pybiographic 当做是图形化的前端。它的界面极其简洁和抽象。如果你仅仅需要输出少数的参考文献，而且也确实没有时间去学习更多的工具软件，那么 Pybliographer 确实是一个不错的选择。有一点点像 Bibfilex 的是，它是以让用户方便、快速的使用为目标的。</p>
</li>
<li><p>Referencer<br>这应该是我归纳这些时候的一个最大的惊喜，Referencer 确实是让人眼前一亮。完美兼容 Gnome ，它可以查找和导入你的文档，然后在网上查询他们的参考文献，并且输出到 LyX ，非常的漂亮和设计良好。为数不多的几个快捷键和插件让它拥有了图书馆的风格。</p>
</li>
<li><p>Mendeley<br>用了Mendeley，一拖一点完事。Mendeley的PDF导入与识别能力非常强大，尤其是对期刊全文PDF。只要将PDF文件拖入Mendeley，它能自动识别Titile， Author， Publication， Year，但有时候识别是不准确的。</p>
</li>
<li><p>Bibus<br>BiBus基于Python，Windows和Linux版本都有，Ubuntu下安装Bibus只要敲 sudo apt-get install bibus。要注意的一点是第一次使用前要选择数据库，MySQL或SQLite任选其一。如果是个人使用，最好选择SQLite，具体按提示搞就OK了。然后就需要导入文献数据库，去PubMed主页，搜索关键词，在搜索结果列表中选中一堆你想要的文章，把文字信息导入某个txt文件，打开BiBus(在Applications-Office-BiBus），选择菜单File-Import-Medline，选择txt文件，数据库就显示在BiBus左侧的Import Buffer目录了。使用：点击每篇文献，下方就会显示作者标题摘要等信息；你可以拖动文献到左侧References目录，可以右键点击References目录，选择Add Child增加子目录，也可以手动新建文献资料。</p>
</li>
<li><p>Docear<br>配合Zotero使用效果最好，这Docear是基于思维导图形式的文献管理工具，给人耳目一新的感觉，这也是Docear的一大特色，但是Docear的文献管理方面不如Zotero。</p>
</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/yangtou882/article/details/51296120" target="_blank" rel="noopener">Zoteror和Docear</a></p>
<p>via: <a href="http://xmodulo.com/reference-management-software-linux.html" target="_blank" rel="noopener">http://xmodulo.com/reference-management-software-linux.html</a> ,原文有增删</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下自定义位置安装TeXLive2019</title>
    <url>/title/46ed9a72/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5J53q.md.jpg" alt="texlive"></p>
<a id="more"></a>

<h2 id="1-从清华大学的镜像处下载"><a href="#1-从清华大学的镜像处下载" class="headerlink" title="1.从清华大学的镜像处下载"></a>1.从清华大学的镜像处下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/</span><br></pre></td></tr></table></figure>

<h2 id="2-安装图像化界面必备的perl-tk组件"><a href="#2-安装图像化界面必备的perl-tk组件" class="headerlink" title="2.安装图像化界面必备的perl-tk组件"></a>2.安装图像化界面必备的perl-tk组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install perl-tk</span><br></pre></td></tr></table></figure>

<h2 id="3-把下载好的-iso文件挂载到-mnt下"><a href="#3-把下载好的-iso文件挂载到-mnt下" class="headerlink" title="3.把下载好的.iso文件挂载到/mnt下"></a>3.把下载好的.iso文件挂载到/mnt下</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -t iso9660 -o loop texlive2019-20190410.iso /mnt</span><br></pre></td></tr></table></figure>

<h2 id="4-准备从图形界面安装"><a href="#4-准备从图形界面安装" class="headerlink" title="4.准备从图形界面安装"></a>4.准备从图形界面安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /mnt</span><br><span class="line">sudo ./install-tl -gui</span><br></pre></td></tr></table></figure>

<h2 id="5-如果要修改安装位置请执行-目录下面空间够用也可不用管这一步"><a href="#5-如果要修改安装位置请执行-目录下面空间够用也可不用管这一步" class="headerlink" title="5.如果要修改安装位置请执行(/目录下面空间够用也可不用管这一步)"></a>5.如果要修改安装位置请执行(/目录下面空间够用也可不用管这一步)</h2><pre><code>在&quot;TEXDIR(主TeX目录)&quot; 一行后点修改，填入新的位置(如/home/texlive2019)</code></pre><h2 id="6-可以瘦身安装-空间够此步也可忽略"><a href="#6-可以瘦身安装-空间够此步也可忽略" class="headerlink" title="6.可以瘦身安装(空间够此步也可忽略)"></a>6.可以瘦身安装(空间够此步也可忽略)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;安装字体/宏包文档目录树&quot;　切换为否</span><br><span class="line">&quot;安装字体/宏包源代码目录树&quot;　切换为否</span><br><span class="line">上面两个操作会舍弃安装文档和源代码，实际上大部分人也不会看，安装了浪费2G左右空间</span><br></pre></td></tr></table></figure>
<h2 id="7-点击安装TeX-Live"><a href="#7-点击安装TeX-Live" class="headerlink" title="7.点击安装TeX Live"></a>7.点击安装TeX Live</h2><h2 id="8-卸载镜像文件"><a href="#8-卸载镜像文件" class="headerlink" title="8.卸载镜像文件"></a>8.卸载镜像文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo unmount /mnt</span><br></pre></td></tr></table></figure>

<h2 id="9-配置字体-不配置的话，无法使用TeXLive自带字体"><a href="#9-配置字体-不配置的话，无法使用TeXLive自带字体" class="headerlink" title="9.配置字体(不配置的话，无法使用TeXLive自带字体)"></a>9.配置字体(不配置的话，无法使用TeXLive自带字体)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /home/tex2019/2019/texmf-var/fonts/conf/texlive-fontconfig.conf /etc/fonts/conf.d/09-texlive.conf</span><br><span class="line">sudo fc-cache -fsv (此步执行时间稍长)</span><br></pre></td></tr></table></figure>

<h2 id="10-环境变量设置"><a href="#10-环境变量设置" class="headerlink" title="10.环境变量设置"></a>10.环境变量设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开~/.bashrc 在最后加入如下内容(具体路径安按照自己的系统修改)</span><br><span class="line"></span><br><span class="line">	export TexMan=&quot;/home/tex2019/2019/texmf-dist/doc/man&quot;</span><br><span class="line">	export TexInfo=&quot;/home/tex2019/2019/texmf-dist/doc/info&quot;</span><br><span class="line">	export TexLive=&quot;/home/tex2019/2019/bin/x86_64-linux&quot;</span><br><span class="line">	export MANPATH=&quot;$MANPATH:$TexMan&quot;</span><br><span class="line">	export INFOPATH=&quot;$INFOPATH:$TexInfo&quot;</span><br><span class="line">	export PATH=&quot;$PATH:$TexLive&quot;</span><br><span class="line"></span><br><span class="line">执行 source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="11-更新源配置"><a href="#11-更新源配置" class="headerlink" title="11.更新源配置"></a>11.更新源配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet</span><br><span class="line">此步如果出现sudo;找不到命令 tlmgr，意味着执行时环境变量不对，请执行</span><br><span class="line">(1) sudo vi /etc/sudoers</span><br><span class="line">(2) 给如下内容加一个感叹号</span><br><span class="line">	Defaults	env_reset </span><br><span class="line">	Defaults	!env_reset</span><br><span class="line">(3) 再vi ~/.bashrc 加入下面这行到最后</span><br><span class="line">(4) alias sudo=&apos;sudo env PATH=$PATH&apos;</span><br><span class="line">(5) 保存退出执行 source ~/.bashrc</span><br><span class="line">此时再执行第一条命令 sudo tlmgr option ....</span><br></pre></td></tr></table></figure>

<h2 id="12-更新宏包"><a href="#12-更新宏包" class="headerlink" title="12.更新宏包"></a>12.更新宏包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tlmgr update --self --all </span><br><span class="line">要更新几百个，时间较长</span><br></pre></td></tr></table></figure>

<h2 id="13-解决软件安装依赖问题"><a href="#13-解决软件安装依赖问题" class="headerlink" title="13.解决软件安装依赖问题"></a>13.解决软件安装依赖问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) sudo apt-get install aptitude</span><br><span class="line">(2) sudo aptitude install equivs</span><br><span class="line">(3) sudo mkdir /tmp/tl-equivs &amp;&amp; cd /tmp/tl-equivs</span><br><span class="line">(4) equivs-control texlive-local</span><br><span class="line">(5) 浏览器打开https://www.tug.org/texlive/files/debian-equivs-2019-ex.txt并复制所有内容</span><br><span class="line">(6) sudo vi texlive-local 将从浏览器拷贝的内容粘贴进去并保存退出</span><br><span class="line">(7) sudo equivs-build texlive-local</span><br><span class="line">(8) sudo apt-get freeglut3</span><br><span class="line">(9) sudo dpkg -i texlive-local_2019-1_all.deb</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>排版设计</category>
      </categories>
      <tags>
        <tag>Tex</tag>
      </tags>
  </entry>
  <entry>
    <title>关系数据库，非关系数据库，云原生数据库</title>
    <url>/title/d8ef31cc/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JgHg.md.png" alt="database"></p>
<a id="more"></a>

<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h1><p>最近在研究学习数据库知识，发现市面上太多数据库及其书籍，而且体系混乱，越看越糊涂，故特意了解了数据库的发展史。</p>
<p>最早提出关系型数据库原理的是E.F.Codd，他在其论文<a href="https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf" target="_blank" rel="noopener">A Relational Model of Data for Large Shared Data Banks</a>中详述了关系数据库的原理和实现，我看了下论文，和今天的数据库简直一模一样。</p>
<p>而非关系数据库NoSQL一词首先是Carlo Strozzi在1998年提出来的，指的是他开发的一个没有SQL功能，轻量级的，开源的关系型数据库。这个定义跟我们现在对NoSQL的定义有很大的区别，它本来指的就是“没有SQL”的数据库，但是NoSQL的发展慢慢偏离了初衷，我们要的不是“no sql”，而是“no relational”，也就是我们现在常说的非关系型数据库。</p>
<p>2009年初，Johan Oskarsson举办了一场关于开源分布式数据库的讨论，Eric Evans在这次讨论中再次提出了NoSQL一词，用于指代那些非关系型的，分布式的，且一般不保证遵循ACID原则的数据存储系统。Eric Evans使用NoSQL这个词，并不是因为字面上的“没有SQL”的意思，他只是觉得很多经典的关系型数据库名字都叫“xxxSQL”,所以为了表示跟这些关系型数据库在定位上的截然不同，就是用了“NoSQL“一词。</p>
<p>随着社会的发展，不同时代对数据处理和存储的需求在不断变化，故而可以预见的是，数据库会不断有新品种诞生，老品种过时退出市场。今天历史偶然地走上了大数据和智能的时代，所以未来数据一定是很重要的一块，而数据库由于其特殊地位，应当得到极大的发展。我预计，未来10-20年应该会诞生数种新的广泛流行使用的数据库，满足的需求应当是切合时代要求的。中国的数据库厂商应该要有眼光锁定未来市场。为什么? 因为我们有最多的人口，倘使10年后每个中国人都要接入网络，每天产生1G的数据，那么一年，14甚至15亿人口是什么概念？古代有县志，史书。而现代人也当考虑如何将我们丰富的生活和文化保留给后人研究，所以大型的数据库必然会出现，建立人类数据库势在必行，可能下一个创业点也在此。</p>
<p>在我的认识里，数据库除了存储还要满足对关系的映射，这里关系包含传统的关系数据库关系，也包含非关系数据库的关系。嗯？非关系数据库还有关系？是的，没有消息就是消息，没有关系也是关系。数据总是有结构存在的，目前的成熟产品不一定能应对未来的场景，此间到底还有多少可以挖掘的知识就需要一代代人慢慢摸索。<br>若干年来，数据库一直锁定在大厂商手里，下面略谈一些。</p>
<h1 id="二-数据库大厂"><a href="#二-数据库大厂" class="headerlink" title="二 数据库大厂"></a>二 数据库大厂</h1><p>做数据库的大厂商目前有七家(排名不分先后)。</p>
<blockquote>
<p>   <strong>SAP</strong>，企业资源计划系统里的佼佼者。<br>    <strong>AWS</strong>，Amazon巨头，卖东西卖出大机遇。<br>    <strong>IBM</strong>，百年老牌，现代计算机结构的奠基者。<br>    <strong>Google</strong>，不作恶，偏学好，引领时代精神。<br>    <strong>Oracle</strong>，甲骨文，专注于闭源的杰出代表。<br>    <strong>Aliyun</strong>，阿里巴巴，人人夸。<br>    <strong>MicroSoft</strong>，Windows 发扬者。</p>
</blockquote>
<h1 id="二-关系型数据库"><a href="#二-关系型数据库" class="headerlink" title="二 关系型数据库"></a>二 关系型数据库</h1><p>常见的关系数据库如下：</p>
<blockquote>
<p>   <strong>DB2</strong> 是IBM一种分布式数据库解决方案，是IBM开发的一种大型关系型数据库平台。支持多用户或程序在同一条SQL 语句中查询不同database甚至DBMS中的数据。<br>    <strong>Oracle</strong> 是甲骨文公司的一款关系数据库管理系统。它是在数据库领域一直处于领先地位的产品。可以说Oracle数据库系统是目前世界上流行的关系数据库管理系统。<br>    <strong>MySQL</strong> 是一种开放源代码的关系型数据库管理系统，使用最常用的数据库管理语言结构化查询语言（SQL）进行数据库管理。<br>    <strong>MariaDB</strong> 是MySQL的一个分支，主要由开源社区在维护，由MySQL创始人开发。MariaDB完全兼容MySQL，使之能轻松成为MySQL的代替品。使用XtraDB来代替MySQL的InnoDB。<br>    <strong>SQLite</strong> 是一款轻型的数据库，遵守ACID的关系型数据库管理系统，包含在一个相对小的C库中。设计目标是嵌入式，它占用资源非常的低，在嵌入式设备中，可能只需几百K内存就够了。<br>    <strong>Access</strong> 是由微软发布的关系数据库管理系统。它结合了MicrosoftJet Database Engine和图形用户界面两项特点，是Microsoft Office的系统程序之一。<br>    <strong>PostgreSQL</strong> 是以加州大学伯克利分校计算机系开发的POSTGRES(现已更名为PostgreSQL)为基础的对象关系型数据库管理系统（ORDBMS）。<br>    <strong>SQL Server</strong> 同样是微软公司推出的一种关系型数据库系统。是一个可扩展的、高性能的、为分布式客户机/服务器计算所设计的数据库管理系统，实现了与WindowsNT的有机结合，提供了基于事务的企业级信息管理系统方案。<br>    <strong>Teradata</strong> 整体上是按Shared Nothing 架构体系进行组织的，他的定位就是大型数据仓库系统，定位比较高。<br>    <strong>Ingres</strong> 是比较早的数据库系统，开始于加利福尼亚大学柏克莱分校的一个研究项目，该项目开始于70年代早期，在80年代早期结束。从80年代中期，在Ingres基础上产生了很多商业数据库软件，包括Sybase、MicrosoftSQL Server、NonStop SQL、Informix 。<br>    <strong>Informix</strong> 是IBM公司出品的关系数据库管理系统（RDBMS）家族。作为一个集成解决方案，它被定位为作为IBM在线事务处理（OLTP）旗舰级数据服务系统。<br>    <strong>Sybase</strong> 美国Sybase公司研制的一种关系型数据库系统，是一种典型的UNIX或WindowsNT平台上客户机/服务器环境下的大型数据库系统。<br>    <strong>FoxPro</strong> 是一种功能强大的数据库，是当今最受欢迎的数据库管理软件之一。FoxPro数据库最初由美国Fox公司1988年推出，1992年Fox公司被Microsoft公司收购。<br>    <strong>Percona</strong>为MySQL数据库服务器进行了改进，在功能和性能上较MySQL有着很显著的提升。该版本提升了在高负载情况下的InnoDB的性能，为DBA提供一些非常有用的性能诊断工具。<br>    <strong>Cache</strong> 是美国Intersystems公司产品，后关系型数据库(Post Relational database)中的领头羊。Cache数据库在国外特别是医疗领域，在美国和欧洲的HIS系统(医疗卫生管理信息系统)中，所占的比例最大，医疗界首选。</p>
</blockquote>
<h1 id="三-非关系型数据库"><a href="#三-非关系型数据库" class="headerlink" title="三 非关系型数据库"></a>三 非关系型数据库</h1><p>非关系型里有key-value型的，也有做搜索的，还有做文档和图形和扩展式的。<br>常见的非关系数据库如下：</p>
<blockquote>
<p>   <strong>Redis</strong>     一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>    <strong>Neo4 j 一个高性能的,NOSQL图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎。<br>    *<em>Ria k 一个分布式的存储文档型数据库。<br>    *</em>HBas e 一个分布式的、面向列的开源数据库，源于Fay Chang的Google论文“Bigtable：一个结构化数据的分布式存储系统”。HBase是Apache的Hadoop项目的子项目。<br>    *<em>Flar e 由日本第二大SNS网站green.jp开发，支持scale，可动态添加或删除数据库服务节点。<br>    *</em>MongoDB</strong> 一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>    <strong>Couchbase</strong>  CouchDB和Membase合并后的产品，先进的Cache系统，由C/C++开发。<br>    <strong>Memcached</strong>  一套分布式的高速缓存系统，由LiveJournal的Brad Fitzpatrick开发。<br>    <strong>DynamoDB</strong> 被设计成用来托管的NoSQL数据库服务、可预期的性能、可实现无缝扩展性和可靠性等核心问题。<br>    <strong>Hazelcast</strong> 一个开源的可嵌入式数据网格，可以把它看做是内存数据库，但与Redis有不同。<br>    <strong>Accumulo</strong> 一个基于Google’s BigTable的高扩展性存储数据库。采用java编写并且操作于HDFS系统上。</p>
</blockquote>
<pre><code>**Cassandra** 一套开源分布式NoSQL数据库系统。最初由Facebook开发，用于储存收件箱等简单格式数据，集GoogleBigTable的数据模型与Amazon Dynamo的完全分布式的架构于一身。
**Cloundant** 省却维护人员在数据库管理、维护和调优方面的工作，而不需要考虑数据库管理以及后续随着数据量增长带来的扩展性问题。麻省理工的三位物理学家在寻找上帝粒子的科学实验中将CouchDB进行了大量定制和改进，从而形成了Cloudant。
**DataStax** 基于开源的“NoSQL”数据库Apache Cassandra，将Cassandra与Hadoop进行了集成。
**FlockDB**  一个存储图数据的分布式数据库，图数据库的存储对象是图论里面的图，而非图片。Twitter使用它来存储人与人之间的关系图。
**MarkLogic**  企业级的NoSQL数据库。是一个集存储、管理、搜索JSON和XML文档和图形数据的multi-model NoSWL数据库。
**Voldemort** 一个分布式键-值（Key-value）存储系统，是Amazon Dynamo的一个开源克隆。
**Twemproxy** 引入代理层，可将后端的多台Redis或Memcached实例进行统一管理与分配，使应用程序只需要在Twemproxy上进行操作，而不用关心后面具体有多少个真实的 Redis 或 Memcached 存储。
**CockroachDB**一款开源的分布式数据库，具有NoSQL对海量数据的存储管理能力，又保持了传统数据库支持的ACID和SQL等，还支持跨地域、去中心、高并发、多副本强一致和高可用等特性。
**Elasticsearch** 一个接近实时的搜索平台，从索引这个文档到这个文档能够被搜索到只有一个轻微的延迟。
**Azure Cosmos DB** 由Microsoft提供的全球分布式多模型数据库。</code></pre><h1 id="NewSQL-新技术"><a href="#NewSQL-新技术" class="headerlink" title="NewSQL 新技术"></a>NewSQL 新技术</h1><p>还有一些新出现的数据库，应对目的不同。</p>
<blockquote>
<p>   <strong>TiDB</strong> 是国内PingCAP团队开发的一个分布式SQL数据库，其灵感来自于Google的F1和Google spanner, TiDB支持包括传统RDBMS和NoSQL的特性。<br>    <strong>LMDB</strong> 全称是Lightning Memory-Mapped Database(快如闪电的内存映射数据库)，它的文件结构简单，包含一个数据文件和一个锁文件。<br>    <strong>NuoDB</strong> 针对云伸缩设计的关系型数据库。重新定义了关系型数据库技术，它是针对弹性云系统而非单机系统设计的，因此可以将其看作是一个多用户、弹性、按需的分布式关系型数据库管理系统。<br>    <strong>VoltDB</strong> 一个内存数据库，提供了 NoSQL 数据库的可伸缩性和传统关系数据库系统的 ACID 一致性。<br>    <strong>TokuDB</strong> 是TokuTek公司研发的新引擎，支持事务/MVCC，数据压缩功能一流，支持异步写入数据功能。索引结构采用fractal tree数据结构，是buffer tree的变种，写入性能优异，适合写多读少的场景。<br>    <strong>MemSQL</strong> 内存数据库，可以横跨多个商用节点（服务器）扩展MemSQL数据集。<br>    <strong>Spanner</strong> 是谷歌公司研发的、可扩展的、多版本、全球分布式、同步复制数据库。<br>    <strong>LevelDB</strong> 是google实现的一个开源且非常高效的键值对存储数据库。<br>    <strong>Clustrix</strong> 是一款分布式数据库系统，它既支持最简单的Key-Value格式，又兼容MySQL的功能，同时能非常简单通过添加新的节点来存储数十亿条数据。<br>    <strong>HybridDB</strong> 是面向在线事务（OLTP）和在线分析（OLAP）混合场景的关系型数据库。HybridDB采用一份数据存储来进行OLTP和OLAP处理，解决了以往需要把一份数据多次复制来分别进行业务交易和数据分析的问题。<br>    <strong>ScaleBase</strong> 是一款基于 MySQL 而构建的动态数据库集群，已针对云技术进行了优化。该解决方案可实现 MySQL 关系数据的完整性，能使您向外扩展到无限数量的用户、数据和事务。<br>    <strong>SequoiaDB</strong> 是一款支持SQL、高并发、实时性、分布式、可扩展、灵活存储的操作型NewSQL数据库，现已开源。<br>    <strong>Tokyo Cabinet(TC)</strong> 是日本人平林干雄开发的一款DBM数据库读写非常快。 </p>
</blockquote>
<h1 id="四-云源生数据库"><a href="#四-云源生数据库" class="headerlink" title="四 云源生数据库"></a>四 云源生数据库</h1><p>云时代诞生的新型数据库，目前还处在发展阶段。</p>
<blockquote>
<p>   <strong>Aurora</strong>  亚马逊推出的云原生数据库。<br>    <strong>PolarDB</strong> 阿里产品。<br>    <strong>CynosDB</strong> 腾讯产品。</p>
</blockquote>
<h1 id="五-结语"><a href="#五-结语" class="headerlink" title="五 结语 "></a>五 结语 </h1><p>数据库种类实在太多，在此只列举了一部分，当然，大部分人能用得到的就一部分。<br>看到这些数据库，感觉自己知识实在匮乏，对很多东西理解太简单，对新技术的领悟太浅显。<br>希望能在数据这块好好研究，毕竟未来可期。</p>
<h1 id="六-参考资源"><a href="#六-参考资源" class="headerlink" title="六 参考资源"></a>六 参考资源</h1><p>[1] <a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">数据库排名</a></p>
<p>[2] <a href="https://www.infoq.cn/article/cloud-native-data" target="_blank" rel="noopener">什么是“云原生”数据</a></p>
<p>[3] <a href="https://zhuanlan.zhihu.com/p/48725521" target="_blank" rel="noopener">阿里云数据库入选Gartner</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Matplotlib 画图中文乱码解决</title>
    <url>/title/2cca9645/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JrgP.md.png" alt="matplotlib"></p>
<a id="more"></a>

<p>用matplotlib画图出现中文符号乱码，东改改西改改都不对，实际是没找到中文字体，应对方法如下。</p>
<h1 id="1-找到宋体"><a href="#1-找到宋体" class="headerlink" title="1.找到宋体"></a>1.找到宋体</h1><p> 拷贝Window/Fonts/simhei.ttf 到 /usr/local/lib/python2.7(3.6)/dist-packages/matplotlib/mpl-data/fonts/ttf</p>
<h1 id="2-删除缓冲文件"><a href="#2-删除缓冲文件" class="headerlink" title="2.删除缓冲文件"></a>2.删除缓冲文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf ~/.cache/matplotlib</span><br></pre></td></tr></table></figure>

<h1 id="3-设置字体配置文件"><a href="#3-设置字体配置文件" class="headerlink" title="3.设置字体配置文件"></a>3.设置字体配置文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/local/lib/python2.7(3.6)/dist-packages/matplotlib/mpl-data/matplotlibrc</span><br><span class="line">取消这三行注释并加入值:</span><br><span class="line"></span><br><span class="line">(1) font.family     : sans-serif</span><br><span class="line">(2) font.sans-serif : SimHei, (加入SimHei,原有的字体不动)</span><br><span class="line">(2) axes.unicode_minus  : False</span><br></pre></td></tr></table></figure>

<h1 id="4-命令行进入python并尝试导入"><a href="#4-命令行进入python并尝试导入" class="headerlink" title="4.命令行进入python并尝试导入"></a>4.命令行进入python并尝试导入</h1><p>(导入后要稍等字体刷新)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:~$ python</span><br><span class="line">shieber@Kew:~$ python</span><br><span class="line">Python 3.6.7 (default, Oct 22 2018, 11:32:17)</span><br><span class="line">[GCC 8.2.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import matplotlib.pyplot as plt</span><br></pre></td></tr></table></figure>

<h1 id="5-针对python3"><a href="#5-针对python3" class="headerlink" title="5.针对python3"></a>5.针对python3</h1><p>和python2一样的操作</p>
<blockquote>
<p>拷贝字体 /usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf</p>
</blockquote>
<blockquote>
<p>修改配置文件/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/matplotlibrc</p>
</blockquote>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title>汉化版Python代码</title>
    <url>/title/236a501e/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2019/11/19/MRi3q0.md.png" alt="python"> </p>
<a id="more"></a>

<p>前段时间看到有人诘问：你以为用中文你就能写好代码？遂思考，代码要是用中文书写该是何样？脑洞大开一把！</p>
<h2 id="用中文和英文分别写一个爬虫"><a href="#用中文和英文分别写一个爬虫" class="headerlink" title="用中文和英文分别写一个爬虫"></a>用中文和英文分别写一个爬虫</h2><p><strong>中文版</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">阴!/用户/二进制/蟒蛇2</span><br><span class="line">阴 -*- 编码:太极八卦码 -*-</span><br><span class="line">阴 时间：西元2019年三月二十三日	</span><br><span class="line">阴 作者：一名脱离低级趣味的人</span><br><span class="line">阴 系统：乌邦图</span><br><span class="line"></span><br><span class="line">阴阴阴阴阴阴 蟒蛇2 防止编码错误 阴阴阴阴阴阴</span><br><span class="line">导入 系统环境</span><br><span class="line">重加载(系统环境)</span><br><span class="line">系统环境.设置默认编码(&apos;太极八卦码&apos;)</span><br><span class="line"></span><br><span class="line">阴阴阴阴阴阴 蟒蛇2 爬虫，相关库 阴阴阴阴阴阴</span><br><span class="line"></span><br><span class="line">导入 请求</span><br><span class="line">导入 正则表达式</span><br><span class="line">导入 统一资源定位符解析器</span><br><span class="line">从 鲜汤4  导入 鲜汤</span><br><span class="line">从 多线程.管理器 导入 基本管理器</span><br><span class="line"></span><br><span class="line">阴阳阳阳阳阳 蟒蛇 爬虫,五大模块 阳阳阳阳阳阳阴</span><br><span class="line"></span><br><span class="line">类 下载器()</span><br><span class="line">	定义 __初始化__(朕):</span><br><span class="line">		阴 下载的数量</span><br><span class="line">		朕.已下载量= 0</span><br><span class="line"></span><br><span class="line">	定义 下载(朕，统一资源定位符):</span><br><span class="line">		天地玄黄</span><br><span class="line">			超文本标记文档下载处理函数</span><br><span class="line">		天地玄黄</span><br><span class="line"></span><br><span class="line">		若 统一资源定位符 乃 空:</span><br><span class="line">			返回 空</span><br><span class="line">		</span><br><span class="line">		浏览器_代理 = &apos;莫栽啦/4.0 (兼容; 微软 新技术平台)&apos;</span><br><span class="line">		浏览器_头	= &#123;&apos;浏览器_代理&apos;:浏览器_代理&#125;</span><br><span class="line">		反馈		= 请求.抓取(统一资源定位符,头=浏览器_头)</span><br><span class="line">		</span><br><span class="line">		若 200 == 反馈.状态码:</span><br><span class="line">			反馈.编码 = &apos;太极八卦码&apos;</span><br><span class="line">			朕.已下载量 += 1</span><br><span class="line">			返回 反馈.文本</span><br><span class="line"></span><br><span class="line">		返回 空</span><br><span class="line"></span><br><span class="line">类 超文本标记语言解析器():</span><br><span class="line">	天地玄黄</span><br><span class="line">		解析器:针对不同的</span><br><span class="line">    	目标每次重写相关部分</span><br><span class="line">	天地玄黄</span><br><span class="line"></span><br><span class="line">	定义 __初始化__(朕):</span><br><span class="line">		阴 处理的数量	</span><br><span class="line">		朕.抓过的 = 0</span><br><span class="line"></span><br><span class="line">	定义 解析器(朕,网页定位符,超文本内容):</span><br><span class="line">		天地玄黄</span><br><span class="line">			网页解析</span><br><span class="line">		天地玄黄</span><br><span class="line"></span><br><span class="line">		若 网页统一资源定位符 乃　空 或 超文本内容 乃 空:</span><br><span class="line">			返回 空</span><br><span class="line"></span><br><span class="line">		汤   = 鲜汤(超文本内容,&apos;超文本.解析器&apos;)</span><br><span class="line">		新定位符 = 朕._抓_新_网页(汤)</span><br><span class="line">		新数据   = 朕._抓_新_数据(新定位符，汤)</span><br><span class="line">		朕.抓过的 += 1</span><br><span class="line">		返回 新定位符,新数据</span><br><span class="line">	</span><br><span class="line">	定义 _抓_新_定位符(朕,汤):</span><br><span class="line">		天地玄黄</span><br><span class="line">			内部函数:提取页面的url集合</span><br><span class="line">		天地玄黄</span><br><span class="line"></span><br><span class="line">		阴 百度百科的基站</span><br><span class="line">		根定位符 = &apos;https://baike.baidu.com&apos;</span><br><span class="line">		新定位符 = 集合()</span><br><span class="line"></span><br><span class="line">		阴 以下内容需要根据自己的需求改写	</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line">		链接集合 = 汤.全抓(&apos;a&apos;,href=正则表达式.编译(r&apos;/item/(.+)/\d+&apos;))</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line"></span><br><span class="line">		对 链接 属于 链接集合:</span><br><span class="line">			新定位符 = 链接[&apos;href&apos;]</span><br><span class="line">			全新定位符 =  统一资源定位符解析器.定位符拼接(根定位符,新定位符)</span><br><span class="line">			新定位符.加入(全新定位符)</span><br><span class="line">		</span><br><span class="line">		返回 新定位符</span><br><span class="line"></span><br><span class="line">	定义 _抓_新_数据(朕,网页定位符,汤):</span><br><span class="line">		天地玄黄</span><br><span class="line">			内部函数:提取页面的标题，摘要</span><br><span class="line">		天地玄黄</span><br><span class="line"></span><br><span class="line">		新数据集 = &#123;&#125;</span><br><span class="line">		新数据集[&apos;定位符&apos;] = 网页定位符</span><br><span class="line"></span><br><span class="line">		阴 以下内容需要根据自己的需求改写	</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line">		标题= 汤.抓(&apos;dd&apos;,class_=&quot;lemmaWgt-lemmaTitle-title&quot;).抓(&apos;h1&apos;) </span><br><span class="line">		新数据集[&apos;标题&apos;] = 标题.抓_文本()</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line"></span><br><span class="line">		阴 以下内容需要根据自己的需求改写	</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line">		概况 = 汤.抓(&apos;div&apos;,class_=&quot;para&quot; )</span><br><span class="line">		新数据集[&apos;概况&apos;] = 概况.抓_文本()</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line"></span><br><span class="line">		返回 新数据集</span><br><span class="line"></span><br><span class="line">类　爬虫节点():</span><br><span class="line">	定义 __初始化__(朕):</span><br><span class="line">		阴 注册获取队列方法</span><br><span class="line">		基本管理器.注册(&apos;获取_任务_队列&apos;)</span><br><span class="line">		基本管理器.注册(&apos;获取_结果_队列&apos;)</span><br><span class="line"></span><br><span class="line">		阴 连接到网络端口</span><br><span class="line">		服务器地址 = &apos;127.0.0.1&apos;</span><br><span class="line">		打印 &quot;连接到%字符...&quot;%服务器地址</span><br><span class="line"></span><br><span class="line">		阴 设置口令</span><br><span class="line">		朕.管理器 = 基本管理器(地址=(服务器地址, 8001),授权秘钥=&apos;太少老君急急如律令&apos;) </span><br><span class="line"></span><br><span class="line">		阴 连接到本地回环127.0.0.1</span><br><span class="line">		朕.管理器.连接()</span><br><span class="line"></span><br><span class="line">		阴 获取队列</span><br><span class="line">		朕.任务= 朕.管理器.抓_任务_队列()</span><br><span class="line">		朕.结果= 朕.管理器.抓_结果_队列()</span><br><span class="line"></span><br><span class="line">		阴 初始化下载器和解析器</span><br><span class="line">		朕.下载器 = 下载器()</span><br><span class="line">		朕.解析器 = 超文本解析器()</span><br><span class="line">		打印 &quot;初始化 成功&quot;</span><br><span class="line">	</span><br><span class="line">	定义 爬(朕):</span><br><span class="line">		阴 设置起始位置</span><br><span class="line">		页面 = 0</span><br><span class="line">		当 真:</span><br><span class="line">			阴 主循环，开启爬虫</span><br><span class="line">			尝试:</span><br><span class="line">				若 非 朕.任务.空的():</span><br><span class="line">					新定位符= 朕.任务.爬取()</span><br><span class="line">					页面 += 1</span><br><span class="line">					</span><br><span class="line">					若 新定位符 == &apos;end&apos;:</span><br><span class="line">						打印　&quot;爬虫节点退出...&quot;</span><br><span class="line">						朕.结果.放入(&#123;&apos;新定位符&apos;:&apos;end&apos;,&apos;新数据&apos;:&apos;end&apos;&#125;)</span><br><span class="line">						返回</span><br><span class="line"></span><br><span class="line">					打印 &quot;爬虫节点正在解析第%整数个网页:%字符&quot;%(页面,新定位符.编码(&apos;太极八卦码&apos;))</span><br><span class="line">					网页内容= 朕.下载器.下载(新定位符)</span><br><span class="line">					新定位符, 新数据 = 朕.解析器.解析(新定位符,网页内容)</span><br><span class="line">					朕.结果.放入(&#123;&apos;新定位符&apos;:&apos;新定位符号&apos;,&apos;新数据&apos;:&apos;新数据&apos;&#125;)</span><br><span class="line"></span><br><span class="line">			倘使　EOF错误，错：</span><br><span class="line">				打印 错.信息</span><br><span class="line">				返回</span><br><span class="line"></span><br><span class="line">			倘使　其他错误，错：</span><br><span class="line">				打印 错.信息</span><br><span class="line">				打印 &quot;爬虫失败了&quot;</span><br><span class="line"></span><br><span class="line">若 __名字__ == &quot;__主要的__&quot;:</span><br><span class="line">	爬虫 = 爬虫节点()</span><br><span class="line">	爬虫.爬取()</span><br></pre></td></tr></table></figure>

<p><strong>英文版</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/pyton</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># Date:   March 23 2019</span><br><span class="line"># Author：an advanced communist party full member who corected his vulgar tastes</span><br><span class="line"># Operating system：Ubuntu of communism</span><br><span class="line"></span><br><span class="line">#######python2 防止编码错误####################</span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line">#######python2 爬虫，相关库#####################</span><br><span class="line">import requests</span><br><span class="line">import urlparse</span><br><span class="line">import re</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from multiprocessing.managers import BaseManager</span><br><span class="line"></span><br><span class="line">#*****python2 爬虫,五大模块*******************#</span><br><span class="line">class Downloader():</span><br><span class="line">	&apos;&apos;&apos;下载器&apos;&apos;&apos;</span><br><span class="line">	def __init__(self):</span><br><span class="line">		#下载的数量</span><br><span class="line">		self.downloaded = 0</span><br><span class="line"></span><br><span class="line">	def download(self,url):</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		html下载处理函数</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		if url is None:</span><br><span class="line">			return None</span><br><span class="line"></span><br><span class="line">		user_agent = &apos;Mozilla/4.0 (compatible; MSTE 5.5; Windows NT)&apos;</span><br><span class="line">		headers = &#123;&apos;User-Agent&apos;:user_agent&#125;</span><br><span class="line">		res = requests.get(url,headers=headers)</span><br><span class="line"></span><br><span class="line">		if 200 == res.status_code:</span><br><span class="line">			res.encoding=&apos;utf-8&apos;</span><br><span class="line">			self.downloaded += 1</span><br><span class="line">			return res.text</span><br><span class="line">		return None</span><br><span class="line"></span><br><span class="line">class HtmlParser():</span><br><span class="line">	&apos;&apos;&apos;</span><br><span class="line">	解析器:针对不同的</span><br><span class="line">    目标每次重写相关部分</span><br><span class="line">	&apos;&apos;&apos;</span><br><span class="line">	def __init__(self):</span><br><span class="line">		#处理的数量	</span><br><span class="line">		self.parsed = 0</span><br><span class="line"></span><br><span class="line">	def parser(self,page_url,html_cont):</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		网页解析</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		if page_url is None or html_cont is None:</span><br><span class="line">			return None</span><br><span class="line"></span><br><span class="line">		soup = BeautifulSoup(html_cont,&apos;html.parser&apos;) </span><br><span class="line">		new_urls = self._get_new_urls(soup)</span><br><span class="line">		new_data = self._get_new_data(page_url,soup)</span><br><span class="line">		self.parsed += 1</span><br><span class="line">		return new_urls, new_data</span><br><span class="line"></span><br><span class="line">	def _get_new_urls(self,soup):</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		内部函数:提取页面的url集合</span><br><span class="line">		&apos;&apos;&apos;	</span><br><span class="line">		#百度百科的基准站</span><br><span class="line">		root_url = &apos;https://baike.baidu.com&apos;</span><br><span class="line">		new_urls = set()</span><br><span class="line"></span><br><span class="line">		#以下内容需要根据自己的需求改写	</span><br><span class="line">		#******************************</span><br><span class="line">		links = soup.find_all(&apos;a&apos;,href=re.compile(r&apos;/item/(.+)/\d+&apos;))  </span><br><span class="line">		#******************************</span><br><span class="line"></span><br><span class="line">		for link in links:</span><br><span class="line">			new_url = link[&apos;href&apos;]</span><br><span class="line">			new_full_url = urlparse.urljoin(root_url,new_url)</span><br><span class="line">			new_urls.add(new_full_url)</span><br><span class="line"></span><br><span class="line">		return new_urls</span><br><span class="line"></span><br><span class="line">	def _get_new_data(self,page_url,soup):</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		内部函数:提取页面的标题，摘要</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		new_data = &#123;&#125;</span><br><span class="line">		new_data[&apos;url&apos;] = page_url</span><br><span class="line"></span><br><span class="line">		#以下内容需要根据自己的需求改写	</span><br><span class="line">		#******************************</span><br><span class="line">		title = soup.find(&apos;dd&apos;,class_=&quot;lemmaWgt-lemmaTitle-title&quot;).find(&apos;h1&apos;) </span><br><span class="line">		new_data[&apos;title&apos;] = title.get_text()</span><br><span class="line">		#******************************</span><br><span class="line"></span><br><span class="line">		#以下内容需要根据自己的需求改写	</span><br><span class="line">		#******************************</span><br><span class="line">		summary = soup.find(&apos;div&apos;,class_=&quot;para&quot; )</span><br><span class="line">		new_data[&apos;summary&apos;] = summary.get_text()</span><br><span class="line">		#******************************</span><br><span class="line"></span><br><span class="line">		return new_data</span><br><span class="line"></span><br><span class="line">class SpiderNode():</span><br><span class="line">	&apos;&apos;&apos;爬虫节点&apos;&apos;&apos;</span><br><span class="line">	def __init__(self):</span><br><span class="line">		#注册获取队列方法</span><br><span class="line">		BaseManager.register(&apos;get_task_queue&apos;)</span><br><span class="line">		BaseManager.register(&apos;get_result_queue&apos;)</span><br><span class="line">		#连接到网络端口</span><br><span class="line">		server_addr = &apos;127.0.0.1&apos;</span><br><span class="line">		print &quot;连接到%s...&quot;%server_addr</span><br><span class="line">		#设置口令</span><br><span class="line">		self.m = BaseManager(address=(server_addr, 8001),authkey=&apos;baike&apos;) </span><br><span class="line">		#连接到网络端口 127.0.0.1</span><br><span class="line">		self.m.connect()</span><br><span class="line">		#获取Queue</span><br><span class="line">		self.task = self.m.get_task_queue()</span><br><span class="line">		self.result = self.m.get_result_queue()</span><br><span class="line">		#初始哈下载器和解析器</span><br><span class="line">		self.downloader = Downloader()</span><br><span class="line">		self.parser =  HtmlParser()</span><br><span class="line">		print &quot;init finished&quot;</span><br><span class="line">	</span><br><span class="line">	def crawl(self):</span><br><span class="line">		#设置起始位置</span><br><span class="line">		page = 0</span><br><span class="line">		while True:</span><br><span class="line">			#主循环，开启爬虫</span><br><span class="line">			try:</span><br><span class="line">				if not self.task.empty():</span><br><span class="line">					new_url = self.task.get()</span><br><span class="line">					page += 1</span><br><span class="line"></span><br><span class="line">					if new_url == &apos;end&apos;:</span><br><span class="line">						print &quot;爬虫节点退出...&quot;</span><br><span class="line">						self.result.put(&#123;&apos;new_urls&apos;:&apos;end&apos;,&apos;new_data&apos;:&apos;end&apos;&#125;)</span><br><span class="line">						return </span><br><span class="line"></span><br><span class="line">					print &quot;爬虫节点正在解析第%d个网页:%s&quot;%(page,new_url.encode(&apos;utf-8&apos;))</span><br><span class="line">					html_cont = self.downloader.download(new_url)</span><br><span class="line">					new_urls, new_data = self.parser.parser(new_url,html_cont)</span><br><span class="line">					self.result.put(&#123;&apos;new_urls&apos;:new_urls,&apos;new_data&apos;:new_data&#125;)</span><br><span class="line"></span><br><span class="line">			except EOFError, e:</span><br><span class="line">				print e.message </span><br><span class="line">				return </span><br><span class="line"></span><br><span class="line">			except Exception, e:</span><br><span class="line">				print e.message </span><br><span class="line">				print &quot;crawl failed&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">	spider = SpiderNode()</span><br><span class="line">	spider.crawl()</span><br></pre></td></tr></table></figure>

<p>实际上，你可以看到，用中文写更麻烦，更容易出错。还是老老实实学英语吧！</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Tex排版系统及其衍生系列产品的简介</title>
    <url>/title/51414649/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5J8c6.md.jpg" alt="Tex"></p>
<a id="more"></a>

<h1 id="一-什么是Tex？"><a href="#一-什么是Tex？" class="headerlink" title="一. 什么是Tex？"></a>一. 什么是Tex？</h1><p> 你用微软的Word写文档并转换为pdf，但是你觉得很不满意，尤其是涉及到数学公式录入时，Word的公式编辑器太慢而且符号查找费时费力，最后导出的pdf还是很丑。当然WPS也是一个选择，但是涉及到公式一样的很痛苦。你厌倦了这种情况，但又不得不这么做，似乎只有Word或WPS才是写文档的工具。但其实在Word还没诞生的时候就有人设计出了跨平台的文档排版利器。上世纪，计算机学界泰斗人物高德纳(<a href="https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9/1436781?fromtitle=%E9%AB%98%E5%BE%B7%E7%BA%B3&fromid=2155233" target="_blank" rel="noopener">Donald E. Knuth</a>)应出版社要求对他六十年代的巨作《计算机编程艺术》<a href="比尔盖茨在本书的后面写到：“如果你能读懂整套书，请发邮件给我"">^1</a> 出修订版，他感到以手工方式对原稿进行修改存在种种不便，于是便放下手头的工作，开始设计一套高质量的计算机排版系统。原先计划花半年时间来改进排版技术然后继续写作的高德纳教授，最后却整整耗费十年心血，终于研制成功了闻名于世的TeX系统。TeX是一种优秀的电子排版系统，编译生成的文件格式是DVI格式，可以使用其他工具转换为PDF格式。TeX及其各种衍生系统可以应对多种场景，排版论文，书籍，报刊，报告时毫无问题，排版所得产品美观而且省时。</p>
<h1 id="二-Tex的历史"><a href="#二-Tex的历史" class="headerlink" title="二. Tex的历史"></a>二. Tex的历史</h1><p>TeX 的名字是由大写的希腊字母“tec”(tau, epsilon,chi)组成。在希腊语中这个词的意思是“科技”和“艺术”，这也解释了它的发音。“T”和“E”就像在“technology”中的发音一样，而“x”的发音类似于苏格兰语单词“loch”或德语单词“ach”中的“ch”，也类似于西班牙语中的“j”或俄语中的“kh”。TeX 标志为TEX，这三个字母相靠得很近，而且中间的那个E有点儿下沉。但在无格式文件中，就写为TeX。</p>
<p> TeX的第一版于1978年面世。在经过了不断的改进后，1982年版的TeX是一个十分稳定的版本。从此以后，TeX没有较大的变动，只有很少部分的改进和错误修正。现在几乎所有的操作系统平台下，都有相应的TeX软件，而且用它们排版同一个文件得到的输出结果是相同的。TeX目前的版本是3.141592，很接近圆周率π。每有一新的版本，就会加上一个π的小数点后的数。所以我们已经知道下一版本的TeX是3.1415926，最终将收敛到π，这也代表了TeX不断追求完美的理想。</p>
<p> TeX的源程序是用Pascal写成的，原因是高德纳教授希望TeX尽可能方便地移植到其它的操作系统中去。当时Pascal是最适合于这一要求的编程语言。这使得TeX现在已经在几乎所有的计算机系统中得到实现。</p>
<h1 id="三-易混淆的TeX概念"><a href="#三-易混淆的TeX概念" class="headerlink" title="三. 易混淆的TeX概念"></a>三. 易混淆的TeX概念</h1><p> TeX里存在两个重要概念：文档格式和排版引擎。</p>
<p> TeX系统工作原理：排版引擎编译文档生成相应的DVI，再由其他程序生成PDF文档等，不同的引擎支持的文档格式不尽相同。</p>
<p> TeX系统直接学习使用较困难，且使用的是Plain Tex格式，编译生成DVI格式文档而不是PDF格式，所以就有人对TeX进行扩展(定义宏集：就是把一段段代码抽象为指令)，就得到了不同的排版引擎和文档格式。</p>
<p> 由于各种扩展多了，TeX家族里就出现了排版引擎和文档格式名称混淆的情况。要搞清楚的是，TeX排版系统是核心，是一种排版引擎，其他的各种实现都是基于TeX而改进的引擎。</p>
<p> TeX及其衍生排版系统编译的文档统称为tex文档，他们名字相同，千万不要混淆了。</p>
<ol>
<li>Tex文档格式</li>
</ol>
<hr>
<p> <strong>Plain TeX:</strong> 是Tex中的一个最基本的宏集合与TeX的基础语言构成的一种Tex文档格式(类似 .txt，.docx格式)，由Tex引擎编译，是高德纳教授开发TeX时使用的格式。</p>
<p> <strong>LaTeX:</strong> 是一种新的Tex文档格式，和Plain Tex不同。LaTeX由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在上世纪80年代初期开发，使用方便。它充分发挥了由TeX所提供的强大功能，能在很短时间内生成高质量的产品。现在是科技界的标准格式。</p>
<p> <strong>AMS-LaTeX:</strong> 由Michael Spivak基于TeX开发的一种新Tex文档格式，由美国数学协会使用，许多数学期刊接受的论文就需要AMS-LaTeX格式。因为该格式加入了对许多数学符号及有关字体的支持，使得写数学方面的文档十分方便。</p>
<p> <strong>TeXinfo:</strong> 自由软件基金会(<a href="https://www.fsf.org/" target="_blank" rel="noopener">FSF</a>)开发的一种Tex文档格式，是Linux等系统下的标准文档格式。</p>
<p> <strong>ConTeXt:</strong> 由Hans Hagen开发的一种Tex文档格式，编译后得到漂亮的出版样式。</p>
<ol start="2">
<li>Tex的各种排版引擎和指令</li>
</ol>
<hr>
<p> <strong>TeX:</strong> 最初由高德纳发明的一种排版引擎，编译Plain TeX格式的文档。</p>
<p> <strong>MikTex:</strong> 是Windows平台下的一种Tex的实现，一种排版引擎，已经被包含到CTeX套件中。</p>
<p> <strong>CTeX:</strong> 最初是由中科院数学与系统科学研究院的<a href="http://sourcedb.amss.cas.cn/zw/zjrck/yjy/200910/t20091016_2552703.html" target="_blank" rel="noopener">吴凌云</a>研究员制作发布的TeX套装，是CTeX中文套装的简称。基于MikTex引擎的Windows实现。CTeX是把MikTeX，WinEdit，GSview，Ghostscript等一些常用的相关工具包装在一起制作的一个简易安装程序，并对其中文支持部分进行了配置，安装后就可以使用中文。因为CTeX结合图形界面并包含编辑器和文档查看工具，所以使用非常方便，特殊符号还可以点击插入，很多Windows下的专业人员就使用该套装处理文档。我本人的本科毕业论文就是用CTeX做的。</p>
<p> <strong>cwTeX:</strong> 是由台湾同胞吴聪敏和吴聪慧制作发布的跨平台TeX套装，和CTeX类似，只是台湾人用的多，支持繁体字，编译的文档格式是.ctx。</p>
<p> <strong>proTeXt:</strong> 是Windows下的一款基于MikTeX的简易安装发行版TeX排版系统。</p>
<p> <strong>MacTeX:</strong> 是Mac OSX下的TeX实现，一种排版引擎，用苹果电脑的用户首选。</p>
<p> <strong>Tex Live:</strong> 是美国数学学会创立的TUG(TeX User Group)维护和发布的一种基于TeX的排版引擎，跨平台(Windows,Unix/Linux,Mac OSX)。</p>
<p> <strong>PDFTex:</strong> 也是TeX的一种实现，一种排版引擎，可以把Tex原始文档直接转换为PDF文档。</p>
<p> <strong>Tex:</strong> 是PDFTeX引擎的指令，用于将Plain TeX格式文档生成DVI文档，容易和TeX引擎搞混。</p>
<p> <strong>LaTex:</strong> 是PDFTeX引擎的指令，用于将LaTeX格式文档生成DVI文档，容易和LaTeX文档格式搞混。</p>
<p> <strong>PDFtex:</strong> 是PDFTeX引擎的指令，用于编译Plain Tex格式文档生成PDF文档。</p>
<p> <strong>PDFLaTex:</strong> 是PDFTeX引擎的指令，用于编译LaTex格式文档生成PDF文档。</p>
<p> <strong>XeTeX:</strong> 是TeX的一种实现，一种排版引擎，支持Unicode和操作系统字体。</p>
<p> <strong>Xetex:</strong> 是XeTeX引擎的指令，用来编译Plain TeX文档生成PDF文档。</p>
<p> <strong>XeLaTex:</strong> 是XeTeX引擎的指令，用来编译LaTex格式文档生成PDF文档。</p>
<p> <strong>LuaTeX:</strong> 新的TeX实现，一种新的引擎，正在不断完善。</p>
<p> <strong>Luatex:</strong> 是LuaTeX引擎的指令，用于将Plaint TeX格式文档编译成PDF文档。</p>
<p> <strong>LuaLaTex:</strong> 是LuaTeX引擎的指令，用于将LaTeX格式文档编译成PDF文档。</p>
<p> <strong>context:</strong> 是LuaTeX引擎的指令，用于将ConTeXt格式文档编译成PDF文档。</p>
<ol start="3">
<li>Tex文档的编辑器和有关工具</li>
</ol>
<hr>
<p> <strong>GSview:</strong> CTeX套装包含的文档查看器，可以直接查看PostScript文档和PDF文档。</p>
<p> <strong>Ghostscript:</strong> 是一种PostScript的解释器，可以用来查看PostScript和PDF文档。</p>
<p> <strong>WinEdit:</strong> 是CTeX套装的编辑器，就是写Tex文档的工具。</p>
<p> <strong>TeXShop:</strong> 是MacTeX下的一款Tex文档编辑器，界面美观，苹果永远追求美的享受啊!</p>
<p> <strong>TeXWorks:</strong> 是TexLive自带的Tex文档编辑器，由XeTeX作者Jonathan Kew仿照Mac上的TeXShop写出。</p>
<p> <strong>TeXMaker:</strong> 另一款Tex文档编辑器，支持文档导航。</p>
<p> <strong>TeXStudio:</strong> 又一款Tex文档编辑器，衍生自TeXmaker，功能更为强大。</p>
<p> 由于我们要处理中文，<strong>推荐使用LuaTeX和XeLaTex两个引擎来排版</strong>，尤其是在CTeX套装中，选择这两个引擎可以解决中文编译问题。编辑器<strong>推荐TexStutio</strong>，当然，这个要难一些，但是学会了工作称心。</p>
<h1 id="四-TeX的优点"><a href="#四-TeX的优点" class="headerlink" title="四. TeX的优点"></a>四. TeX的优点</h1><p> TeX特别适合于科技论文和书籍的排版，利用它可以在计算机上生成与印刷品几乎完全一样的作品，目前在国外已经被广泛地用于编排书籍、档案、学位论文和私人信件，以及各种复杂的公式、目录、索引和参考文献等。由于使用TeX可以很轻松地完成高质量科技文献的排版工作，并且可以按照作者的要求进行扩充和修改，所以逐渐引起出版界和各国科技工作者的注意，被一致认为是目前国际上排版数学公式能力最强的系统，并且在各种国际会议上被指定为标准的论文编排软件。</p>
<p> 稍有经验的人都会知道，即使再好的字处理软件打印出来的效果也都会跟屏幕上看到的有所差异，尤其是Word，还记得拿到打印店时格式出错，字迹变样吗？而TeX系统的输出是与设备无关的DVI（DeVice Independent）文件，因此无论是在针式打印机、喷墨打印机、激光打印机或是照排机上，其效果都是完全相同的，仅仅只是文字或者图形的分辩率因设备的不同而稍有差异。从这种意义上说，TeX才是真正的”所见即所得(What you see is what you get)”。</p>
<h1 id="五-Tex的各种资源和站点"><a href="#五-Tex的各种资源和站点" class="headerlink" title="五. Tex的各种资源和站点"></a>五. Tex的各种资源和站点</h1><p>(1) <a href="http://www.ctex.org/CTeXDownload/" target="_blank" rel="noopener">CTeX 套装官网</a><br>(2) <a href="https://www.latex-project.org/" target="_blank" rel="noopener">LaTeX项目官网</a><br>(3) <a href="http://tug.org/texlive/" target="_blank" rel="noopener">TeXLive的官网</a><br>(4) <a href="https://ctan.org/" target="_blank" rel="noopener">CTAN 宏包官网</a></p>
]]></content>
      <categories>
        <category>排版设计</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Tex</tag>
      </tags>
  </entry>
  <entry>
    <title>各种编程语言的适用范围</title>
    <url>/title/45b4e77f/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JKAJ.md.jpg" alt="Lang"></p>
<a id="more"></a>

<p>自Fortran语言诞生至今，各种计算机编程语言总和超过1500种，但今天还流行的并不多。大部分人在初学编程时都会问：”我该学什么语言？”。语言没有明显优劣，只有适合还是不适合，擅长与否，有的语言就是要比其他语言更适合某个领域。本文旨在梳理<a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">TIOBE</a><br>榜(The Importance Of Being<br>Earnest)上一部分语言的适用场景，希望能成为一份粗略的编程语言选择指南。(排名没有先后)</p>
<h1 id="TIOBE-Index收录的计算机语言的适用范围"><a href="#TIOBE-Index收录的计算机语言的适用范围" class="headerlink" title="TIOBE Index收录的计算机语言的适用范围"></a>TIOBE Index收录的计算机语言的适用范围</h1><p><strong>Tex</strong><br>(1) 这个似乎不是编程语言，但是对于一心追求美的人来说是不可少的。<br>(2) 适用于书籍，报刊，杂志，论文，报告等等文档的排版。<br>(3) 详细内容请看另一篇博文<a href="https://blog.csdn.net/Shieber/article/details/88556859" target="_blank" rel="noopener">Tex排版系统及其衍生系列产品的简介</a>  </p>
<p><strong>Java</strong><br>(1) 桌面应用，Web应用<br>(2) 企业级应用，安卓应用<br>(3) 软件工具，交易程序<br>(4) 大数据和科学应用 </p>
<p><strong>C</strong><br>(1) 类Unix操作系统，嵌入式<br>(2) 交换机，路由器，防火墙<br>(3) 驱动程序，航空飞行器<br>(4) 工程控制领域，机器人<br>(5) 木马，病毒 </p>
<p><strong>C++</strong><br>(1) 游戏引擎，服务器<br>(2) 图像处理，虚拟现实<br>(3) 音视频处理，压缩技术<br>(4) 数据库，安全协议<br>(5) 图形用户界面，网络<br>(6) 科学计算，人工智能<br>(7) 编译器，调试器<br>(8) 木马，病毒  </p>
<p><strong>Python</strong><br>(1) 网络爬虫，人工智能<br>(2) 科学计算，Web开发<br>(3) 大数据，云计算<br>(4) 量化金融，运维<br>(5) 图像，音视频处理<br>(6) 木马，病毒  </p>
<p><strong>Ruby</strong><br>(1) Web开发 </p>
<p><strong>Perl</strong><br>(1) Unix系统维护，CGI脚本<br>(2) 邮件文本处理和FTP自动化<br>(3) 数据库通信，Web站点维护自动化  </p>
<p><strong>R</strong><br>(1) 数据挖掘，统计分析<br>(2) 生物医学领域<br>(3) 自动化报告  </p>
<p><strong>JavaScript</strong><br>(1) 网站前端，Web应用<br>(2) 网站后端，插件开发</p>
<p><strong>HTML</strong><br>(1) 这不是一门编程语言<br>(2) 网页生成<br>(3) 电子书制作</p>
<p><strong>PHP</strong><br>(1) 网站开发，电子商务<br>(2) Web应用，企业级应用<br>(3) 微信开发，客户端界面  </p>
<p><strong>Go</strong><br>(1) 服务器，数据库<br>(2) 分布式大型系统，云平台</p>
<p><strong>Kotlin</strong><br>(1) 安卓官方开发语言</p>
<p><strong>Swift</strong><br>(1) IOS及OS X开发</p>
<p><strong>C#</strong><br>(1) Windows桌面应用，Web 应用</p>
<p><strong>Objective-C</strong><br>(1) IOS平台软件开发</p>
<p><strong>Bash</strong><br>(1) 自动化脚本</p>
<p><strong>SQL</strong><br>(1) 数据库</p>
<p><strong>Visual Basic.NET</strong><br>(1) 可视化程序设计<br>(2) 木马，病毒</p>
<p><strong>MATLAB</strong><br>(1) 科学计算，仿真模拟<br>(2) 人工智能</p>
<p><strong>Assembly</strong><br>(1) 底层，硬件控制<br>(2) 木马，病毒</p>
<p><strong>Groovy</strong><br>(1) Java的替代品</p>
<p><strong>Delphi</strong><br>(1) 桌面开发，数据库开发<br>(2) Web服务，游戏控制软件<br>(3) 木马，病毒</p>
<p><strong>Pascal</strong><br>(1) 编程竞赛，算法研究</p>
<p><strong>Fortran</strong><br>(1) 科学研究，物理</p>
<p><strong>Lua</strong><br>(1) 游戏脚本，内嵌脚本</p>
<p><strong>Julia</strong><br>(1) 科学计算</p>
<p><strong>TypeScript</strong><br>(1) 应用级的JavaScript开发语言</p>
<p><strong>Lisp</strong><br>(1) 人工智能</p>
<p><strong>Rust</strong><br>(1) 系统级编程</p>
<p><strong>PostCript</strong><br>(1) 印刷机，打印机使用</p>
<p><strong>Dart</strong><br>(1) Web，服务器<br>(2) 物联网</p>
<p><strong>Scratch</strong><br>(1) 儿童的编程语言</p>
<p><strong>COBOL</strong><br>(1) 银行(四大行），保险，金融行业</p>
<p><strong>Scala</strong><br>(1) 大数据，Web服务</p>
<p><strong>Scheme</strong><br>(1) 科学计算</p>
<p><strong>Haskell</strong><br>(1) 函数式编程</p>
<p><strong>PowerShell</strong><br>(1) 自动化脚本，调用.Net和COM对象</p>
<p><strong>Awk</strong><br>(1) 字节流数据处理</p>
<p><strong>Erlang</strong><br>(1) 游戏网页，高并发</p>
<p><strong>Clojure</strong><br>(1) 游戏后端<br>(2) 自动化测试，黑盒测试  </p>
<p><strong>Maple</strong><br>(1) 数值计算</p>
<p><strong>VHDL</strong><br>(1) 电路设计</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>一般人用得到的语言估计就这些了，每门语言的的适用领域不一定写全，但是大体不会错误，你用过多少种语言？</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 官方推荐数据库连接器 Connector 8.0</title>
    <url>/title/925b0210/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5Go0e.jpg" alt="Mysql">　</p>
<a id="more"></a>

<h1 id="一-python-connector-8-0-简介"><a href="#一-python-connector-8-0-简介" class="headerlink" title="一. python connector 8.0 简介"></a>一. python connector 8.0 简介</h1><p>MySQL Connector/Python 8.0(以下简称Connector)是一个自完备的Python驱动器，实现了同MySQL server的连接，是MySQL官方高度推荐使用的连接器，而MySQLdb则不是。该连接器符合Python的数据库API标准2.0(PEP 249)标准，纯Python写成，只依赖Python标准库。如果有需要，请尽量使用Connector。当然，其他语言的Connector实现也有，包括C，C++，NET，ODBC，J。本文只针对Python。</p>
<h1 id="二-connector的变化"><a href="#二-connector的变化" class="headerlink" title="二. connector的变化"></a>二. connector的变化</h1><p>MySQL Connector/Python 支持：<br>(1) 几乎所有数据库特性，包括5.7版本的。<br>(2) 支持X DevAPI。<br>(3) All MySQL extensions to standard SQL syntax。<br>(4) 数据流压缩，实现客户端到服务器端的高效沟通。<br>(5) 使用SSL的TCP/IP套接字，在类Unix上使用Unix套接字。<br>(6) 支持数据类型在MySQL和Python间的转换。<br>例如Python的datetime和MySQL的DATETIME间相互转换，并且可以自由设置是否开启转换。  </p>
<h1 id="三-各个版本支持的MySQL和Python版本"><a href="#三-各个版本支持的MySQL和Python版本" class="headerlink" title="三. 各个版本支持的MySQL和Python版本"></a>三. 各个版本支持的MySQL和Python版本</h1><table>
<thead>
<tr>
<th align="center">Connector Version</th>
<th align="center">MySQL Server Versions</th>
<th align="center">Python Versions</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8.0</td>
<td align="center">8.0, 5.7, 5.6, 5.5</td>
<td align="center">3.7, 3.6, 3.5, 3.4, 2.7</td>
</tr>
<tr>
<td align="center">2.1</td>
<td align="center">5.7, 5.6, 5.5</td>
<td align="center">3.5, 3.4, 2.7, 2.6</td>
</tr>
<tr>
<td align="center">2.0</td>
<td align="center">5.7, 5.6, 5.5</td>
<td align="center">3.5, 3.4, 2.7, 2.6</td>
</tr>
<tr>
<td align="center">1.2</td>
<td align="center">5.7, 5.6, 5.5 5.1, 5.0, 4.1</td>
<td align="center">3.4, 3.3, 3.2, 3.1, 2.7, 2.6</td>
</tr>
</tbody></table>
<h1 id="四-安装"><a href="#四-安装" class="headerlink" title="四. 安装"></a>四. 安装</h1><ol>
<li>Linux下</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pip install mysql-connector-python</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Windows下</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install mysql-connector-python</span><br></pre></td></tr></table></figure>

<h1 id="五-连接方式"><a href="#五-连接方式" class="headerlink" title="五. 连接方式"></a>五. 连接方式</h1><ol>
<li>连接方式1</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import mysql.connector</span><br><span class="line">cnx = mysql.connector.connect(user=&apos;scott&apos;, </span><br><span class="line">                              password=&apos;password&apos;,</span><br><span class="line">                              host=&apos;127.0.0.1&apos;,</span><br><span class="line">                              database=&apos;employees&apos;)</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>连接方式2</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from mysql.connector import (connection)</span><br><span class="line">cnx = connection.MySQLConnection(user=&apos;scott&apos;,</span><br><span class="line">                                 password=&apos;password&apos;,</span><br><span class="line">                                 host=&apos;127.0.0.1&apos;,</span><br><span class="line">                                 database=&apos;employees&apos;)</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<p>常用的是连接方式1</p>
<ol start="3">
<li>错误处理</li>
</ol>
<hr>
<p>为了应对连接错误，可以引入try-except机制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import mysql.connector</span><br><span class="line">from mysql.connector import errorcode</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">	cnx = mysql.connector.connect(user=&apos;scott&apos;, database=&apos;employ&apos;)</span><br><span class="line">except mysql.connector.Error as err:</span><br><span class="line">	if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:</span><br><span class="line">    	print(&quot;Something is wrong with your user name or password&quot;)</span><br><span class="line">	elif err.errno == errorcode.ER_BAD_DB_ERROR:</span><br><span class="line">		print(&quot;Database does not exist&quot;)</span><br><span class="line">  	else:</span><br><span class="line">    	print(err)</span><br><span class="line">	else:</span><br><span class="line">		cnx.close()</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>把参数单独放到外面或者文件中</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import mysql.connector</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">  &apos;user&apos;: &apos;scott&apos;,</span><br><span class="line">  &apos;password&apos;: &apos;password&apos;,</span><br><span class="line">  &apos;host&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">  &apos;database&apos;: &apos;employees&apos;,</span><br><span class="line">  &apos;raise_on_warnings&apos;: True</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(**config)</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<h1 id="五-常见使用形式"><a href="#五-常见使用形式" class="headerlink" title="五.常见使用形式"></a>五.常见使用形式</h1><h2 id="0-连接器操作原理"><a href="#0-连接器操作原理" class="headerlink" title="0.连接器操作原理"></a>0.连接器操作原理</h2><p><strong>Connector的工作流程：</strong><br>(1) 接到数据库。<br>(2) 返回一个游标连接对象。<br>(3) 通过游标对数据库执行增删查改操作。<br>(4) 操作完成，分别断开连接。 </p>
<p><strong>具体示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnx = mysql.connector.connect(database=&apos;world&apos;)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line">cursor.execute(&apos;SQL语句&apos;)</span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<h2 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line"></span><br><span class="line">import mysql.connector</span><br><span class="line">from mysql.connector import errorcode</span><br><span class="line"></span><br><span class="line">DB_NAME = &apos;employees&apos;</span><br><span class="line"></span><br><span class="line">TABLES = &#123;&#125;</span><br><span class="line">TABLES[&apos;employees&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `employees` (&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL AUTO_INCREMENT,&quot;</span><br><span class="line">    &quot;  `birth_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `first_name` varchar(14) NOT NULL,&quot;</span><br><span class="line">    &quot;  `last_name` varchar(16) NOT NULL,&quot;</span><br><span class="line">    &quot;  `gender` enum(&apos;M&apos;,&apos;F&apos;) NOT NULL,&quot;</span><br><span class="line">    &quot;  `hire_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`)&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;departments&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `departments` (&quot;</span><br><span class="line">    &quot;  `dept_no` char(4) NOT NULL,&quot;</span><br><span class="line">    &quot;  `dept_name` varchar(40) NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`dept_no`), UNIQUE KEY `dept_name` (`dept_name`)&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;salaries&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `salaries` (&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `salary` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `from_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `to_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`,`from_date`), KEY `emp_no` (`emp_no`),&quot;</span><br><span class="line">    &quot;  CONSTRAINT `salaries_ibfk_1` FOREIGN KEY (`emp_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;dept_emp&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `dept_emp` (&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `dept_no` char(4) NOT NULL,&quot;</span><br><span class="line">    &quot;  `from_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `to_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`,`dept_no`), KEY `emp_no` (`emp_no`),&quot;</span><br><span class="line">    &quot;  KEY `dept_no` (`dept_no`),&quot;</span><br><span class="line">    &quot;  CONSTRAINT `dept_emp_ibfk_1` FOREIGN KEY (`emp_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,&quot;</span><br><span class="line">    &quot;  CONSTRAINT `dept_emp_ibfk_2` FOREIGN KEY (`dept_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `departments` (`dept_no`) ON DELETE CASCADE&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;dept_manager&apos;] = (</span><br><span class="line">    &quot;  CREATE TABLE `dept_manager` (&quot;</span><br><span class="line">    &quot;  `dept_no` char(4) NOT NULL,&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `from_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `to_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`,`dept_no`),&quot;</span><br><span class="line">    &quot;  KEY `emp_no` (`emp_no`),&quot;</span><br><span class="line">    &quot;  KEY `dept_no` (`dept_no`),&quot;</span><br><span class="line">    &quot;  CONSTRAINT `dept_manager_ibfk_1` FOREIGN KEY (`emp_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,&quot;</span><br><span class="line">    &quot;  CONSTRAINT `dept_manager_ibfk_2` FOREIGN KEY (`dept_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `departments` (`dept_no`) ON DELETE CASCADE&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;titles&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `titles` (&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `title` varchar(50) NOT NULL,&quot;</span><br><span class="line">    &quot;  `from_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `to_date` date DEFAULT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`,`title`,`from_date`), KEY `emp_no` (`emp_no`),&quot;</span><br><span class="line">    &quot;  CONSTRAINT `titles_ibfk_1` FOREIGN KEY (`emp_no`)&quot;</span><br><span class="line">    &quot;     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(user=&apos;scott&apos;)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line"></span><br><span class="line">def create_database(cursor):</span><br><span class="line">    try:</span><br><span class="line">        cursor.execute(</span><br><span class="line">            &quot;CREATE DATABASE &#123;&#125; DEFAULT CHARACTER SET &apos;utf8&apos;&quot;.format(DB_NAME))</span><br><span class="line">    except mysql.connector.Error as err:</span><br><span class="line">        print(&quot;Failed creating database: &#123;&#125;&quot;.format(err))</span><br><span class="line">        exit(1)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(&quot;USE &#123;&#125;&quot;.format(DB_NAME))</span><br><span class="line">except mysql.connector.Error as err:</span><br><span class="line">    print(&quot;Database &#123;&#125; does not exists.&quot;.format(DB_NAME))</span><br><span class="line">    if err.errno == errorcode.ER_BAD_DB_ERROR:</span><br><span class="line">        create_database(cursor)</span><br><span class="line">        print(&quot;Database &#123;&#125; created successfully.&quot;.format(DB_NAME))</span><br><span class="line">        cnx.database = DB_NAME</span><br><span class="line">    else:</span><br><span class="line">        print(err)</span><br><span class="line">        exit(1)</span><br><span class="line"></span><br><span class="line">for table_name in TABLES:</span><br><span class="line">    table_description = TABLES[table_name]</span><br><span class="line">    try:</span><br><span class="line">        print(&quot;Creating table &#123;&#125;: &quot;.format(table_name), end=&apos;&apos;)</span><br><span class="line">        cursor.execute(table_description)</span><br><span class="line">    except mysql.connector.Error as err:</span><br><span class="line">        if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:</span><br><span class="line">            print(&quot;already exists.&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(err.msg)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;OK&quot;)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<h2 id="2-插入"><a href="#2-插入" class="headerlink" title="2.插入"></a>2.插入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line">from datetime import date, datetime, timedelta</span><br><span class="line">import mysql.connector</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(user=&apos;scott&apos;, database=&apos;employees&apos;)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line"></span><br><span class="line">tomorrow = datetime.now().date() + timedelta(days=1)</span><br><span class="line"></span><br><span class="line">add_employee = (&quot;INSERT INTO employees &quot;</span><br><span class="line">               &quot;(first_name, last_name, hire_date, gender, birth_date) &quot;</span><br><span class="line">               &quot;VALUES (%s, %s, %s, %s, %s)&quot;)</span><br><span class="line">add_salary = (&quot;INSERT INTO salaries &quot;</span><br><span class="line">              &quot;(emp_no, salary, from_date, to_date) &quot;</span><br><span class="line">              &quot;VALUES (%(emp_no)s, %(salary)s, %(from_date)s, %(to_date)s)&quot;)</span><br><span class="line"></span><br><span class="line">data_employee = (&apos;Geert&apos;, &apos;Vanderkelen&apos;, tomorrow, &apos;M&apos;, date(1977, 6, 14))</span><br><span class="line"></span><br><span class="line"># Insert new employee</span><br><span class="line">cursor.execute(add_employee, data_employee)</span><br><span class="line">emp_no = cursor.lastrowid</span><br><span class="line"></span><br><span class="line"># Insert salary information</span><br><span class="line">data_salary = &#123;</span><br><span class="line">  &apos;emp_no&apos;: emp_no,</span><br><span class="line">  &apos;salary&apos;: 50000,</span><br><span class="line">  &apos;from_date&apos;: tomorrow,</span><br><span class="line">  &apos;to_date&apos;: date(9999, 1, 1),</span><br><span class="line">&#125;</span><br><span class="line">cursor.execute(add_salary, data_salary)</span><br><span class="line"></span><br><span class="line">cnx.commit() #只是查询时，不需这行，涉及修改数据则必须</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<h2 id="3-查询"><a href="#3-查询" class="headerlink" title="3.查询"></a>3.查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import mysql.connector</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(user=&apos;scott&apos;, database=&apos;employees&apos;)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line"></span><br><span class="line">query = (&quot;SELECT first_name, last_name, hire_date FROM employees &quot;</span><br><span class="line">         &quot;WHERE hire_date BETWEEN %s AND %s&quot;)</span><br><span class="line"></span><br><span class="line">hire_start = datetime.date(1999, 1, 1)</span><br><span class="line">hire_end = datetime.date(1999, 12, 31)</span><br><span class="line"></span><br><span class="line">cursor.execute(query, (hire_start, hire_end))</span><br><span class="line"></span><br><span class="line">for (first_name, last_name, hire_date) in cursor:</span><br><span class="line">  print(&quot;&#123;&#125;, &#123;&#125; was hired on &#123;:%d %b %Y&#125;&quot;.format(</span><br><span class="line">    last_name, first_name, hire_date))</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL8.0和Mongodb迁移数据存储位置到指定位置(Linux版)</title>
    <url>/title/dd137b08/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5Go0e.jpg" alt="Mysql">　</p>
<a id="more"></a>

<h1 id="一：MySQL迁移位置具体步骤"><a href="#一：MySQL迁移位置具体步骤" class="headerlink" title="一：MySQL迁移位置具体步骤"></a>一：MySQL迁移位置具体步骤</h1><p><strong>停止mysql服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mysql stop</span><br></pre></td></tr></table></figure>
<p><strong>拷贝数据存储到你的新位置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如: /home/database/</span><br><span class="line">$ sudo cp -R /var/lib/mysql /home/database/</span><br></pre></td></tr></table></figure>

<p><strong>打开/etc/mysql/mysql.conf.d/mysqld.cnf修改数据存储位置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将以下两行注释掉并加入新的两行(按自己的位置修改)</span><br><span class="line">\#socket = /var/run/mysqld/mysqld.sock</span><br><span class="line">\#datadir= /var/lib/mysql</span><br><span class="line">socket = /home/database/mysql/mysql.sock</span><br><span class="line">datadir = /home/database/mysql</span><br><span class="line">再接着添加以下内容</span><br><span class="line">[client]</span><br><span class="line">socket = /home/database/mysql/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line"> socket = /home/database/mysql/mysql.sock</span><br></pre></td></tr></table></figure>

<p><strong>打开/etc/apparmor.d/usr.sbin.mysqld修改新位置的读写权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注释以下两行并加入新的两行（用gedit修改该文件要记得删除可能存在的usr.sbin.mysqld~ 文件，不然启动会失败）</span><br><span class="line">\#/var/lib/mysql/ r,</span><br><span class="line">\#/var/lib/mysql/\*\* rwk,</span><br><span class="line">/home/database/mysql/ r,</span><br><span class="line">/home/database/mysql/\*\* rwk,</span><br></pre></td></tr></table></figure>

<p><strong>打开/etc/apparmor.d/abstractions/mysql修改数据库的依赖路径</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注释下面一行并加入第三行(这是个大坑)</span><br><span class="line">\#/var/lib/mysql&#123;,d&#125;/mysql&#123;,d&#125;.sock rw,</span><br><span class="line">/home/database/mysql/mysql.sock rw,</span><br></pre></td></tr></table></figure>

<p><strong>重新加载apparmor刷新配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo /etc/init.d/apparmor reload</span><br></pre></td></tr></table></figure>

<p><strong>重新加载mysql服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mysql start</span><br></pre></td></tr></table></figure>

<h1 id="二：其他几个大坑可能导致启动失败"><a href="#二：其他几个大坑可能导致启动失败" class="headerlink" title="二：其他几个大坑可能导致启动失败"></a>二：其他几个大坑可能导致启动失败</h1><p><strong>mysql/的权限属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意查看/home/database/mysql是否属于mysql组和mysql用户，及权限，若不是则执行</span><br><span class="line">$ sudo chown -R mysql:mysql /home/database/mysql</span><br><span class="line">$ sudo chmod 755 /home/database/mysql/</span><br><span class="line">没有mysql组的通过以下命令创建mysql组和用户</span><br><span class="line">$ sudo groupadd mysql</span><br><span class="line">$ sudo useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure>

<p><strong>database/的权限属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">database/的权限，建议是755，属于root，root</span><br><span class="line">$ sudo chgrp root database/</span><br><span class="line">$ sudo chown root database/</span><br><span class="line">$ sudo chmod 755 database/</span><br></pre></td></tr></table></figure>

<p><strong>Linux selinux安全机制</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在/etc/selinux/config 或类似的文件里，如有SELINUX项，请修改为</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>

<h1 id="三：结语"><a href="#三：结语" class="headerlink" title="三：结语"></a>三：结语</h1><p>网上的很多教程都过时且并不详细，提到这个又漏掉那个，本教程仍旧不敢保证你一定能成功。<br>MySQL 8.0的配置文件太多了，my.cnf conf.d/ mysql.cnf mysql.conf.d/ 等等出现了引用包含。<br><a href="https://downloads.mysql.com/docs/refman-8.0-en.a4.pdf" target="_blank" rel="noopener">官方文档</a> 六千多页，够玩儿一年。  </p>
<h1 id="四：apt安装的MongoDB迁移位置具体步骤"><a href="#四：apt安装的MongoDB迁移位置具体步骤" class="headerlink" title="四：apt安装的MongoDB迁移位置具体步骤"></a>四：apt安装的MongoDB迁移位置具体步骤</h1><p>你是手动安装的Mongodb的话，那么安装的时候你应该就考虑到这个问题了，自行配置。下面的修改只针对用sudo apt-get install 方法安装的。</p>
<p><strong>关闭服务 mongodb服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mongodb stop</span><br></pre></td></tr></table></figure>

<p><strong>查找配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ locate mongodb.conf</span><br></pre></td></tr></table></figure>

<p>如果没有，就更新下系统数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo updatedb</span><br></pre></td></tr></table></figure>

<p><strong>再次查找配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ locate mongodb.conf</span><br></pre></td></tr></table></figure>

<p>一般发现在/etc/mongodb.conf</p>
<p><strong>打开/etc/mongodb.conf并修改</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbpath=/home/database/ (可自行设置)</span><br></pre></td></tr></table></figure>

<p><strong>转移原来的数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo cp -R /var/lib/mongodb /home/database</span><br></pre></td></tr></table></figure>

<p><strong>修改权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chmod 755 -R /home/database/mongodb</span><br></pre></td></tr></table></figure>

<p><strong>更改用户和所属组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R mongodb:mongodb /home/database/mongodb</span><br></pre></td></tr></table></figure>

<p><strong>重启服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mongodb restart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>2018个人年度报告</title>
    <url>/title/4aea7fd9/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2019/11/19/MRZniV.md.png" alt="2018report"></p>
<a id="more"></a>

<h2 id="年度日历"><a href="#年度日历" class="headerlink" title="年度日历"></a>年度日历</h2><p><strong>2018.01.08</strong><br>下午学院要求进行毕业信息采集，主要拍毕业照片。快到过年了，什么事先处理好，免得下学期费时费力。信息采集，应该是大家打扮收拾一番的时候了，不过我倒是忘了，乱糟糟地拍了照。反观女生，好家伙，平时安安静静，一待照相，立马变了。平时都是端庄淑女，拍照就立马变女人了。尤其是公开拍照，不但自己化妆，估计女生间还要相互指导。当然，我不反对化妆，只要妆得好，她们愿意怎么玩儿就怎么玩儿。晚上寝室一起到东苑聚餐，反正吃饭的事，就是大事，首要事，当切实办好。毕竟穷究于礼，成就于锅。<br><strong>2018.01.15</strong><br>应邓邦林要求，我叫上徐俊/建，浪波，方齐圣等到实验室整理杂物。搬砖，背锅是两点感受，王华军瞎指挥，邓邦林默默背锅。晚上，老邓请吃饭，第一次去理工宾馆楼上吃饭，还算可以吧。<br><strong>2018.01.29</strong><br>放寒假，搬到东苑马闻杰(马君)的住处，过年大部分时间在这里过了，学点编程吧(过年回家4天)。<br><strong>2018.02.16</strong><br>大年初一，拜鬼又拜神，拜了鬼神拜死人。很多学者说：中国的文化里有一种祖宗崇拜，就是每一代新人都受到过去几千年死人的掣肘，中国人活着的时候可以是专家，学生，农民，商人，死了全成了神，而且后人不断祭拜，中国落后的很多原因要归于拜鬼文化。<br><strong>2018.02.18</strong><br>买了三个兔子13斤多，和张杰两人宰了三个小时，自作冷吃兔，封装好半斤一袋，味道和量完全不是网上货可比的。四川菜那么好吃，还是得学会自己做菜，老实说，我以后有老婆除非厨艺比我好，不然坚决不让她做饭，不然难吃她还觉得自己有多么大一个功劳。<br><strong>2018.03.21</strong><br>本科毕业论文开题。<br><strong>2018.05.24</strong><br>听诺奖得主中村修二的讲座：蓝光LED。中村非名校生，甚至不是物理专业的。中村是那种遭同事排挤，上司轻视的公司员工，最后发明了LED，得了诺贝尔奖。这事确实令人感慨，人有的时候对别人刻薄刁钻，事事依自己喜好看问题，轻易批评别人。别人的老实，在他们心中成了愚蠢，然而老实人又确实才是真正靠得住的，外表光鲜而会满嘴跑火车的人实在为数太多。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3g0WF.md.png" alt="zc">  </p>
<p><strong>2018.05.25</strong><br>受老杜邀请到青城山游玩，先爬前山，再爬后山。山中有僧人，山中有生人。天气好，边走边吃，吃到山顶，而后又走下来。下山比上山难。晚上农家乐住宿，腊肉可以。山里空气清新，把心中的烦恼一扫而光，该学习就学习，该玩就玩，钱生不带来，死不带去，该花。在山里面，边走边聊，聊人生，聊社会，聊感情，没有顾忌，思考很多，总结很多。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M32AYT.md.png" alt="qcs">    </p>
<p><strong>2018.05.28</strong><br>给徐建电脑安装Windows系统。Windows的系统反复出问题，一点不安生，不给用户好脸色，微软这服务，不知还要维持几年。<br><strong>2018.06.01</strong><br>冠军生日请寝室到“人民食堂”这个饭店去吃饭，饭菜特别好。虽然叫食堂，但是就是饭馆，环境可以，饭菜也合适。我这个人，吃饭就挑环境，吃的东西到是其次。一来，环境反应了客人的分布，是做给闲杂人吃还是给商务人士，学生，老板吃？不同的环境客户群体是完全不同的，走入乱糟糟的环境我是不喜欢的，所以我挑环境，其实挑环境就是挑人。二来，吃的东西有什么是我没见过的吗？没有，我在成都吃的每一顿饭，里面的食材，放多少盐，味精，饭是不是过夜的，我还是有数的，就那些东西，只是换个口味而已，所以我不挑食材。    </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M32Hc4.md.png" alt="cb">  </p>
<p><strong>2018.06.06</strong><br>本科毕业论文答辩，晚上和邱讯，吴梓豪东区吃鸡公煲，感觉味道一般。<br><strong>2018.06.08</strong><br>应辅导员要求，对专业就业数据进行蒙太奇操作。蒙太奇就是数据美化，就是百分比提升，没得工作，给安排工作。晚上全专业在东区聚餐，吃最后的晚餐。有的人啊，一看在眼前，但其实在天边。吃了这顿饭，散了这顿宴，大路朝天，专业同学间四年的友谊接下来就全成了回忆，此事历来如此，只是看你愿不愿意相信。<br><strong>2018.06.09</strong><br>班级部分同学雁湖旁拍毕业留念照片，大家排成一溜拍照效果还算可以吧。</p>
<p><img src="https://s2.ax1x.com/2019/11/12/M37LRI.md.png" alt="yh">   </p>
<p><strong>2018.06.11</strong><br>老白生日，请吃饭，K歌。  </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M32d0I.md.png" alt="bb">  </p>
<p><strong>2018.06.15</strong><br>专业欢送会。欢送会嘛，台上演的满是欢乐，台下坐的全是悲伤。</p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3Wnd1.md.png" alt="hsh">  </p>
<p><strong>2018.06.21</strong><br>在东区，几个老师和所带毕设的学生聚餐。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3Rvrj.md.png" alt="by2">    </p>
<p><strong>2018.06.23</strong><br>徐建生日，寝室到春熙路聚餐。本月生日扎堆，反正大吃大喝，吃了四年，算是很好的回忆。我们寝室比较团结，吃饭不少一人，随叫随到。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3R3bn.md.png" alt="xb">  </p>
<p><strong>2018.06.25</strong><br>理工大学2018届毕业典礼。毕业典礼，就是走过场，领导们站上去讲几句捧场话，同学坐过来说几句客套话。  </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3RWxe.md.png" alt="by1">    </p>
<p><strong>2018.06.30</strong><br>搬离理工大学，四年，时间很快，最后到图书馆去看看，毕竟在这里奋斗过。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3fccD.md.png" alt="tsg">  </p>
<p><strong>2018.07.04</strong><br>代赵悦办理户口迁移证并从东区顺丰寄回新疆。<br><strong>2018.08.31</strong><br>开学报到。<br><strong>2018.09.11</strong><br>听讲座，学习学习民族志知识。这玩意儿，完全不懂，但也正是不懂，才要去听，拓宽自己知识面，凡是自己很懂的，我大概就不会去听。    </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3W2oq.md.png" alt="jz">    </p>
<p><strong>2018.09.16</strong><br>误操作指令，导致Linux系统损坏，无法修复，修电脑的也修不好，只得换硬盘。<br><strong>2018.10.07</strong><br>搭建网站，为国内和国外单独解析域名，提升网站访问速度。<br><strong>2018.10.19</strong><br>赴绵阳两弹城学习革命精神并参加比赛，赢得奖金和荣誉证书。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3WqT1.md.png" alt="my">  </p>
<p><strong>2018.11.03</strong><br>着手翻译《真相》一书，工程量巨大。<br><strong>2018.11.24</strong><br>学习画画。本科就想学，奈何请教别人，别人却不肯教。不但不教，还要补上两句，说自己以前是随便学的，随便画画就画好了，在我面前秀优越。不过老实说，会画画的人，未必懂得教，有的人会做会吸收，但叫人输出高教育，他们实在是草包。想来还得感谢别人，万一别人乱教，岂不害我？     </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M34ZLQ.md.png" alt="hh">   </p>
<p><strong>2018.12.13</strong><br>参加活动，抽中定制U盘一个(32G)。<br><strong>2018.12.19</strong><br>学习5G核心技术并了解6G相关概念，今年两会工信部提到了6G，学校有人在开始做了，先了解了解。信息时代，得跟上步伐，不过我看周围人每一个知道6G的。<br><strong>2018.12.29</strong><br>学校下雪，空气清新，精神好。感受两点，一是：南方也是要下雪的，秦岭不管用；二是：雪这东西，少了看起来舒服，多了成包袱。而且我们没有暖气，不像北方，我们是靠身体发抖来对抗寒冷。雪还是就这么来点儿，瑞雪兆丰年，算是锦上添花，落个好兆头就行。</p>
<p><img src="https://s2.ax1x.com/2019/11/12/M35736.md.png" alt="snow">  </p>
<h2 id="年度感受"><a href="#年度感受" class="headerlink" title="年度感受"></a>年度感受</h2><p>这一年迎来毕业季和新学期，早已没了大一时的激动。时间经不起浪费，一总结，发现还是干了些事儿，有的重要，有的不怎么重要。今年学到最重要的一点就是：一个人要保持成长，不能停步。这个时代飞速发展，一个人不学习很快就会落后。然而，说说容易，做起来难。有太多人已经不成长了，不但不成长，反而拉着别人一起堕落，此间人士，女生为最，男生次之。对大学四年，我能说的是：尽本分，干实事。我得罪过人，说话有不周延的时候，犯过错，闹过笑话，但这些都改了，弥补了，所以我追求新的生活。四年里，我学会了很多技术，名词，思想，今后的日子，还需要磨炼自己，保持成长。人的能力从来不是试卷上的90分，100分，现实生活中的能力可能是100分和10000分的差距。别人怎么看我不重要，我怎么走自己的路才重要，希望人生之路更精彩。          </p>
<h2 id="年度书籍"><a href="#年度书籍" class="headerlink" title="年度书籍"></a>年度书籍</h2><p>《原则》–瑞・达里奥  </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma8aLV.md.png" alt="yz"></p>
<h2 id="年度音乐"><a href="#年度音乐" class="headerlink" title="年度音乐"></a>年度音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=230 height=86 src="//music.163.com/outchain/player?type=2&id=32408606&auto=1&height=66"></iframe>

<p>2018年度音乐10首 <a href="http://music.163.com/m/playlist?id=3097730838" target="_blank" rel="noopener">网易云歌单</a></p>
<table>
<thead>
<tr>
<th align="left">曲目</th>
<th align="left">歌手</th>
</tr>
</thead>
<tbody><tr>
<td align="left">的</td>
<td align="left">兔裹煎蛋卷</td>
</tr>
<tr>
<td align="left">Lapse</td>
<td align="left">Approaching Nirvana</td>
</tr>
<tr>
<td align="left">Years and Years</td>
<td align="left">Richard Schrieber</td>
</tr>
<tr>
<td align="left">Positive Outlook</td>
<td align="left">David Hoffner</td>
</tr>
<tr>
<td align="left">Corporate Dreams</td>
<td align="left">Capo Productions</td>
</tr>
<tr>
<td align="left">The Way of Honour</td>
<td align="left">Marcus Warner</td>
</tr>
<tr>
<td align="left">Where Is The Love?</td>
<td align="left">Clément Bcx</td>
</tr>
<tr>
<td align="left">Best Day of My Life</td>
<td align="left">American Authors</td>
</tr>
<tr>
<td align="left">B. Jones: Last Pictures</td>
<td align="left">Rinocerose</td>
</tr>
<tr>
<td align="left">Deep End (Matoma Remix)</td>
<td align="left">Coucheron</td>
</tr>
</tbody></table>
<h2 id="年度图片"><a href="#年度图片" class="headerlink" title="年度图片"></a>年度图片</h2><p><img src="https://s2.ax1x.com/2019/11/12/M3JoEn.md.png" alt="biye1"><br><img src="https://s2.ax1x.com/2019/11/12/M3Jju4.md.png" alt="biye2"><br><img src="https://s2.ax1x.com/2019/11/12/M3Yi8K.md.png" alt="biye3"></p>
<h2 id="年度消费"><a href="#年度消费" class="headerlink" title="年度消费    "></a>年度消费    </h2><p><strong>支付宝全年消费</strong>   </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma1w60.md.png" alt="alipay">  </p>
<p><strong>微信全年消费</strong>  </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma3F9s.md.png" alt="wechat"></p>
<p><strong>京东全年消费</strong>  </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma3Ej0.md.png" alt="jd"></p>
<p><strong>三家合计全年消费</strong>  </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma3M4J.md.png" alt="all"></p>
<h2 id="文娱数据"><a href="#文娱数据" class="headerlink" title="文娱数据    "></a>文娱数据    </h2><p><strong>观看的电影和电视剧12部</strong></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">名称</th>
<th align="left">序号</th>
<th align="left">名称</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="left">《复仇》</td>
<td align="left">6</td>
<td align="left">《地下交通站》</td>
</tr>
<tr>
<td align="center">1</td>
<td align="left">《活着》</td>
<td align="left">7</td>
<td align="left">《两杆大烟枪》</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">《猎杀U571》</td>
<td align="left">8</td>
<td align="left">《异次元骇客》</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">《喜剧之王》</td>
<td align="left">9</td>
<td align="left">《楚门的世界》</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">《卧虎藏龙》</td>
<td align="left">10</td>
<td align="left">《肖申克的救赎》</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">《虎口脱险》</td>
<td align="left">11</td>
<td align="left">《舌尖上的中国三》</td>
</tr>
</tbody></table>
<p><strong>全年阅读书籍68本</strong>   </p>
<table>
<thead>
<tr>
<th align="left">书名</th>
<th align="left">作者</th>
</tr>
</thead>
<tbody><tr>
<td align="left">《原则》</td>
<td align="left">瑞・达里奥</td>
</tr>
<tr>
<td align="left">《真相》</td>
<td align="left">汉斯・罗斯林</td>
</tr>
<tr>
<td align="left">《1984》</td>
<td align="left">乔治・奥威尔</td>
</tr>
<tr>
<td align="left">《乌托邦》</td>
<td align="left">托马斯・莫尔</td>
</tr>
<tr>
<td align="left">《影响力》</td>
<td align="left">罗伯特・西奥迪尼</td>
</tr>
<tr>
<td align="left">《乌合之众》</td>
<td align="left">古斯塔夫・勒庞</td>
</tr>
<tr>
<td align="left">《动物庄园》</td>
<td align="left">乔治・奥威尔</td>
</tr>
<tr>
<td align="left">《乡土中国》</td>
<td align="left">费孝通</td>
</tr>
<tr>
<td align="left">《生命是什么》</td>
<td align="left">薛定谔</td>
</tr>
<tr>
<td align="left">《美丽新世界》</td>
<td align="left">阿道司・赫胥黎</td>
</tr>
<tr>
<td align="left">《女装入门到精通》</td>
<td align="left">三叶</td>
</tr>
<tr>
<td align="left">《Unix痛恨者手册》</td>
<td align="left">Simon Garfinkel</td>
</tr>
<tr>
<td align="left">《The Little Prince》</td>
<td align="left">Antoine de Saint-Exuper</td>
</tr>
<tr>
<td align="left">《人类简史：从动物到上帝》</td>
<td align="left">尤瓦尔・诺亚・赫拉利</td>
</tr>
<tr>
<td align="left">《你一定爱读的极简欧洲史》</td>
<td align="left">约翰・赫斯特</td>
</tr>
<tr>
<td align="left">…略…</td>
<td align="left">…略…</td>
</tr>
<tr>
<td align="left">《The Old Man and The Sea》</td>
<td align="left">Ernest Hemingway</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>年度报告</category>
      </categories>
  </entry>
  <entry>
    <title>2018年度新闻</title>
    <url>/title/9113b49e/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/10/MurvXF.md.png" alt="2018"></p>
<a id="more"></a>


<h2 id="年度关键词"><a href="#年度关键词" class="headerlink" title="年度关键词"></a>年度关键词</h2><p>(0) 土味<br>(1) 锦鲤<br>(2) pick<br>(3) Metoo<br>(4) 世界杯<br>(5) 区块链<br>(6) 人工智能<br>(7) 问题疫苗<br>(8) 粤港澳大湾区<br>(9) 中美贸易摩擦<br>(10) 改革开放40周年 </p>
<h2 id="十大新词语"><a href="#十大新词语" class="headerlink" title="十大新词语"></a>十大新词语</h2><p>(0) 冰屏<br>(1) 信联<br>(2) 限竞房<br>(3) 进博会<br>(4) 直播答题<br>(5) 消费降级<br>(6) 贸易霸凌<br>(7) 政治站位<br>(8) 大数据杀熟<br>(9) 中国农民丰收节</p>
<h2 id="年度流行语"><a href="#年度流行语" class="headerlink" title="年度流行语"></a>年度流行语</h2><p>(0) Skr<br>(1) 锦鲤<br>(2) 杠精<br>(3) 官宣<br>(4) 真香<br>(5) 佛系<br>(6) C位出道<br>(7) 土味情话<br>(8) 家里有矿<br>(9) 大猪蹄子<br>(10) 确认过眼神<br>(11) xxx了解一下?<br>(12) 一凉凉送给你<br>(13) 燃烧我的卡路里<br>(14) 皮这一下很开心<br>(15) 怎么回事小老弟？<br>(16) 安排得明明白白的  </p>
<h2 id="影响中国年度人物-排名不分先后"><a href="#影响中国年度人物-排名不分先后" class="headerlink" title="影响中国年度人物(排名不分先后)"></a>影响中国年度人物(排名不分先后)</h2><p>(0) 著名导演文牧野（年度导演）<br>(1) 故宫博物院院长单霁翔（年度文化人物）<br>(2) 中国科学院院士王贻芳（年度科技人物）<br>(3) 火箭少女101成员杨超越（年度演艺人物）<br>(4) 中国市长协会顾问陶斯亮（年度公益人物）<br>(5) 清华大学国家金融研究院院长（年度学者）<br>(6) 中国乒乓球协会主席刘国梁（年度体育人物）<br>(7) 著名教育家、南开大学原校长龚克（年度教育人物）<br>(8) 最高人民法院原常务副院长沈德咏（年度法治人物）<br>(9) iTutorGroup创始人、董事长兼CEO杨正大（年度行业领袖）  </p>
<h2 id="年度新闻"><a href="#年度新闻" class="headerlink" title="年度新闻"></a>年度新闻</h2><p><strong>2018.01.01</strong><br>(1) 世界知名的女演员苍井空宣布婚讯，网友齐发祝福。<br>(2) 美国人口普查局估计，今天世界人口约为：74亿4444万3881人。<br><strong>2018.01.03</strong><br>(1) 雪乡发生游客欺诈事件。<br><strong>2018.01.05</strong><br>(1) 女子用身体挡住高铁门引发网友谴责。<br><strong>2018.01.06</strong><br>(1) 贾乃亮发文回应李小璐夜宿门事件，并恳求网友不要伤害家人。<br><strong>2018.01.18</strong><br>(1) 统计局公布2017年GDP为:82.7122万亿元，增速6.9%。<br><strong>2018.01.20</strong><br>(1) 中国作家唐家三少同名玄幻小说《斗罗大陆》上映。<br><strong>2018.02.07</strong><br>(1) SpaceX搭载特斯拉汽车飞向深空，并实现一级火箭回收。<br><strong>2018.02.09</strong><br>(1) 韩国平昌冬奥会开幕。<br><strong>2018.02.12</strong><br>(1) 波士顿动力发布SpotMini机器狗协作开门视频，工业机器人引发失业恐慌。<br><strong>2018.02.16</strong><br>(1) 农历戊戌狗年正月初一，各地喜迎新年。<br><strong>2018.02.19</strong><br>(1) 两男子在紫金山着日本军装拍照，“精日现象”引发热议论。<br><strong>2018.03.03</strong><br>(1) 两会拉开帷幕，选举新的政府领导班子和国家主席。<br><strong>2018.03.09</strong><br>(1) 工信部部长苗圩表示2020年中国要开始6G研发，5G在2019年开始组网服务。<br><strong>2018.03.14</strong><br>(1) 英国首相特蕾莎·梅就间谍被毒害事件对俄罗斯外交官下达驱逐令。<br>(2) 著名科学家霍金逝世，享年76岁。其骨灰安置在威斯敏斯特大教堂，与牛顿，达尔文为邻。<br><strong>2018.03.18</strong><br>(1) 俄罗斯大选，普京获胜，普皇帝将再干六年。<br><strong>2018.03.22</strong><br>(1) 美总统特朗普签署备忘录挑起中美贸易争端。<br>(2) 韩国前总统李明博因涉嫌贪污受贿等16项罪名被批捕。<br><strong>2018.03.28</strong><br>(1) 国内领先的年轻人文化社区哔哩哔哩在美国纳斯达克上市。<br><strong>2018.04.10</strong><br>(1) 共享单车摩拜以37亿美元卖身美团。<br>(2) Facebook CEO扎克伯格就用户数据泄露事件出席国会听证会接受质询。<br><strong>2018.04.11</strong><br>(1) 中国设立海南自由贸易实验区。<br>(2) 国家广播电视总局责成今日头条永久关闭内涵段子。<br><strong>2018.04.12</strong><br>(1) 南海海军举行阅兵式，习出席。<br><strong>2018.04.16</strong><br>(1) 美国商务部宣布未来7年对中国中兴实施敏感产品禁购，引发科技界大反思。<br><strong>2018.04.17</strong><br>(1) 批评鸿茅药酒被跨省追捕的医生谭秦东获得自由。<br><strong>2018.04.19</strong><br>(1) 厦门大学研究生田佳良在新浪微博发表不当言论招致谴责。<br><strong>2018.04.25</strong><br>(1) 欧盟发布人工智能行动计划。<br><strong>2018.04.27</strong><br>(1) 全国人大通过《英烈保护法》。<br>(2) 陕西美脂县中学遭袭击，造成19伤7亡。<br>(3) 韩朝双方首脑在板门店举行历史性会晤。<br><strong>2018.05.04</strong><br>(1) 纪念马克思诞辰200周年，习发表讲话。<br><strong>2018.05.05</strong><br>(1) 郑州空姐乘坐滴滴遇害，滴滴整顿一周。<br><strong>2018.05.11</strong><br>(1) 《复仇者联盟3：无限战争》在中国大陆首映。<br><strong>2018.05.12</strong><br>(1) 汶川大地震十周年忌，民众缅怀死者，追忆往昔。<br><strong>2018.05.14</strong><br>(1) 美国驻以色列使馆迁至圣城耶路撒冷，引发大规模抗议活动。<br><strong>2018.05.18</strong><br>(1) 联想5G投票事件引发舆论，网友批评联想不支持华为。<br><strong>2018.05.19</strong><br>(1) 英国皇室哈利王子在温莎城堡迎娶美国女星梅根·马克尔。<br><strong>2018.06.04</strong><br>(1) 微软公司斥资75亿美元收购源代码托管网站Github，拥抱开源。<br><strong>2018.06.07</strong><br>(1) 中国高考拉开帷幕，00后已长大成人，开始接棒社会建设。<br><strong>2018.06.08</strong><br>(1) 美国能源部橡树岭国家实验室宣布其Summit成为世界上最快超算。<br><strong>2018.06.12</strong><br>(1) 美朝首脑在新加坡举行历史性会晤。<br><strong>2018.06.21</strong><br>(1) 科技日报总编发表演讲“我的国，没那么厉害”，引发热议。<br><strong>2018.06.23</strong><br>(1) 创造101，孟美岐排名第一，王菊能出头？<br><strong>2018.06.28</strong><br>(1) 崔永元通过新浪微博发布阴阳合同照片，揭露娱乐圈黑幕。<br><strong>2018.07.03</strong><br>(1) 中科大潘建伟教授团队实现18光量子纠缠，刷新记录。<br><strong>2018.07.05</strong><br>(1) 普吉岛游船倾覆，47名中国公民死亡。<br>(2) 电影《我不是药神》热映，中国医疗问题在社会引发热议。<br><strong>2018.07.10</strong><br>(1) 美政府公布对中国2000亿美元加税清单。<br><strong>2018.07.15</strong><br>(1) 长春长生问题疫苗引发社会动荡和高层博弈。<br>(2) 世界杯：“高卢雄鸡”法国队以4比2击败”格子军团”克罗地亚队，再次捧起大力神杯。<br><strong>2018.07.26</strong><br>(1) 备受争议的拼多多在美纳斯达克上市。<br><strong>2018.08.04</strong><br>(1) 沈阳疑似发生非洲猪瘟事件，官方加强肉类查验管控及防范措施。<br><strong>2018.08.08</strong><br>(1) 北京奥运会十周年，百姓感叹时间飞快，国家飞速发展进入了智能时代。<br><strong>2018.08.16</strong><br>(1) 红芯浏览器抄袭谷歌Chrome浏览器，假借爱国骗经费。<br><strong>2018.08.21</strong><br>(1) 某博士在高铁霸座，引发舆论谴责。<br><strong>2018.08.23</strong><br>(1) Dota比赛，OpenAI的人工智能队输给人类职业选手队伍。<br><strong>2018.08.24</strong><br>(1) 浙江乐清女孩乘滴滴遇害，社会舆论纷纷指责滴滴再次出事。<br><strong>2018.08.27</strong><br>(1) 昆山龍哥持刀砍人反被杀，反杀者正当防卫无罪释放。<br><strong>2018.08.31</strong><br>(1) 全国人大通过《个税法修正案》。<br><strong>2018.09.02</strong><br>(1) 不知妻美刘强东在美涉嫌性侵被捕。<br><strong>2018.09.10</strong><br>(1) 马云宣布2019年9月10日正式卸任董事局主席，改行当老师，届时CEO张勇将接棒。<br><strong>2018.09.11</strong><br>(1) 房产大鳄万科喊出“活下去”的口号，房地产行业困难重重。<br><strong>2018.09.13</strong><br>(1) 美国苹果公司发布最新产品iPhone XS/XR等，价格上扬但技术创新乏善可陈。<br><strong>2018.09.15</strong><br>(1) 中国游客瑞典撒泼被警察抬出的新闻在国内引发舆论大混战。<br><strong>2018.09.18</strong><br>(1) SpaceX 宣布2023年送日本富豪前泽友作环月飞行七日。<br><strong>2018.09.24</strong><br>(1) 迈克尔·阿迪亚公开证明黎曼猜想，但实际上并未证明。<br><strong>2018.10.02</strong><br>(1) 诺贝奖获得者名单陆续公布。<br>(2) 沙特记者杰玛尔·卡舒格吉因被肢解引发外交冲突。<br><strong>2018.10.03</strong><br>(1) 女星范冰冰因偷税漏税被罚款8.84亿元，人设崩塌。<br><strong>2018.10.16</strong><br>(1) 赵丽颖在微博晒出和冯绍峰的结婚证，并且配文：官宣，随即成为热词。<br><strong>2018.10.20</strong><br>(1) 西湖大学成立，要打造中国的顶级研究机构，清华大学副校长施一公任校长。<br><strong>2018.10.23</strong><br>(1) 港珠澳大桥开通，习出席并发表讲话。<br><strong>2018.10.25</strong><br>(1) 著名电视节目主持人李咏逝世，年仅50岁。<br><strong>2018.10.28</strong><br>(1) 重庆万州公交坠江，事因乘客和司机扭打，而乘客也没有制止。<br><strong>2018.10.29</strong><br>(1) 国际商业机器公司(IBM)斥资334亿美金收购Linux行业佼佼者Redhat。<br><strong>2018.10.30</strong><br>(1) 一代文学巨匠金庸先生逝世，享年94岁。<br><strong>2018.11.03</strong><br>(1) 中国IG战队夺得英雄联盟S8全球总决赛冠军。<br><strong>2018.11.04</strong><br>(1) Wi-Fi联盟公布网络新协议新标准802.11ax，命名为Wi-Fi 6。<br><strong>2018.11.06</strong><br>(1) 美国中期选举，最终民主党赢得众议院，共和党赢得参议院。<br><strong>2018.11.07</strong><br>(1) 美国超微半导体公司(AMD)宣布正式推出7纳米CPU和GPU产品。<br><strong>2018.11.08</strong><br>(1) 美国加利福尼亚州北部比尤特县天堂镇发生山火，烧毁各类建筑约1.8万栋。<br><strong>2018.11.11</strong><br>(1) 第一次世界大战结束100周年纪念日。<br>(2) 双11销售额达2135亿，一年一度的购物狂欢节，网友反映商家先涨价再打折的套路越来越深。<br><strong>2018.11.12</strong><br>(1) 美国好莱坞漫威漫画公司的灵魂人物斯坦·李逝世。<br><strong>2018.11.14</strong><br>(1) 奢侈品牌杜嘉班纳（D&amp;G)辱华事件，明星纷纷用行动予以抗议。<br><strong>2018.11.16</strong><br>(1) 国际计量大会召开，决定千克，安培，物质的量，开尔文四个基本单位采用新标准定义。<br><strong>2018.11.21</strong><br>(1) 蒋劲夫家暴事件引爆舆论，明星是人不是神，光鲜表面下的面目谁知道呢？<br><strong>2018.11.26</strong><br>(1) 南方科技大学贺建奎宣布基因编辑婴儿出生，全球震惊，招致广泛谴责。<br><strong>2018.11.27</strong><br>(1) NASA洞察号探测车登陆火星。<br><strong>2018.11.30</strong><br>(1) 美国前总统，乔治·赫伯特·沃克·布什逝世，享年94岁。<br><strong>2018.12.01</strong><br>(1) 习同特朗普达成共识，停止贸易战。<br>(2) 华为孟晚舟被加拿大政府扣押，加政府回应：知情但未参与。<br><strong>2018.12.02</strong><br>(1) 吴承恩故居事件发酵，六小龄童名声败坏。<br><strong>2018.12.06</strong><br>(1) 微软宣布其Edge浏览器采用Chrome内核，浏览器大战进入下一个阶段。<br><strong>2018.12.08</strong><br>(1) 中国嫦娥四号发射成功，开启人类首次月球背面软着陆探测之旅。<br><strong>2018.12.10</strong><br>(1) 旅行者2号飞离太阳系进入深空，距地球超过110亿英里。<br><strong>2018.12.11</strong><br>(1) 经济下行，各大互联网公司裁员不断，互联网寒冬来临。<br><strong>2018.12.18</strong><br>(1) 迫于压力，中国定制版谷歌浏览器项目被google公司关闭。<br>(2) 庆祝改革开放40周年大会在人民大会堂隆重举行，习发表讲话。<br><strong>2018.12.19</strong><br>(1) Ofo在线排队退押金人数超过千万，北京总部楼下消费者排长队退押金。<br><strong>2018.12.20</strong><br>(1) 阿娇（钟欣桐）结婚，张柏芝此前公布已生育第三胎。<br><strong>2018.12.22</strong><br>(1) 全国研究生入学考试拉开帷幕，电子科大命题出现重大事故，院长已被停职。<br><strong>2018.12.25</strong><br>(1) 丁香医生发文揭露天津权健公司的保健帝国和传销式套路。<br><strong>2018.12.26</strong><br>(1) 日本宣布退出国际捕鲸协会，捕杀鲸鱼上瘾了。<br><strong>2018.12.27</strong><br>(1) 中国北斗实现全面组网，正式开始提供全球导航服务。<br><strong>2018.12.29</strong><br>(1) 华为宣布2019年5G试商用，2020年正式商用。<br>(2) 元旦将至，寒潮降临，南方多地出现降雪，“南方也要供暖气”的呼声高涨。<br><strong>2018.12.31</strong><br>(1) 习发表新年贺词：我们都是追梦人!   </p>
]]></content>
      <categories>
        <category>年度新闻</category>
      </categories>
  </entry>
  <entry>
    <title>开源精神:Linux</title>
    <url>/title/d8add382/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2018/10/16/idZXSf.jpg" alt="Linux" title="Linux项目发起人:Linus"></p>
<a id="more"></a>

<h2 id="Linux的好，谁用谁知道"><a href="#Linux的好，谁用谁知道" class="headerlink" title="Linux的好，谁用谁知道!"></a>Linux的好，谁用谁知道!</h2><p>如果说，有人不知道Linux或者Linus(林纳斯)的话，我认为这只是一件普通得不能再普通的事了；但是，有人不知道安卓(android)吗？有吗？但凡是一个学生，不管小学生抑或是大学生，人人都知道安卓，即便用的是Apple家的产品，他也不可能不知道安卓。可见，安卓非常出名，实际上，今天繁荣的互联网世界背后，安卓大有功劳。可是，人们就是不知道Linux。</p>
<p>说起Linux，许多人都是摇头，要不是看不上它的黑框框就是嫌弃上面没有Office，反正Linux历来不受大众喜爱。可用Linux做的安卓却倍加受宠，这也说明，Linux能得到大众的喜爱，只是他们喜爱的是Linux以安卓出现的样子，包装得好看了，大家就喜欢了，一漏出原型，众人又摇头叹气。</p>
<p>在过去的几年里，我在Linux上花了许多时间，最初完全不懂，系统也是傻瓜式的安装，反正就安好了，就开始用。那时候完全不懂电脑，即便会用Office，会写文档，但是，现在看来那就是三脚猫功夫，充其量算是会点鼠标罢了。慢慢的，随着学习的深入，我发现，Linux真是个宝啊，软件多，安装快，够安全，够稳定，功能逆天，手机端，桌面端，服务器端，嵌入式，跨平台，甚至还能连接卫星。这些发现让我精神振奋，有如发了笔大财。今天，我已经完全适应并爱上了Linux，Windows系统也只有用部分软件时才打开，而在Linux下工作成了我的常态，研究生阶段开始，每天三小时以上用在了Linux系统上，现在这些文字也是在Linux下用Vim写的。用Vim或者Emacs真是一种享受和解放，因为输入文字不需要鼠标，一切操作都可以用简单的指令解决，写作效率提升至少百分之50以上。所以，作为信息时代的你，为什么不用Vim写作呢？</p>
<h2 id="Linux是什么"><a href="#Linux是什么" class="headerlink" title="Linux是什么?"></a>Linux是什么?</h2><p>这个问题每个人有每个人的看法，我的看法是:</p>
<blockquote>
<p>Linux是一个强大安全稳定的操作系统内核，是一种能解决绝大多数用户问题的真正的先进技术。</p>
</blockquote>
<p>GNU/Linux就像大家熟知的Windows一样，是一种操作系统，是一个远远优于Windows的系统，该系统诞生于上世纪90年代，并在10年前生下了安卓。说起Linux就不得不提他的创始人Linus，也就是这位大神!<br><img src="https://s1.ax1x.com/2018/10/16/idZXSf.jpg" alt="Linux" title="Linus对英伟达表达不满"></p>
<p>正是他对学校教学所用的Minix系统的不满，使他谋生了自己写一个操作系统的念头，并且坚持了下来。在他21岁的时候，他只是芬兰赫尔辛基大学的一名大学生，他一个人独立的写出了Linux的第一版，时间为1991.8.25.<br>起初起名为Frex，意为Free<br>Unix:免费的Unix。只是当Frex传到服务器上保存时，他的小伙伴觉得干脆把Linus的名字修改一下，用Linux做为保存Frex的文件夹(目录)名。以后，越来越多的人就用Linux来指代这个系统了，所以，Linux的名字不是Linus自己用自己的名字起的，因为，当时的他就只是为了玩一把，就是写了个怪胎，只是没想到越发展越强大，越来越多黑客加入了该系统的开发，很快这个系统就初具规模，并通过互联网传播到了世界各地。今天，该系统(实际上是一个内核)仍然由Linus领导，全球各个角落的人通过互联网协同工作，协力推进该项目的发展。像谷歌，微软，Facebook，阿里巴巴等大的互联网公司都在为该项目贡献代码，该项目也成了地球上最大跨时最久的开发项目，到现在都还在开发，代码已超过2500万行，一个人一辈子也不可能看完。</p>
<h2 id="1990那个年代"><a href="#1990那个年代" class="headerlink" title="1990那个年代"></a>1990那个年代</h2><p>1990年，中国还处在农业社会，那时的世界与今天的世界是十分不同的，人们无法用电话通话，沟通只能靠书信，那时候是真正的家书，贸易不发达，人口流动也不是那么频繁，改革开放也才稍显威力，然而国外的开源运动却搞得如火如荼，即将进入一个崭新的时代。1991年Linus花了三千五百美元，买了台电脑，装上了Minix，却发现上网老是出问题，干脆自己写一个处理工具，然后由这个小工具慢慢发展成了一个大的内核。那时候正是开源时代，由MIT的理查德.斯托曼创建的GNU项目也搞得风生水起，但是GNU有工具没有系统核心。而Linux刚好补上了这个空缺，两相结合，颇为完美，这样，结合GNU众多优秀的系统软件，GNU/Linux横空出世，并迅速得到了全球各地的开发人员的喜爱。开放源代码的理念一直深深的植根于理查德的脑中，他提出了GPL通用公共许可协议，完全开源了源代码，所有人都可以修改和再发布。这样的理念在有的人看来太危险了，通常的公司都会把源代码保护好，要是被谁用了还要打官司告对方，怎么会完全公布呢?可是，人家斯托曼就是玩得不一样，实际上他是被麻省理工学院那群人给气了才跑出来自己建立GNU的，他确实做到了，这很了不起。<br>95年，中国开始有了互联网，但是用Linux的肯定不多，那时长城也还没有，一切都是同世界互联，也就20多年，谁能想到今天的互联网会如此庞大繁荣，如此活力焕发呢?</p>
<h2 id="开源精神"><a href="#开源精神" class="headerlink" title="开源精神"></a>开源精神</h2><h3 id="技术模型铁道俱乐部的黑客们"><a href="#技术模型铁道俱乐部的黑客们" class="headerlink" title="技术模型铁道俱乐部的黑客们"></a>技术模型铁道俱乐部的黑客们</h3><p>在上世纪，大约1958年，在MIT(麻省理工学院)，有着IBM产的超大的计算机，占据一整个房间。一些不安分的学生总是想摸摸这台大机器，运行他们的程序。可是，即便是得到特权的学生也只能由操作员为其运行程序。这群学生都是来自一个喜欢铁路模型的俱乐部–技术模型铁道俱乐部。该俱乐部发明的术语是:设备中零件不工作了叫“losing”，当零件坏了那就说它“munged”，天天上课的人就是个“tool”，如果一个项目只是参与其中就会带来莫大的乐趣，那么就叫“hack”<br>那时MIT的约翰.麦肯锡在电气工程学院教授一门在今天称为“人工智能”的课，尽管当时大部分人都不看好这门技术，但是铁道俱乐部的这些捣蛋鬼都选了该门课程，并在AI实验室扎根了下来。</p>
<p>“hack”最初大体就是由这群MIT的学生发明的，干事效率高的人自称为“hacker”(今天翻译为黑客)。这群黑客的伦理是:</p>
<blockquote>
<p>对计算机的访问应该是不受限制的，完全的，任何人都有动手尝试的权利。</p>
</blockquote>
<p>他们相信把东西拆开而理解其内部原理并改进是重要的，任何试图阻止他们这样干的行为都是不被允许的</p>
<blockquote>
<p>信息应该可以自由获取<br>不能迷信权威<br>计算机让世界更美好</p>
</blockquote>
<p>这些是黑客们不断完善的信条，经过众多黑客的共献，AI实验室成了黑客伦理的化身。</p>
<h3 id="最后一名黑客"><a href="#最后一名黑客" class="headerlink" title="最后一名黑客"></a>最后一名黑客</h3><p>大约在1971年，一位喜欢计算机技术的天才从哈佛退学并加入了MIT，并同样加入了AI实验室，他就是斯托曼。在AI实验室，他们一起搞技术，写程序，分享黑客精神。直到一天，实验室的黑客们为了生计而被公司挖走，他们都走了，剩下斯托曼一个人，他很伤心，因为他为之奋斗的实验室已经分崩离析了，人走了，就什么也没有了。</p>
<p>为了推广黑客伦理，斯托曼离开了MIT，并于1983年，创立了GNU(GNU is Not<br>Unix)。他把自己的理念都融入到了GNU里面，设置了十分霸道的GPL通用公共许可协议:</p>
<blockquote>
<p>凡是用到了GPL协议里的代码，那么你的整个产品都必须开源。</p>
</blockquote>
<p>他想通过GNU计划继续推广他的黑客伦理，让更多的人使用计算机，无障碍地查看和修改代码，完善产品。<br>斯托曼几乎就是地球上最后的黑客了，现在看到的黑客都是第四代，第五六七代黑客了。实际上，今天的黑客更多的是骇客，他们喜欢搞破坏而不是分享理念，推动开源的发展。</p>
<h3 id="GNU-Linux"><a href="#GNU-Linux" class="headerlink" title="GNU/Linux"></a>GNU/Linux</h3><p>时间来到90年代，当Linus把Linux推向互联网时，GNU计划发现这正是他们需要的，于是，GNU/Linux横空出世，结合双方的优点，Linux发展得十分顺利。人们对开源持积极态度，即便有众多公司把代码看成机密，但是人们对获取源代码并修改的意愿一直存在。而Linux是完全开源的，任何人都可以下载并查看，修改<a href="https://www.kernel.org/" target="_blank" rel="noopener">源代码</a>。插一句，腾讯的企鹅最初是为了向Linux的标志，也就是下面这只企鹅致敬，最后由投票选出的。Linux企鹅先于腾讯出现，看看这两支企鹅，每一只的威力都是巨大的，开源确实推动社会发展进步。<br><img src="https://s1.ax1x.com/2018/10/18/iw0m5R.jpg" alt="Tux" title="Linux吉祥物:Tux"></p>
<h3 id="今天的开源世界"><a href="#今天的开源世界" class="headerlink" title="今天的开源世界"></a>今天的开源世界</h3><p>今年，微软收购了Github这个全球最大的开源集散地，最大的男性交友网站，并且承诺继续维持原有的运作模式，越来越多的公司也都开始采用开源产品，因为</p>
<blockquote>
<p>免费<br>有人打补丁<br>开源产品可迅速上线使用</p>
</blockquote>
<p>似乎，今天又回到了开源运动火热的年代，不知道斯托曼现在怎么看这个世界。但是不管怎么说，要感谢这些黑客和天才，没有他们，就没有安卓，没有今天繁荣的互联网世界!<br><img src="https://s1.ax1x.com/2018/10/18/iwwbgf.jpg" alt="stallman" title="自由软件之父:理查德.斯托曼"></p>
]]></content>
      <categories>
        <category>互联网</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>十年</title>
    <url>/title/bdfafec0/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2018/10/13/iNhyfH.jpg" alt="我们的十年" title="我们的十年"></p>
<a id="more"></a>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=230 height=86 src="//music.163.com/outchain/player?type=2&id=2116549&auto=1&height=66"></iframe>

<p>此文成于2018.5.12汶川大地震十周年忌，今日将其发表。文中回顾了十年来我视角下的世界变迁，限于记忆和篇幅，文中每一句话均对应一个历史事件和重大的社会发展阶段！愿诸君共缅怀这段时光，这十年是我们90后真正成长并接过社会发展重担的十年，是我们成家立业，求学经商变迁的十年，也是我们90后追求自由，幸福，公平生活的十年，回顾于此，心中颇多感触，噫吁嚱！</p>
<blockquote>
<p>   十年前稚气未脱是小孩，十年后老司机终日开小差。</p>
</blockquote>
<blockquote>
<p>   十年来，腹胸腰背有所长，<a href="https://baike.baidu.com/item/父亲/1465141" target="_blank" rel="noopener">父母</a>两鬓却微白，额间细纹埋！</p>
</blockquote>
<blockquote>
<p>   十年前，绿皮火车慢徘徊，今朝高铁祖国遍地开。</p>
</blockquote>
<blockquote>
<p>   北上广深，四大神针，撑起异度文明。</p>
</blockquote>
<blockquote>
<p>   十年前安识灰霭？<a href="http://blog.sina.com.cn/s/blog_5b2684c70102vgqg.html" target="_blank" rel="noopener">美帝普及</a>全民怼雾霾。PM2.5,你好坏！</p>
</blockquote>
<blockquote>
<p>   嫦娥先去，玉兔又来，蛟龙今又下海，中华科技，日新月异，遍地人才栽。</p>
</blockquote>
<blockquote>
<p>   智能时代找AI，<a href="https://baike.baidu.com/item/%E6%96%B0%E5%9B%9B%E5%A4%A7%E5%8F%91%E6%98%8E/1549722" target="_blank" rel="noopener">四大新贵</a>，人人爱，人人为你站台！</p>
</blockquote>
<blockquote>
<p>   零八奥运今犹记，如今君又来，<a href="https://baike.baidu.com/item/2022年北京冬季奥运会/12061628" target="_blank" rel="noopener">北张二市</a>等着你，华夏必将更精彩。</p>
</blockquote>
<blockquote>
<p>   全球变暖，气温不要升太快？烤化两极冰盖，直把东京热坏！</p>
</blockquote>
<blockquote>
<p>   十年前慧聪网自诩掌平台，十年来，马云怪才，缓缓来，阿里宝贝升级打怪，一幕幕，一招招，呈现女性最爱！</p>
</blockquote>
<blockquote>
<p>   来的终究会来，任你癫狂，我无惧任何祸灾。</p>
</blockquote>
<blockquote>
<p>   十年前它颐指气使，暗控国之命脉，如今杀出个大boss太厉害！</p>
</blockquote>
<blockquote>
<p>   什么是谈笑风生潇洒自在，什么又是香港记者跑得快？全都是苟屁，给我滚开！</p>
</blockquote>
<blockquote>
<p>   有人偏爱“闷声大发财”，有人好色又贪财，为祸妇女，<a href="http://www.360doc.com/content/11/0929/08/7381203_152057015.shtml" target="_blank" rel="noopener">奇怪日记</a>怀中揣！</p>
</blockquote>
<blockquote>
<p>   反腐大戏扣人心怀，贪腐代表犹记陕西<a href="http://media.sohu.com/20130121/n364175335.shtml" target="_blank" rel="noopener">表哥杨达才</a>，车祸现场，竟能喜笑颜开？</p>
</blockquote>
<blockquote>
<p>   见你搂财，也见你人走茶凉倒台，监狱中索未来，回味往昔，终识儿时田园时光最自在，邻家姑娘最可爱！</p>
</blockquote>
<blockquote>
<p>   金融危机，华尔街哭泣，我有<a href="https://baike.baidu.com/item/%E5%9B%9B%E4%B8%87%E4%BA%BF%E8%AE%A1%E5%88%92/8497463" target="_blank" rel="noopener">4万亿</a>，高楼遍地林立，房奴满街无头绪，可气，可气！</p>
</blockquote>
<blockquote>
<p>   十年前汶川挂人心怀，逝者不在，十年来，蜀地重开，重建家园最实在，我们仍要打牌，犹爱吃菜，家有好女养，贤胥万里来！</p>
</blockquote>
<blockquote>
<p>   十年前<a href="https://baijiahao.baidu.com/s?id=1583491930247443643" target="_blank" rel="noopener">安卓出生</a>是小孩，十年来，iphone来到X时代，果粉卓粉，相杀相爱,手机反复买，旧的不去新的不来。</p>
</blockquote>
<blockquote>
<p>   网络成了新平台，主播变大拿，网民成拥虿！键盘侠治国滔滔不绝，一句不对，怼你祖宗十八代！</p>
</blockquote>
<blockquote>
<p>   猫狗是萌宠，Panda最可爱，Bilibili的小哥哥小姐姐安在？日漫<a href="https://baike.baidu.com/item/一人之下/19691179" target="_blank" rel="noopener">国漫</a>，腾讯动漫，马化腾手握两撒手锏!</p>
</blockquote>
<blockquote>
<p>   Dota传奇，英雄联盟奇迹，今晚吃鸡，大吉大利！</p>
</blockquote>
<blockquote>
<p>   直男癌，绿茶婊，帽子扣得真不少，千好万好，愿意傻傻关心你的人才最好！</p>
</blockquote>
<blockquote>
<p>   <a href="https://baike.baidu.com/item/海天盛宴/6932418" target="_blank" rel="noopener">海天盛宴</a>，人体器官，二代们使劲撒欢，王思聪炮轰众客官：不要脸！</p>
</blockquote>
<blockquote>
<p>   十年前下馆子，今有外卖，外卖外卖，信誉犹在？</p>
</blockquote>
<blockquote>
<p>   十年前人等车，十年后车等人，人车车人分不清，滴滴伴你<a href="https://new.qq.com/omn/20180826/20180826G0H18K.html" target="_blank" rel="noopener">安全出行</a>？</p>
</blockquote>
<blockquote>
<p>   十年前，购物逛街，十年后购物上网，双11成购物节，单身狗遭了一劫又一劫。</p>
</blockquote>
<blockquote>
<p>   过年回家，七大姑八大姨笑哈哈，男友哇，女友哇，赶快给我<a href="https://baike.baidu.com/item/每逢佳节被逼婚/5708171" target="_blank" rel="noopener">带回家</a>！</p>
</blockquote>
<blockquote>
<p>   全民健身跑起来，约你，来不来？</p>
</blockquote>
<blockquote>
<p>   通信便利，交心不在，相顾无言，低头微信畅开怀—还真是怪！</p>
</blockquote>
<blockquote>
<p>   空间朋友圈，秀完美食秀恩爱，可劲儿使能耐，秀得恩爱，死得最快！众人还把你埋汰！</p>
</blockquote>
<blockquote>
<p>   计划生育，国之大计，终遭抛弃，解放妇女生育权利。</p>
</blockquote>
<blockquote>
<p>   可男多女少，女友不好找，Gay佬闺蜜气氛诡异，似塑料姐妹花小猪佩奇。</p>
</blockquote>
<blockquote>
<p>   十年变化可真是快！！！来到了什么新时代。</p>
</blockquote>
<blockquote>
<p>   这是一个什么样的时代？这是学‘习’的时代，知识千金难买，自由成为真爱！</p>
</blockquote>
<blockquote>
<p>   90来00来，一代又一代，绽放青春的精彩，定义国家的未来，说什么90后无用，可识天生我才？</p>
</blockquote>
<blockquote>
<p>   这是一个新时代，梦想仍在，小伙子不要怕，摔倒后侬可爬起来！</p>
</blockquote>
<blockquote>
<p>   愿君观后莞尔笑颜开，奋力拼搏方可逐梦未来！</p>
</blockquote>
]]></content>
      <categories>
        <category>回忆</category>
      </categories>
      <tags>
        <tag>小杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈现代操作系统历史</title>
    <url>/title/500c6ff0/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5t06P.md.jpg" alt="OS">　</p>
<a id="more"></a>

<h2 id="智能手机操作系统"><a href="#智能手机操作系统" class="headerlink" title="智能手机操作系统"></a>智能手机操作系统</h2><p>智能手机的使用已十分普遍了。不论苹果或是安卓系统的智能手机都拥有巨大的市场，拥虿甚广！可是，有谁能想到这个如此受欢迎的东西也就诞生十来年。2007年11月份，安卓从加州山景城谷歌公司溜出，并迅速引领了移动互联网的发展！</p>
<p>大概在2000年代，手机市场还是由诺基亚统治，一个做木材生意的公司，把手机做到全球第一确实了不起。与此同时，一名叫做<a href="https://baike.baidu.com/item/AndyRubin/7170474" target="_blank" rel="noopener">Andy Rubin</a>的小伙子创立公司并开发了一种新的相机系统，用于图片处理。但是相机市场的下滑，迫使该公司转向于手机系统。他利用开源的<a href="https://baike.baidu.com/item/linux/27050" target="_blank" rel="noopener">Linux</a>稳定内核作为其手机系统的核心，成功开发出了一种能上网的系统，后来这个系统在2005年被谷歌收购，经过进一步开发，于2007年11月释出，这就是安卓。于此同时，苹果公司也发布了一款手机系统，它的内核来源于BSD版本的Unix，同Linux属于同族不同分支的系统。我们可以这样认为，即苹果系统是安卓系统的叔叔。他们的共同祖先是贝尔实验室的Unix系统。当然，这个贝尔实验室还出过七个诺贝尔奖，互联网和C语言，C++语言也诞生于此。</p>
<h2 id="PC操作系统"><a href="#PC操作系统" class="headerlink" title="PC操作系统"></a>PC操作系统</h2><p>除了手机操作系统，我们常见的还有电脑上的操作系统，这种系统发迹于上世纪的美国，最开始分为多个派别，后来大体两派：一派是比尔盖茨的微软，一派就是各大公司和大学，实验室合作的或独立开发的系统，其中贝尔实验室的Unix操作系统是最成功的。今天大家看到的Windows10操作系统则源于1981年比尔盖茨花5万美元从Seattle Computer Systems（西雅图计算机系统公司)买的DOS系统(磁盘操作系统，就是一个黑框框)。聪明的比尔盖茨结合IBM的PC电脑，售卖该DOS系统，赚取大量利润，并以此为基础改进DOS系统，并最终演变出了Windows NT系统，也就是Windows95，Windows98，Windows2000。而后Windows NT不断进化，诞生了Windows XP，Windows Vista, Windows 7, Windows 8/8.1，Windows10。Windows系统是一个很好用，但却是一个很复杂而很难学习的系统，其内部为了兼容以往的软件和系统，保留了大量不合宜的代码，这也就导致Windows是地球上架构最烂的系统，最容易受到黑客攻击的系统。客观讲，Windows是个很成功的产品，但却不是像苹果那样的杰作。Windows的发迹，主要是因为比尔盖茨商业头脑太厉害，少有干得过他的。</p>
<p><img src="https://s1.ax1x.com/2018/10/13/iNWX2n.jpg" alt="windows" title="来源:百度图片,Widows"></p>
<p>另外一个电脑操作系统是苹果的Mac os x操作系统，源于乔布斯被苹果公司开除后自创的达尔文系统，底层依旧是Unix核心。当乔布斯重回苹果时，带回了该系统，并开发出了苹果系统。苹果系统定义了现代操作系统的图形用户界面，下拉菜单，按钮，鼠标等控件。微软的电脑界面，菜单等等都是学的苹果的，要不是苹果，微软可能还是有一个黑框框。</p>
<p><img src="https://s1.ax1x.com/2018/10/13/iNhU61.jpg" alt="Mac os" title="来源:百度图片,Mac OS"></p>
<p>第三类电脑操作系统是Unix操作系统的变种Linux衍生版，因为Linux只是一个内核，通过结合不同的系统软件就是不同的款，但是核心一致。所以这一类操作系统特别多，因为开源，任何人可以拿过来改一下并发布。我现在写这篇文章的操作系统是基于Linux内核的Ubuntu(我现在已几乎不用Windows了)。目前Ubuntu是最成功的桌面版Linux操作系统，其他的Linux操作系统还有Debian，Centos，Redhat约上百款。安卓也是基于Linux的，可见Linux非常强大，手机端和电脑端都吃得开。</p>
<p><img src="https://s1.ax1x.com/2018/10/13/iNhwm6.png" alt="Ubuntu" title="来源：我的桌面，Ubuntu，套了个Mac桌面"></p>
<h2 id="服务器操作系统，超级计算机操作系统"><a href="#服务器操作系统，超级计算机操作系统" class="headerlink" title="服务器操作系统，超级计算机操作系统"></a>服务器操作系统，超级计算机操作系统</h2><p>由于这一类是属于行业的操作系统，民间几乎不可能看到，但是它却在背后默默的为亿万人民服务。<br>比如你购物需要进行交易结算，用任何的App都需要后台支持，这些都要靠服务器操作系统来处理。目前服务器操作系统分为两大阵营，一派微软，一派Linux。微软在开发PC版本的操作系统的同时也开发了服务器操作系统，目前60%左右的服务器操作系统是Linux，因为它架构好，易修改，稳定。服务器必需要稳定，试想你在付款，一下卡了，你的钱不就白花了吗？这也是Linux的强项，Linux的一款叫做Centos的系统据说创下过５年不关机不出事故的记录，对比微软动不动就出事故，犯卡，Linux能统治服务器自然就合情合理了。</p>
<p>另外一个很重要的操作系统是超级计算机的系统，因为超级计算机管理的存储和运算节点十分的庞大，所以系统必需稳定好用。而Linux刚好满足这些特点，Linux再次占领该领域，目前，世界前500强超级计算机全都使用Linux系统，中国的天河，神威太湖之光也是中国基于Linux内核自主研发的。</p>
<h2 id="物联网系统"><a href="#物联网系统" class="headerlink" title="物联网系统"></a>物联网系统</h2><p>随着社会生产力的发展，传统互联网的使用有了更高的追求方向，专家们提出了基于万物互联的物联网概念。物联网就是把所有能连网的电器都用网连起来，比如空调，冰箱，汽车，卫星，手机，智能手表，智能自行车，智能椅子，甚至是床都可以用网连起来。人们会问，床不是没网吗？现在没有，可只要未来有需要，嵌入式工程师们早晚会开发出来的，只需对相应硬件给予软件，配上网络。目前，专家们提出的物联网，在我看来是通过中央控制器控制各种不同的物理器件，获取大数据存储在云服务器上，结合新的技术，例如人工智能，开展新的服务模式，为消费者提供更好的产品和服务。针对不同的器件，功能不同，就需要设计不同的操作系统，显然空调和床的功能不一样，这不像手机，品牌不同，但功能差不多。目前，众多物联网公司正利用Linux内核开发物联网操作系统，也就是嵌入式系统，其实安卓系统也是一款嵌入式操作系统。我认为，今后几十年，我们的家庭和城市治理要更多的依靠物联网基础设施，人们的生活便利程度不断提高，未来的社会将是一个相当程度靠网络管理的高度智能化的社会。当然，政府肯定还存在，但是重要性会下降，它不会像今天那么重要。可能在我们这代人四五十岁的时候，我们的家主要是有智能器件打理，家政服务就不再需要了。各种专门仪器会处理扫地，洗衣，烧水，洗碗，铺床等等工作。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>按目前的分类法，操作系统分为手机端，服务器端，桌面端，物联网端。其中Windows在桌面和服务器端能做；苹果在手机和桌面端能用；Linux在手机，桌面，服务器，物联网上都能做！看来Linux是个非常有用的技术，这也是我下心学习它的原因，因为我赌定它会成为未来几十年社会发展的动力。未来，随着新技术的出现，应该还会有新的系统出现，可能就衍生自Linux。未来的世界将是万物互联的世界，我家的冰箱可能和你家的冰箱在聊天，在恋爱，谁说机器就不能恋爱呢？洗碗机可能和灶台吐槽主人的烹饪技术，阳台看花的仪器可以向你报告今天该花吸收的二氧化碳量，桌子和椅子组成一家人为你服务。这样想想，感觉未来真是挺美好的，我们的生活将和智能的器件关联起来，人类的历史也会是人和物的历史。人类只能走这条智能化，信息化的路，所以，让我们为这一天的早日到来努力奋斗吧。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>OS</tag>
      </tags>
  </entry>
</search>
