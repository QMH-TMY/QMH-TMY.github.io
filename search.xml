<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[5G之后是6G？]]></title>
    <url>%2Ftitle%2Ffb817f20%2F</url>
    <content type="text"><![CDATA[5G商用今天上午，2019中国国际信息通信展在北京国家会议中心召开。在5G商用启动仪式上，工信部与中国移动、中国联通、中国电信、中国铁塔共同宣布5G正式商用。11月1日，也即明天，各地的5G套餐就可以办理了。对于大部分消费者来说，有尝鲜的意愿，但目前价格还比较贵，真正办理的估计不多。但不管贵不贵，速度快倒是真的。 运营商的新玩法5G和4G相比，有了很多不同的情况，尤其是在运营商层面。4G时代各大运营商相互竞争，5G时代，运营商得抱团取暖，合作共赢。上面已经表明，电信和联通要共同建设通信基站，以往各自建塔的模式玩不转了，唯一能独立搞的就只有移动。5G，使用的波更短，意味着要使用更多的基站，而每个基站都挺贵的，所以总体基站建设费用会比较高，从目前公布的基础套餐价最低为128也能看出这点。据最新数据估计，5G基站建设得分好几年，总投资费用高达数万亿。 从频段的分配上也能看出，这两家拿到的5G频段加起来还没人家移动一家多，唯一的好处是，联通电信的频段处于最成熟的区间，布置网络要容易些。 移动 联通 电信 260MHz 100MHz 100MHz 时代变了，以前的冤家，现在成了亲家，仇人成友人。联通和电信多年发展的失利致使移动独大，只好两家合纵连横同移动拼，真真是有点儿三国演义的味道，然而现实是深刻的，利益是重要的，脸面是可以不要的，所以两家得合作。 除此之外，运营商和用户在基站的问题上还存在一个博弈过程。用户的要求是，基站不能放我家旁，但信号必需好，放在别人家旁我没意见。所以逼着运营耍手段，给基站来个大隐身。路边的井盖，路灯，房顶的空调机，绿化树，排气管等等全都成为了基站的新替身。城市人从来看不到基站，但它们却一直在你身边。 你以为是绿化，其实是基站。 你以为是热水器，其实是基站。 请勿践踏花草，其实里面也是基站，一体两用。 5G基站大幅度增加，耗资巨大，必然导致有的地方投资薄弱，很多地方未来几年都将没有5G信号，所以买5G手机先确认自家信号，别买了用不了。下表中的城市是首批开通5G的城市，其他城市可能要等两年左右。 直辖市 省会城市 北京，上海 成都，杭州 天津，重庆 南京，武汉等 单列市 重要城市 深圳，青岛 雄安，苏州 宁波，厦门 温州，张家口 大连 我在想，要是5G时代，联通和电信合起来还干不过移动，是不是意味着权力的洗牌，会不会拆分一家合并到另外两家中去？运营商的套路是丰富多样的，不知未来的套餐又会出什么新花样，反正消费者要看清楚，别被忽悠。 5G应用场景猜测前段时间在B站上，北京邮电大学的何同学试用了5G，并就未来的应用做了讨论。他借鉴了4G刚出来时人们的反应，表明预测未来的应用确实是挺难的。视频：5G有什么用 尽管很难预测，但我还是大胆猜猜5G的应用。 预 测 远程医疗 智慧施政 智能家具 工业物联 远程医疗：一是指优秀的专家可以远程做手术，节约时间和交通成本。二指医生可以通过网络对家里的病人进行指导和开展医疗服务。4G让人吃饭不出家，点外卖；5G就让人生病不出家，点医生，点药。未来的医生可能会享受很高的社会地位，他们通过提供更好的服务，赚取高额的佣金。同时，这种新的医患关系避免物理接触，保护了医生。 智慧施政：民智越开，则政府越弱，一旦老百姓掌握了信息，那么政府的很多服务可以取消，政府不能随便制定政策，很多政府服务要交给智慧系统，很多政府职权要还给百姓。 智能家具：物联网时代，硬件大爆发，未来的家庭，联网的器件增多，冰箱，空调，桌子，椅子可能都有某种程度的网络功能，并提供相应的服务。 工业物联：打造全新的制造链和运输链，智能驾驶，智能运输系统，同时可能出现新的产业联盟，类似今天存在的各种协会。 5G中的Polar码Polar码是5G中的一种编码技术，属于5G核心技术。Polar码源于2008年的一篇论文Channel Polarization。作者是土耳其科学家埃达尔·阿勒坎（Erdal Arikan）。1981年，阿勒坎在位于加州理工学院获得本科学位，随后他去了美国的另一所名校——麻省理工学院，于1985年得到电子信息工程专业的博士学位。阿勒坎的博士生导师是美国人罗伯特·加拉格（Robert Gallager）教授，而加拉格的导师，也就是阿勒坎的师爷，则是大名鼎鼎的信息论鼻祖香农。原本以为只是个牛叉人物，没想到竟然是香农大佬门徒。不过想来也对，不是这个领域的人，又如何搞出这些编码呢？ 华为公司在论文出来后，就调集人手攻克论文提出的编码，并最终得以攻克。前几年，华为推动的Polar码在3GPP会议上同LDPC码共同确立为5G技术，LDPC管数据信道，Polar码则控制通信信道。Polar码中，重要的是一个矩阵问题，解决了矩阵问题，编码问题就解决了。当然，我不是专家，不太懂，无法发表更多看法。 值得一提的是，美国人推动的LDPC就是阿勒坎的师傅加拉格搞出来的，最终两师徒的理论均成为5G核心技术，美国选了师傅，中国选了徒弟，然后相互竞争，相互斗。 图为华为创始人任正非为阿勒坎颁奖，感谢其在该领域的杰出贡献 除了编码，5G中还有其他的核心技术，包括OFDM（正交频分复用），MIMO（多天线），新的组网结构。在Erik Dahlman的《5G NR》一书提到 “Both LTE and NR are developed by 3GPP and hence have a common background and share several technology components. Many of the design choices in NR are also based on experience from LTE. Furthermore, LTE continues to evolve in parallel with NR and is an important component in 5G radio access.” 可见，4G (LTE)中有些技术是用到5G里面的，自然5G和4G是兼容的。 6G研究2018年两会期间，工信部部长苗圩表示，中国已开展6G的研发，预计2030年试使用。中国通信产业要做到，用一代，产一代，研一代。 图为工信部长苗圩接受记者访问，并透露6G研究情况 目前的5G，仍然有缺点，很多缺点就是4G(LTE)自带的，在5G仍然没有解决，所以6G要首先解决这些问题，不然下一代通信技术不可能得到发展。5G都这么快了，6G又该如何？这种问题，想象力不够，水平不够，想不出来。但从社会生产力变革的发展和国家对通信行业的投入来看，未来搞通信的人还将大有作为。这个产业涉及的硬件如芯片，天线，软件如算法，智能调度等将得到进一步发展。当然，6G现在还处在概念期，华为也刚开始投入研究，社会上谈得不多。 我个人看好6G，换句话说，我认为未来从事计算机，通信，算法，芯片，天线等行业的人将大有可为。知道了这些，怎么选路就很清楚了。人一辈子能碰上一个技术浪潮，加之努力，就可能过得很好，何况处在人类技术大爆发的年代，新技术正不断冒出，新思想正时刻迸发。人人都讲抓住机遇，但机遇也要靠自己奋斗，不是喊喊口号就行。新的技术会催生新的公司，同时灭掉旧的公司。今天的淘宝，腾讯，谁说未来不会成为下一个诺基亚？对于自身来讲，个人的人生道路就看他处在历史的潮流中是抱残守缺还是革故鼎新。 ?G现在再进一步思考：6G过后呢？难道7G？可是信道容量是有极限的，香农定理早已经证明了这一点。$$ C= Blog_{2}(1 + \frac{S}{N}), (N =n_0B) $$若上面的香农公式中，B趋于无穷，则在给定$S/n_0$的情况下，C最大只能等于$$1.44\frac{S}{n_0}$$ 所以6G过后，是无G。没有了，等待新技术的突破吧，尤其是物理突破。没有物理理论上的突破，人类的技术就不会进步。实际上，每一次物理的突破都带来了技术的革新。我们回顾自1905年相对论诞生以来的一百多年，原子弹，核电站，GPS成为现在时态；量子力学的诞生提出了晶格理论，催生了新材料合成技术，进而推动半导体发展，集成电路发展，最后是建立于之上的计算机，互联网，一直到今天我们都还在吃量子力学的老本儿。最近一段时间，谷歌的量子霸权不也再次挑动人们的眼球吗？ 当然，有人说，难道不能突破香农定律吗？还别说，还真有这种人，而且还写了相应的文章，只是没有哪位审稿人给通过。另外，芯片行业的摩尔定律也到头了，CPU能做到1nm吗？能再小吗？不行了，因为电子有大小的，一到电子这个尺度，就要考虑量子效应。 所以，物理上如果不能取得新突破，则人类就会像欧洲中世纪一样，长时间生活在技术停滞发展的社会。想象如果50年后人们还在玩视频直播，还过着2019年的生活，这会不会出问题？相反，新理论会催生新的生产力，进而产生新的技术并推动文明的前进。今天的地球，斗争处于文明体之间，进步的活下来，落后的要么灭亡，要么遭奴役。这个时代是和科技战车绑架在一起的时代，任何人都只能支持科技的发展。 参考资料[1] 文明的冲突，[美]亨廷顿[2] 5G核心技术，Qualcomm(高通)中国[3] 手机基站天线去哪儿了？知乎老狼[4] 5G NR: The Next Generation Wireless Access Technology[5] Channel Polarization, Erdal Arikan, Senior Member, IEEE.]]></content>
      <categories>
        <category>通信</category>
      </categories>
      <tags>
        <tag>It</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[资深大牛的博客]]></title>
    <url>%2Ftitle%2Ff2d8edc5%2F</url>
    <content type="text"><![CDATA[整理一份行业大牛的博客00.王垠 01.云风 02.余峰 03.陈硕 04.老赵 05.老罗 06.无界 07.余弦 08.阮一峰 09.刘未鹏 10.吴更新 11.VCZh 12.BYVoid 13.七月在线创始人 14.读书，思考，生活 15.床长人工智能教程]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双托管代码]]></title>
    <url>%2Ftitle%2F53e77485%2F</url>
    <content type="text"><![CDATA[一：背景近期美国加紧封锁大棒，不但对中国，据说连委内瑞纳一个小国也被禁止使用Photoshop。结合前段时间github封禁中东开发者的情况，我认为中国的开发者需要把代码迁移一下，迁移到国内。目前国内的托管平台有多个，腾讯开发者平台，码云，还有最近华为开放的ihub，我选择了码云。 二：双托管1234567891011121314首先查看配置.$git remote -v origin git@github.com:USERNAME/package.git (fetch)origin git@github.com:USERNAME/package.git (push)删除github的配置.$git remote rm origin重新添加新配置.$git remote add github git@github.com:USERNAME/package.git$git remote add gitee git@gitee.com:USERNAME1/package1.git解决推送冲突$git pull gitee master --allow-unrelated-histories推送到两个平台$git push gitee master $git push github master 如果想存放在多个平台，修改同上面一样，只需要加入另一个平台的地址就行。 目前，国内平台多，但和Github比还有差距，仍需相关方继续推动，促进国内源代码托管。同时做好国际化，鼓励国外工程师托管优质代码到中国的服务器。]]></content>
      <categories>
        <category>代码托管</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[何以修身？]]></title>
    <url>%2Ftitle%2F70af6bb7%2F</url>
    <content type="text"><![CDATA[保持谦虚据我所知，人越是不懂便叫得越厉害，越是懂得多反而谦虚谨慎。人的认知就像一个气球，懂得越多则撑得越大，接触的未知面就越广，所以自然就越谦虚；相反，什么都不懂的人，未知面小了，便以为自己什么都懂了，他们认为，只要没人说自己不懂，自己便全都懂。如此，长傲和多言成了他们的随身法宝。长傲、多言这两个弊病，我自己也经常犯，细细想来，古时世卿大夫的兴与衰，近来官场的祸与福，未尝不是由这两个弊病导致的。 保持谦虚谨慎实在是人性中的一大亮点，而世人包括我自己在内，又多不谦虚。因为不谦虚，所以便傲起来了。做官的一俟官位稳当，官性就起来了，人性就龟缩了。被人一口一个书记，部长，领导叫着，自己也一步步走入自己挖的坑，跳入权势和名利的争夺圈。须知，权力的本质在于，即使不曾刻意追逐，甚至是被迫拥有，掌权者也会自然而然去追逐更多的权力。因为这样傲起来地快，所以倒下去也便一样地快。由此，身败名裂者，历史上实在为数太多。骄傲起来的，气焰盛了，便觉得自己了不得了，觉得老子天下第一聪明，但这种聪明多的是小聪明，少有大智慧。可是，难道人们就没有反躬自省吗？有的，但人们往往不习惯于理智反省，而习惯于情绪的反省。中文里有个成语叫闭门思过，你说思谁的过？他思别人的过！不用说，我们自己也这么干过。我们和别人出了争端，闹了矛盾时多半是不会反思的，反而是相互指责。我们喜欢用的句式是：他…如何如何，都是他…怎样怎样。一个例子是女人对男人的控诉：他又不爱我了，他又…我了，他总是….。这种甩黑锅的习惯甚至不是人的缺点，而是人的特点。即令监狱里被判刑的囚犯都说自己是被冤枉的，那么作为一个正常人，我们又如何肯轻易认错呢？然而，科技的进步，家庭的和睦，无不有谦虚谨慎的功，也无不表明狂傲，多言的过。事实证明只有修谦虚谨慎的功，才弥补得了狂傲，多言的过。狂傲，多言只会自欺欺人，只会自己给自己洗脑，别人不来骗自己，反而自己要骗自己。 自己骗自己的范例，股市体现得最为精妙。凡是买股票的，没有不觉自己决策英明的。做多的，总盼着涨，即令下跌，眼随着曲线往下看，但心却依然在往上升。明明跌了，却还要反复骗自己肯定会涨。玩股票讲究两点：一要选得准，二要拿得稳。很多人也知道这两点，但第一点98%的人不知道自己不具备，反而觉得自己全具备。第一点学个半吊子，第二点又死守，学什么却什么都不对，最后只能被割韭菜为人接盘。没有人发现，股票分析师有大机构养着。他们自己可能从不操作股票，反而靠写各种炒股书籍来指挥散户，实际上他们的工作就是忽悠散户。他们不靠买卖股票赚钱，他们靠开讲座，卖书忽悠散户买卖股票挣钱。股市里，大家都说要稳，要谨慎，然而自己骗自己者，少吗？道听途说，盲目自信害着谁，自己遭了才知道。实际上即便遭了，很多人还不知道。狂傲，盲目自大作的祟，即令他们踩最多的坑，倒最大的霉，嘴上却还唱着最美的赞歌。 读书以明理面对我们自己的愚蠢，怎么办？我想，人生路上，还是多读点书为好。肚子饿了，知道吃饭，脑子饿了，精神空虚了，则宜读书。多读一册书，多懂一行。懂得一行就掌握了一个维度；懂得多个领域，就掌握了多个维度。多掌握几个维度，也免得被人忽悠。许多人讲，工作太忙啦，没时间读书呀！我想说这话的人不是没时间读书，而是那个手机，它太好玩了，他们说的没时间，是玩了手机后没有时间。关于这点，两个凡是讲：凡是要等到有了实验室方才做研究的，有了实验室也不肯做研究；凡是要等到有了时间方才读书的，有了时间也不会去读书。 多读书，多体会别人面对各种情形时的判断和决策过程，这样，我们才能在面对复杂问题时提出妥善的解决方案，而不是如热锅上蚂蚁般团团转，撞了车也才不至于只懂得打电话找老公。多读书，使我们知道对问题的思考，往往不只一面，而是很多面，很可能还要翻一个面。我们要保持头脑开放，不能双脚踏在现代，而头脑还在宋代。爱因斯坦说过：“重大问题发生时，依我们当时的思想水准往往无法解决”。认知学上有个词叫“知识的错觉”：意思是说每个人懂的知识其实很少，但我们却以为自己懂得很多。我们不知道自己不知道，反而以为自己全知道，原因是我们把存在于他人大脑中的知识也看成是自己的。这就是我说的我们自己骗自己。我们面临的许多困难，其实并非真有多么困难，实乃我们见解上的困难，是书读少了的困难。 多读书，看览世间事，使我们知晓做人之道有时在于：含含糊糊的事要看得清清楚楚，而清清楚楚的事要显得含含糊糊。多读书，让我们知道不光要懂得积极工作的“生活技术”，还要懂得恋爱靠机会，而结婚靠智慧的“生活艺术”。多读书，我们还能保养自己的灵魂，尽量维持人生的幸福。许多人嘴上讲着保持精神上的纯粹，一讲都是满口的仁义道德，但他们肉体上却更加频繁地和俗事打着交道，食欲，睡欲，性欲，愤怒，骄傲和妒忌几乎成了他们维持生活的必需品。 多读书，能避免自己孤陋寡闻。书籍不但充实我们的灵魂，也同样减轻了我们精神上的痛苦，同时还可能解决我们面临的困难，这实在是很划算的事。诵读一册好书就是在不断地对话，书讲着，而我们的灵魂答着。当窗外阳光投射出的阴影从西边转到东边时，读者已经在书中看到了一个时代的兴亡、一种艺术的发展延续、一个人一生的得意与失落。虽然我们未环球旅行，但通过书籍，我们看到了现实的七大洲，并徜徉在心中的第八大洲。 多读书，明晰道理，使人聪明。聪明意味着遵循理智的指导，而愚蠢刚好相反，听任感情摆布，把理智限制于头脑的狭小角落里，而让感情囊括身体的其余部分。多读书，看别人犯的错，真正让自己谦逊。一个浮躁的人往往会急于为自己辩护，而辩护的结果又往往无济于事；一个勇于承认错误的人则给人一种尊贵、高尚的感觉。要知道：争辩永无止境，谦让受益更多! 发现自己的错误，需要智慧；承认错误，需要勇气；改正错误，则需要决心。 本文既是写给自己看，也帮助有需要的人。我很清楚，只有周围人的素质高了，社会才更理性，更安全，更有希望。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>小杂感</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义新闻邮件]]></title>
    <url>%2Ftitle%2F3af7bfc2%2F</url>
    <content type="text"><![CDATA[自定义邮件服务平时看新闻，发现各种新闻都是别人挑选出来给自己看的，尤其是利用深度学习算法，每个人都只能看到自己的想象中的世界。我特别讨厌这种情况，但是又挡不住媒体们的套路，所以我干脆自己设计了一个新闻邮件。该邮件从各大网站提取各行各业信息，确保信息题材的广泛。 科技文封面是从科学网站Science提取的播客信息，可以一键听播客，也可以点击图片或标题阅读内容。 社会类目前打算开发中文版新闻邮件，采集政治，经济，科技，教育等类目新闻并实现每日推送。]]></content>
      <categories>
        <category>邮件服务</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Mail</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言陷阱]]></title>
    <url>%2Ftitle%2Fc1ec2509%2F</url>
    <content type="text"><![CDATA[第1个陷阱：数组下标最大为n-1123456789int i, a[10];for (i = 0; i &lt;= 10; i++) a[i] = 0; //a[10]可能存放的是变量i，所以会导致死循环for (i = 0; i &lt;= 9; i++) a[i] = 0;for (i = 0; i &lt; 10; i++) a[i] = 0; //推荐写法，i &lt; 10要比i &lt;= 9更好，10是出口,0是入口 第2个陷阱：同一符号的不同作用1p-&gt;s = &quot;-&gt;&quot; // -&gt;是访问结构体 p-&gt;就是(*p)-&gt;的简写，&quot;-&gt;&quot;仅是一个字符串 第3个陷阱：赋值和比较运算符混用1234567891011121314151617if (x = y) //x == y误写为 x = y，若y不等于零，则程序侥幸能运行，难发现 break; if ( (x = y) != 0) break;while (c = &apos; &apos;||c==&apos;\t&apos;||c==&apos;\n&apos;) //=符号运算优先级最低，&apos; &apos;为真，所以死循环 c = getc(f);while (c == &apos;\t&apos; || c = &apos; &apos; || c == &apos;\n&apos;) //等价于如下的赋值语句，会报错while (c == &apos;\t&apos; || c) = (&apos; &apos; || c == &apos;\n&apos;)if ( (fd == open(argv[i], 0)) &lt; 0) //比较结果为0或1，永远不小于0，所以error()永不执行 error();if (c == 1);if (1 == c); //凡是比较常量的，常量左写，让对的对，错一定让编译器抛出错 第4个陷阱：混用逻辑与或和位与或运算符，对齐12345678a &amp;&amp; b;a &amp; b; // 若a &amp; b 不为0，则程序侥幸能运行parttab[] = &#123; 046, &quot;left s&quot;, //为了对齐125, 46被写成046，而046是八进制数 047, &quot;right r&quot;, 125, &quot;frammis&quot;&#125; 第5个陷阱：单目符号和多符号的贪心分析法则1234567a---b; //编译器识别为a-- - b;n--&gt;0 //n-- &gt; 0 不同于n- -&gt;;a+++++b; //(a++)++ +b，错误a++不做左值y = x/*p; //到底是指针还是注释？x/(*p), x/*p? 第6个陷阱：’’和””的不同1234567891011121314char *a;a = &quot;xyz&quot; //&quot;xyz&quot;提供x的地址 char hello[] = &#123;&apos;H&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;,&apos; &apos;,&apos;w&apos;,&apos;o&apos;,&apos;r&apos;,&apos;l&apos;,&apos;d&apos;,&apos;\n&apos;,0&#125;;printf(hello); //&apos; &apos;内为char或者说int，而&quot; &quot;括号内字符串常量printf(&quot;Hello world\n&quot;);printf(&apos;\n&apos;);printf(&quot;\n&quot;);c = &apos;yes&apos;; //c可能等于y或者s，视不同机器的实现c = &quot;yes&quot;; 第7个陷阱：嵌套注释1/*&quot;/* &quot;*/ 第8个陷阱：函数声明 1234567891011121314(*(void(*)())0)(); //按照用的规则来，去掉哑变量 //(void(*)())是一种强制类型转换操作，类似于unsigned a //它表示的是一个函数指针，且该指针指向的函数返回值为void型，且函数没有参数 //整个表达式是把0这个数转换为0这个位置，然后读取0位置的函数并执行 // (* (void (*)())0 )() // (指针 类型转换 地址)()(*((*)())0)(); //默认返回类型为int，一般会出错，段错误，核心已转储float *g(), (*h)();(float (*)()) //指向返回值为浮点类型的函数指针的类型转换符号int func()&#123;&#125;(int (*)()) p = func;(*p)() //简写为p() 但不是*p()，因为()优先和p结合 第9个陷阱：优先级别 12345678910111213(* / + -) &gt; (&lt;&lt; &gt;&gt;) &gt; (&gt; &lt; &gt;= &lt;= ==) &gt; (&amp;&amp; || !) &gt; (=) &gt; (? :) &gt; (,) //各种运算符号的优先级别，算术大于移位大于比较大于逻辑大于赋值大于三目运算大于逗号运算符号。FLAG = 01000100000; //假设为二进制表示if (flags &amp; FLAG) //flags &amp;&amp; FLAGE do sth;r = hi&lt;&lt;4 + low //hi &lt;&lt; (4 + low)r = (hi&lt;&lt;4) + low; //正确写法r = hi&lt;&lt;4 | low; //这种写法也可，但hi得指高位，low指低位while (c = getc(in) != EOF) //c一直为1，直到文件末尾为0，可能导致对文件循环读取 putc(c, stdout); 第10个陷阱：分号 123456789101112131415if (x[i] &gt; big); //big = x[i]一定会得到执行 big = x[i]; if (n &lt; 3) return //return logre.date = x[0];logre.date = x[0];logre.time = x[1];logre.code = x[2];struct logrec&#123; int date; int time; int code;&#125;main()&#123;&#125; //main函数返回类型为struct logrec类型 第11个陷阱：switch 省略break; 1234case &apos;\n&apos;: linecount++; //故意省略break，可以继续执行下面的casecase &apos;\t&apos;:case &apos; &apos;: 第12个陷阱：函数调用 12f(); //调用函数ff; //获得函数f的地址然后丢弃，什么也不做 第13个陷阱：悬挂else 123456if (x == 0) if (y == 0) error();else&#123; z = x + y; f(&amp;z);&#125; //else 按照最近匹配原则和内部if配对 第14个陷阱：数组和指针几乎等价 1234567891011121314151617181920212223int *p, a[12];p = a; //a既是数组名也是其首地址*a = 10; //就是a[0] = 10*p = 10; //也是a[0] = 10a[i] //可以写成i[a]或者a + i;char *r *malloc(); //错误1:可能分配失败, 要检测r是否为NULLr = malloc(strlen(s) + strlen(t)); //错误2:缺少&apos;\0&apos;字符的存储位置strcpy(r,s);strcat(r,t); //错误3:未释放内存 char r*, *malloc(); //一种可行的写法r = malloc(strlen(s) + strlen(t) + 1);if (!r)&#123; complain(); exit(1);&#125;else&#123; strcpy(r,s); strcat(r,t);&#125;free(r);p = NULL; 第15个陷阱：是数组还是指针做参数？ 12345int strlen(char s[])&#123;&#125;int strlen(char *s)&#123;&#125;int main(int argc, char **argv)&#123;&#125; //等价于下面写法int main(int argc, char *argv[])&#123;&#125; 第16个陷阱：数组下标和指针访问1234int cal[12][31]; //以下几种写法完全等价，有点儿绕cal[i][j], *(cal[i] + j), *(*(cal + i) + j)cal[i][j], *(i[cal] + j), j[i[cal]] 第17个陷阱：对操作优化 123456789101112131415161718192021222324252627282930313233#define N 1024static char buffer[N];static char *bufptr;void bufwrite(char *p, int n)&#123; while (--n &gt;= 0)&#123; if (bufptr == &amp;buffer[N]) flushbuffer(); *bufptr++ = *p++; &#125;&#125;void memcpy(char *dest, const char *source, int k)&#123; while (--k &gt;= 0) *dest++ = *source++;&#125;void bufwrite(char *p, int n)&#123; //优化版，一次拷贝k个字符 while (n &gt; 0)&#123; int k, rem; if (bufptr == &amp;buffer[N]) flushbuffer(); rem = N - (bufptr - buffer); //buffer + N - bufptr; k = n &gt; rem ? rem : n; memcpy(bufptr, p, k); bufptr += k; p += k; n -= k; &#125;&#125; 第18个陷阱：求值顺序 12345678910111213141516f(x, y) //函数有两个参数，求值顺序未定f( (x, y) ) //函数有一个参数，先求x，再求yi = 0;while (i &lt; n) y[i] = x[i++]; //错误，i++求值顺序未定 y[i++] = x[i]; //错误，i++求值顺序未定i = 0;while (i &lt; n) y[i] = x[i]; //正确 ++i;i = 0for (;i &lt; n; ++i) //正确 y[i] = x[i]; 第19个陷阱：&amp;&amp; || !123i = 0; //&amp;&amp;误用为&amp;，若&amp;操作结果为零才能发现此错误while (i &lt; tabsize &amp; tab[i] != x) i++; 第20个陷阱：数溢出 12345if ((unsigned)a + (unsigned)b &gt; INT_MAX) complain(); //加法溢出时，若检测溢出位标志会失败 if (a &gt;INT_MAX - b) //最好用减法，减法防止溢出， complain(); 第21个陷阱：main 函数无返回值 12345678910main()&#123; printf(&quot;hello world!\n&quot;);&#125; //返回垃圾整数，导致操作系统误判程序执行失败，而实际又执行成功了int main(int argc, char **)&#123; printf(&quot;hello world!\n&quot;); return 0; //一种可行的写法&#125; 第22个陷阱：声明和引用 1234int a; //a未赋值，则默认为0int b = 1;extern int c; //引用外部变量static int d; //限制d在该文件，不可被外部引用 第23个陷阱：调用外部函数要声明参数类型 123456789int isvowel(char);int main()&#123; int a; char c; c = &apos;a&apos;; a = isvowel(c);&#125; 第24个陷阱：变量类型错误使用123456789101112#include &lt;stdio.h&gt;int main()&#123; int i; char c; for (i = 0; i &lt; 10; i++)&#123; scanf(&quot;%d&quot;, &amp;c); //%c还是%d? printf(&quot;%d &quot;, i); &#125; printf(&quot;\n&quot;); return 0;&#125; 第25个陷阱：外部变量类型引用时声明错误 12long n;extern int n; //到底用long 还是int? 第26个陷阱：缓冲区释放错误 123456789101112#include &lt;stdio.h&gt;static char buf[BUFSIZ]; //正确位置int main()&#123; int c; char buf[BUFSIZ]; //错误位置，放在此处，main执行完buf就没了，释放buf时出错 setbuf(stdout, buf) //最好作为main函数第一句 while ((c = getchar()) != EOF) putchar(c);&#125; 第27个陷阱：宏定义缺少必要的括号 12345678910111213141516171819202122232425262728293031323334#define abs(x) x &gt;= 0 ? x : -xabs(a-b) //a - b &gt;= 0 ? a - b : -a-b 此处错误，应为-(a-b)abs(a) + 1 //a &gt;= 0 ? a : -a + 1 又错 #define abs(x) ((x) &gt;= 0 ?(x):-(x)) //良定义#define max(biggest, x) ((biggest) &gt; (x) ? (bigget) : (x))max(bigest, x[i++]) //宏中最好不要有带有副作用的操作存在，类似i++max(a,max(b,max(c,d))) //宏定义展开过长 max(max(a,b),max(c,d)) //((((a)&gt;(b)?(a):(b)))&gt;(((c)&gt;(d)?(c):(d)))?(((a)&gt;(b)?(a):(b))):(((c)&gt;(d)?(c):(d))))bigest = a; //一种比较a,b,c,d的好方法，代码清晰if (bigest &lt; b) bigest = b;if (bigest &lt; c) bigest = c;if (bigest &lt; d) bigest = d;#define assert(e) if (!e) assert_error(__FILE__,__LINE__)if (x &gt; 0 &amp;&amp; y &gt; 0) assert(x &gt; y); //展开后if和else匹配出错else assert(x &lt; y);#define assert(e) &#123; if (!e) assert_error(__FILE__,__LINE__) &#125;if (x &gt; 0 &amp;&amp; y &gt; 0) assert(x &gt; y); //解决了if和else配对，但会在&#125;后多一个; else assert(x &lt; y); //一种可行的写法#define assert(e) ((void)((e)||_assert_error(__FILE__,__LINE__)))#define T1 struct foo *typedef struct foo *T2T1 a, b; //struct foo *a, b ，此处b的类型不对T2 a, b; //struct foo *a, *b, 正确 第28个陷阱：编译器不区分大小写 12345678char * Malloc(unsigned n) //Malloc等于是malloc&#123; char *p, *malloc(unsigned); p = malloc(n); //循环调用自身，内存被耗尽，系统崩溃 if (p == NULL) panic(&quot;out of memory&quot;); return p;&#125; 第29个陷阱：字符有无符号 1(unsigned char) c; //强制声明无符号 第30个陷阱：乘除2的倍数用移位 12mid = (low + high) &gt;&gt; 2; //除以4mid = low &lt;&lt; 2; //乘以2 第31个陷阱：空指针位置0的读写权限 1234567int main()&#123; char *p; p = NULL; //空指针一般不可写，可读与否看系统 printf(&quot;Location 0 contains %d\n&quot;,*p); return 0;&#125; 第32个陷阱：负数成了被除数 12345h = n % HASHSIZE; // n小于0时，结果未定义if (h &lt; 0) h += HASHSIZE;h = (unsigned n) % HASHSIZE; //强制无符号 第33个陷阱：部分宏定义无法判断字符的范围 1234567891011121314151617181920#define toupper(c) ((c)+&apos;A&apos;-&apos;a&apos;)#define tolower(c) ((c)+&apos;a&apos;-&apos;A&apos;)int c;while ((c = getchar()) != EOF) putchar(tolower(c)); //错误，c可能就是小写字符 putchar(toupper(c)); //错误，c可能就是大写字符 int c; //一种可行的写法while ((c = getchar()) != EOF) putchar(isupper(c) ? tolower(c) : c); putchar(islower(c) ? toupper(c) : c);int toupper (int c) //或者使用函数&#123; if (c &gt;= &apos;a&apos; &amp;&amp; c &lt;= &apos;z&apos;) return c + &apos;A&apos; - &apos;a&apos;;&#125; //同时也有宏，选择使用一种#define _toupper(c) ((c)+&apos;A&apos;-&apos;a&apos;)#define _tolower(c) ((c)+&apos;a&apos;-&apos;A&apos;) 第34个陷阱：释放内存12345678struct node *p, *head;for (p = head; p; p = p-&gt;next) free((char *)p); //此处释放了，p-&gt;next仍正确，但再次循环就会出错struct node *p, *head, *tmp;for (p = head; p; p = tmp) tmp = p -&gt; next; //使用临时指针缓存 free((char *)p); 第35个陷阱：默认数组递增序列12345678910111213void printnum(long n, void (*p)())&#123; if ( n &lt; 0)&#123; (*p)(&apos;-&apos;); n = -n; &#125; if ( n &gt;= 10) printnum( n / 10,p); (*p)((int)(n%10) + &apos;0&apos;); //+号，暗含所有数按序编排，实际可能不是这样&#125; (*p)(&quot;0123456789&quot;[n % 10]); //此写法可行，字符串作为数组名， //提供了首地址，n % 10作为下标取其中的字符 第36个陷阱：指针不可直接相加，可相减，单独加数123456789101112131415int func()&#123; char s[10]; char *p1, p2; char *mid; p1 = s, p2 = &amp;s[9]; mid = (p1 + p2) / 2 //错误，不可相加 mid = (p1 + p2) &gt;&gt;1 //错误，不可相加 mid = (p2 - p1)/2 + p1 //正确，指针p1可以加数 mid = (p2 - p1) &gt;&gt; 1 + p1 //错误，+ 优先级高 mid = ((p2-p1)&gt;&gt;1) + p1 //正确&#125; 第37个陷阱：空指针引发段错误，核心转储123456789101112131415161718char s[100];p = malloc(strlen(s) + 1); if (p) do sth;else exit(1);free(p);p = NULL; //把指针给管起来char s[100];p = malloc(strlen(s) + 1); if (p) do sth;else exit(1);free(p);p = NULL; //把指针给管起来]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于glibc中strcmp函数的其他几种写法]]></title>
    <url>%2Ftitle%2F6e24e863%2F</url>
    <content type="text"><![CDATA[glibcGNU组织实现的C运行库，是Linux系统最底层的API。 strcmp strcmp, String Compare Function, compare S1 and S2, returning less than, equal to or greater than zero if S1 is lexicographically less than, equal to or greater than S2. 字符串S1中字符一旦大于S2中的字符就返回大于零的数(两字符差值)，小于就返回小于零的数，等于就返回零。 2.由头最近看书，发现C语言指针和数组特别神奇，很多复杂的函数，只要有指针就能简化代码。刚好在glic中发现字符串比较函数strcmp的官方写法，自己又结合书籍整理了一番，提出了几个自己写的版本。 3.自定义版1234567891011121314151617181920212223242526272829303132333435363738394041int strcmp0(char *p1, char *p2)&#123; //最简单的写法，指针当数组用 int i; for (i = 0; p1[i] == p2[i]; i++)&#123; if (p1[i] == &apos;\0&apos;) return 0; &#125; return p1[i] - p2[i];int strcmp1(char *p1, char *p2)&#123; //数组下标自增 int i = 0; for (; p1[i] == p2[i];)&#123; if (p1[i++] == &apos;\0&apos;) return 0; &#125; return p1[i] - p2[i];&#125;int strcmp2(char *p1, char *p2)&#123; //使用指针取值 for (; *p1 == *p2; p1++, p2++)&#123; if (*p1 == &apos;\0&apos;) return 0; &#125; return *p1 - *p2;&#125;int strcmp3(char *p1, char *p2)&#123; //放弃判断&apos;\0&apos;，而用!取反 for (; *p1 == *p2; p1++, p2++)&#123; if (!*p1) return 0; &#125; return *p1 - *p2;int strcmp4(char *p1, char *p2)&#123; //指针自增，注意*--p1中*和--的优先级，此法最简，不知有错没？ while (*p1++ == *p2++); return *--p1 - *--p2;&#125; 4.官方版123456789101112131415161718int STRCMP(const char *p1, const char *p2)&#123; const unsigned char *s1 = (const unsigned char *) p1; const unsigned char *s2 = (const unsigned char *) p2; unsigned char c1, c2; do &#123; c1 = (unsigned char) *s1++; c2 = (unsigned char) *s2++; if (c1 == &apos;\0&apos;) return c1 - c2; &#125; while (c1 == c2); return c1 - c2;&#125; 5.结语看了官方版本，感觉自己还很有差距。C语言灵活，但太容易出错，指针简直就是一把瑞士尖刀，弄不好就要戳到自己身上。]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux上可用的文献目录管理工具]]></title>
    <url>%2Ftitle%2F4388879e%2F</url>
    <content type="text"><![CDATA[针对文献管理，Linux有很多的解决方案。借助BibTex的力量，这些工具可以帮你导入引用源，然后自动生成一个结构化文献目录。这里给大家提供了一些Linux上参考文献管理工具的不完全列表。 Zotero这应该是最著名的参考文献聚集工具，Zotero作为一个浏览器的扩展插件。当然，它也有一个方便的Linux 独立工具。拥有强大的性能，Zotero 很容易上手，并且也可以和LibreOffice 或者是其他的文本编辑器配套使用来管理文档的参考文献。我个人很欣赏其操作界面和插件管理器。可惜的是，如果你对参考文献有很多不同的需求的话，很快就会发现 Zotero 功能有限。 JabRefJabRef 是最先进的文献管理工具之一。你可以导入大量的格式，可以在其外部的数据库里查找相应的条目（像Google Scholar），并且能直接输出到你喜欢的编辑器。JabRef 可以很好的兼容你的运行环境，甚至也支持插件。最后还有一点，JabRef可以连接你自己的SQL 数据库。而唯一的缺点就是其学习使用的难度。 KBibTex对于 KDE 使用者，这个桌面环境也拥有它自己专有的文献管理工具KBibTex。这个程序的品质，正如你所期望。程序可高度定制，通过快捷键就可以很好的操作和体验。你可以很容易找到副本、可以预览结果、也可以直接输出到LaTex 编辑器。而我认为这款软件最大的特色在于它集成了Bigsonomy ，Google Scholar ，甚至是你的Zotero账号。唯一的缺憾是界面看起来实在是有点乱。多花点时间设置软件可以让你使用起来得心应手。 Bibfilex可以运行在Gtk 和Qt 环境中，Bibfilex是一个基于 Biblatex 的界面友好的工具。相对于JabRef 和KBibTex ，缺少了一些高级的功能，但这也让他更加的快速和轻巧。不用想太多，这绝对是快速做文献目录的一个聪明的选择。界面很舒服，仅仅反映了一些必要的功能。我给出了其使用的完全手册，你可以从官方的下载页面去获得。 Pybliographer正如它的名字一样，Pybliographer是一个用 Python 写的非图形化的文献目录管理工具。我个人比较喜欢把Pybiographic 当做是图形化的前端。它的界面极其简洁和抽象。如果你仅仅需要输出少数的参考文献，而且也确实没有时间去学习更多的工具软件，那么 Pybliographer 确实是一个不错的选择。有一点点像 Bibfilex 的是，它是以让用户方便、快速的使用为目标的。 Referencer这应该是我归纳这些时候的一个最大的惊喜，Referencer 确实是让人眼前一亮。完美兼容 Gnome ，它可以查找和导入你的文档，然后在网上查询他们的参考文献，并且输出到 LyX ，非常的漂亮和设计良好。为数不多的几个快捷键和插件让它拥有了图书馆的风格。 Mendeley用了Mendeley，一拖一点完事。Mendeley的PDF导入与识别能力非常强大，尤其是对期刊全文PDF。只要将PDF文件拖入Mendeley，它能自动识别Titile， Author， Publication， Year，但有时候识别是不准确的。 BibusBiBus基于Python，Windows和Linux版本都有，Ubuntu下安装Bibus只要敲 sudo apt-get install bibus。要注意的一点是第一次使用前要选择数据库，MySQL或SQLite任选其一。如果是个人使用，最好选择SQLite，具体按提示搞就OK了。然后就需要导入文献数据库，去PubMed主页，搜索关键词，在搜索结果列表中选中一堆你想要的文章，把文字信息导入某个txt文件，打开BiBus(在Applications-Office-BiBus），选择菜单File-Import-Medline，选择txt文件，数据库就显示在BiBus左侧的Import Buffer目录了。使用：点击每篇文献，下方就会显示作者标题摘要等信息；你可以拖动文献到左侧References目录，可以右键点击References目录，选择Add Child增加子目录，也可以手动新建文献资料。 Docear配合Zotero使用效果最好，这Docear是基于思维导图形式的文献管理工具，给人耳目一新的感觉，这也是Docear的一大特色，但是Docear的文献管理方面不如Zotero。 参考文献Zoteror和Docear via: http://xmodulo.com/reference-management-software-linux.html ,原文有增删]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下自定义位置安装TeXLive2019]]></title>
    <url>%2Ftitle%2F46ed9a72%2F</url>
    <content type="text"><![CDATA[1.从清华大学的镜像处下载1https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/ 2.安装图像化界面必备的perl-tk组件1sudo apt-get install perl-tk 3.把下载好的.iso文件挂载到/mnt下1sudo mount -t iso9660 -o loop texlive2019-20190410.iso /mnt 4.准备从图形界面安装12cd /mntsudo ./install-tl -gui 5.如果要修改安装位置请执行(/目录下面空间够用也可不用管这一步)在&quot;TEXDIR(主TeX目录)&quot; 一行后点修改，填入新的位置(如/home/texlive2019) 6.可以瘦身安装(空间够此步也可忽略)123&quot;安装字体/宏包文档目录树&quot; 切换为否&quot;安装字体/宏包源代码目录树&quot; 切换为否上面两个操作会舍弃安装文档和源代码，实际上大部分人也不会看，安装了浪费2G左右空间 7.点击安装TeX Live8.卸载镜像文件1sudo unmount /mnt 9.配置字体(不配置的话，无法使用TeXLive自带字体)12sudo cp /home/tex2019/2019/texmf-var/fonts/conf/texlive-fontconfig.conf /etc/fonts/conf.d/09-texlive.confsudo fc-cache -fsv (此步执行时间稍长) 10.环境变量设置12345678910打开~/.bashrc 在最后加入如下内容(具体路径安按照自己的系统修改) export TexMan=&quot;/home/tex2019/2019/texmf-dist/doc/man&quot; export TexInfo=&quot;/home/tex2019/2019/texmf-dist/doc/info&quot; export TexLive=&quot;/home/tex2019/2019/bin/x86_64-linux&quot; export MANPATH=&quot;$MANPATH:$TexMan&quot; export INFOPATH=&quot;$INFOPATH:$TexInfo&quot; export PATH=&quot;$PATH:$TexLive&quot;执行 source ~/.bashrc 11.更新源配置12345678910sudo tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet此步如果出现sudo;找不到命令 tlmgr，意味着执行时环境变量不对，请执行(1) sudo vi /etc/sudoers(2) 给如下内容加一个感叹号 Defaults env_reset Defaults !env_reset(3) 再vi ~/.bashrc 加入下面这行到最后(4) alias sudo=&apos;sudo env PATH=$PATH&apos;(5) 保存退出执行 source ~/.bashrc此时再执行第一条命令 sudo tlmgr option .... 12.更新宏包12sudo tlmgr update --self --all 要更新几百个，时间较长 13.解决软件安装依赖问题123456789(1) sudo apt-get install aptitude(2) sudo aptitude install equivs(3) sudo mkdir /tmp/tl-equivs &amp;&amp; cd /tmp/tl-equivs(4) equivs-control texlive-local(5) 浏览器打开https://www.tug.org/texlive/files/debian-equivs-2019-ex.txt并复制所有内容(6) sudo vi texlive-local 将从浏览器拷贝的内容粘贴进去并保存退出(7) sudo equivs-build texlive-local(8) sudo apt-get freeglut3(9) sudo dpkg -i texlive-local_2019-1_all.deb]]></content>
      <categories>
        <category>排版设计</category>
      </categories>
      <tags>
        <tag>Tex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关系数据库，非关系数据库，云原生数据库]]></title>
    <url>%2Ftitle%2Fd8ef31cc%2F</url>
    <content type="text"><![CDATA[一 概述最近在研究学习数据库知识，发现市面上太多数据库及其书籍，而且体系混乱，越看越糊涂，故特意了解了数据库的发展史。 最早提出关系型数据库原理的是E.F.Codd，他在其论文A Relational Model of Data for Large Shared Data Banks中详述了关系数据库的原理和实现，我看了下论文，和今天的数据库简直一模一样。 而非关系数据库NoSQL一词首先是Carlo Strozzi在1998年提出来的，指的是他开发的一个没有SQL功能，轻量级的，开源的关系型数据库。这个定义跟我们现在对NoSQL的定义有很大的区别，它本来指的就是“没有SQL”的数据库，但是NoSQL的发展慢慢偏离了初衷，我们要的不是“no sql”，而是“no relational”，也就是我们现在常说的非关系型数据库。 2009年初，Johan Oskarsson举办了一场关于开源分布式数据库的讨论，Eric Evans在这次讨论中再次提出了NoSQL一词，用于指代那些非关系型的，分布式的，且一般不保证遵循ACID原则的数据存储系统。Eric Evans使用NoSQL这个词，并不是因为字面上的“没有SQL”的意思，他只是觉得很多经典的关系型数据库名字都叫“xxxSQL”,所以为了表示跟这些关系型数据库在定位上的截然不同，就是用了“NoSQL“一词。 随着社会的发展，不同时代对数据处理和存储的需求在不断变化，故而可以预见的是，数据库会不断有新品种诞生，老品种过时退出市场。今天历史偶然地走上了大数据和智能的时代，所以未来数据一定是很重要的一块，而数据库由于其特殊地位，应当得到极大的发展。我预计，未来10-20年应该会诞生数种新的广泛流行使用的数据库，满足的需求应当是切合时代要求的。中国的数据库厂商应该要有眼光锁定未来市场。为什么? 因为我们有最多的人口，倘使10年后每个中国人都要接入网络，每天产生1G的数据，那么一年，14甚至15亿人口是什么概念？古代有县志，史书。而现代人也当考虑如何将我们丰富的生活和文化保留给后人研究，所以大型的数据库必然会出现，建立人类数据库势在必行，可能下一个创业点也在此。 在我的认识里，数据库除了存储还要满足对关系的映射，这里关系包含传统的关系数据库关系，也包含非关系数据库的关系。嗯？非关系数据库还有关系？是的，没有消息就是消息，没有关系也是关系。数据总是有结构存在的，目前的成熟产品不一定能应对未来的场景，此间到底还有多少可以挖掘的知识就需要一代代人慢慢摸索。若干年来，数据库一直锁定在大厂商手里，下面略谈一些。 二 数据库大厂做数据库的大厂商目前有七家(排名不分先后)。 SAP，企业资源计划系统里的佼佼者。 AWS，Amazon巨头，卖东西卖出大机遇。 IBM，百年老牌，现代计算机结构的奠基者。 Google，不作恶，偏学好，引领时代精神。 Oracle，甲骨文，专注于闭源的杰出代表。 Aliyun，阿里巴巴，人人夸。 MicroSoft，Windows 发扬者。 二 关系型数据库常见的关系数据库如下： DB2 是IBM一种分布式数据库解决方案，是IBM开发的一种大型关系型数据库平台。支持多用户或程序在同一条SQL 语句中查询不同database甚至DBMS中的数据。 Oracle 是甲骨文公司的一款关系数据库管理系统。它是在数据库领域一直处于领先地位的产品。可以说Oracle数据库系统是目前世界上流行的关系数据库管理系统。 MySQL 是一种开放源代码的关系型数据库管理系统，使用最常用的数据库管理语言结构化查询语言（SQL）进行数据库管理。 MariaDB 是MySQL的一个分支，主要由开源社区在维护，由MySQL创始人开发。MariaDB完全兼容MySQL，使之能轻松成为MySQL的代替品。使用XtraDB来代替MySQL的InnoDB。 SQLite 是一款轻型的数据库，遵守ACID的关系型数据库管理系统，包含在一个相对小的C库中。设计目标是嵌入式，它占用资源非常的低，在嵌入式设备中，可能只需几百K内存就够了。 Access 是由微软发布的关系数据库管理系统。它结合了MicrosoftJet Database Engine和图形用户界面两项特点，是Microsoft Office的系统程序之一。 PostgreSQL 是以加州大学伯克利分校计算机系开发的POSTGRES(现已更名为PostgreSQL)为基础的对象关系型数据库管理系统（ORDBMS）。 SQL Server 同样是微软公司推出的一种关系型数据库系统。是一个可扩展的、高性能的、为分布式客户机/服务器计算所设计的数据库管理系统，实现了与WindowsNT的有机结合，提供了基于事务的企业级信息管理系统方案。 Teradata 整体上是按Shared Nothing 架构体系进行组织的，他的定位就是大型数据仓库系统，定位比较高。 Ingres 是比较早的数据库系统，开始于加利福尼亚大学柏克莱分校的一个研究项目，该项目开始于70年代早期，在80年代早期结束。从80年代中期，在Ingres基础上产生了很多商业数据库软件，包括Sybase、MicrosoftSQL Server、NonStop SQL、Informix 。 Informix 是IBM公司出品的关系数据库管理系统（RDBMS）家族。作为一个集成解决方案，它被定位为作为IBM在线事务处理（OLTP）旗舰级数据服务系统。 Sybase 美国Sybase公司研制的一种关系型数据库系统，是一种典型的UNIX或WindowsNT平台上客户机/服务器环境下的大型数据库系统。 FoxPro 是一种功能强大的数据库，是当今最受欢迎的数据库管理软件之一。FoxPro数据库最初由美国Fox公司1988年推出，1992年Fox公司被Microsoft公司收购。 Percona为MySQL数据库服务器进行了改进，在功能和性能上较MySQL有着很显著的提升。该版本提升了在高负载情况下的InnoDB的性能，为DBA提供一些非常有用的性能诊断工具。 Cache 是美国Intersystems公司产品，后关系型数据库(Post Relational database)中的领头羊。Cache数据库在国外特别是医疗领域，在美国和欧洲的HIS系统(医疗卫生管理信息系统)中，所占的比例最大，医疗界首选。 三 非关系型数据库非关系型里有key-value型的，也有做搜索的，还有做文档和图形和扩展式的。常见的非关系数据库如下： Redis 一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 Neo4 j 一个高性能的,NOSQL图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎。 Ria k 一个分布式的存储文档型数据库。 HBas e 一个分布式的、面向列的开源数据库，源于Fay Chang的Google论文“Bigtable：一个结构化数据的分布式存储系统”。HBase是Apache的Hadoop项目的子项目。 Flar e 由日本第二大SNS网站green.jp开发，支持scale，可动态添加或删除数据库服务节点。 MongoDB 一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。 Couchbase CouchDB和Membase合并后的产品，先进的Cache系统，由C/C++开发。 Memcached 一套分布式的高速缓存系统，由LiveJournal的Brad Fitzpatrick开发。 DynamoDB 被设计成用来托管的NoSQL数据库服务、可预期的性能、可实现无缝扩展性和可靠性等核心问题。 Hazelcast 一个开源的可嵌入式数据网格，可以把它看做是内存数据库，但与Redis有不同。 Accumulo 一个基于Google’s BigTable的高扩展性存储数据库。采用java编写并且操作于HDFS系统上。 **Cassandra** 一套开源分布式NoSQL数据库系统。最初由Facebook开发，用于储存收件箱等简单格式数据，集GoogleBigTable的数据模型与Amazon Dynamo的完全分布式的架构于一身。 **Cloundant** 省却维护人员在数据库管理、维护和调优方面的工作，而不需要考虑数据库管理以及后续随着数据量增长带来的扩展性问题。麻省理工的三位物理学家在寻找上帝粒子的科学实验中将CouchDB进行了大量定制和改进，从而形成了Cloudant。 **DataStax** 基于开源的“NoSQL”数据库Apache Cassandra，将Cassandra与Hadoop进行了集成。 **FlockDB** 一个存储图数据的分布式数据库，图数据库的存储对象是图论里面的图，而非图片。Twitter使用它来存储人与人之间的关系图。 **MarkLogic** 企业级的NoSQL数据库。是一个集存储、管理、搜索JSON和XML文档和图形数据的multi-model NoSWL数据库。 **Voldemort** 一个分布式键-值（Key-value）存储系统，是Amazon Dynamo的一个开源克隆。 **Twemproxy** 引入代理层，可将后端的多台Redis或Memcached实例进行统一管理与分配，使应用程序只需要在Twemproxy上进行操作，而不用关心后面具体有多少个真实的 Redis 或 Memcached 存储。 **CockroachDB**一款开源的分布式数据库，具有NoSQL对海量数据的存储管理能力，又保持了传统数据库支持的ACID和SQL等，还支持跨地域、去中心、高并发、多副本强一致和高可用等特性。 **Elasticsearch** 一个接近实时的搜索平台，从索引这个文档到这个文档能够被搜索到只有一个轻微的延迟。 **Azure Cosmos DB** 由Microsoft提供的全球分布式多模型数据库。 NewSQL 新技术还有一些新出现的数据库，应对目的不同。 TiDB 是国内PingCAP团队开发的一个分布式SQL数据库，其灵感来自于Google的F1和Google spanner, TiDB支持包括传统RDBMS和NoSQL的特性。 LMDB 全称是Lightning Memory-Mapped Database(快如闪电的内存映射数据库)，它的文件结构简单，包含一个数据文件和一个锁文件。 NuoDB 针对云伸缩设计的关系型数据库。重新定义了关系型数据库技术，它是针对弹性云系统而非单机系统设计的，因此可以将其看作是一个多用户、弹性、按需的分布式关系型数据库管理系统。 VoltDB 一个内存数据库，提供了 NoSQL 数据库的可伸缩性和传统关系数据库系统的 ACID 一致性。 TokuDB 是TokuTek公司研发的新引擎，支持事务/MVCC，数据压缩功能一流，支持异步写入数据功能。索引结构采用fractal tree数据结构，是buffer tree的变种，写入性能优异，适合写多读少的场景。 MemSQL 内存数据库，可以横跨多个商用节点（服务器）扩展MemSQL数据集。 Spanner 是谷歌公司研发的、可扩展的、多版本、全球分布式、同步复制数据库。 LevelDB 是google实现的一个开源且非常高效的键值对存储数据库。 Clustrix 是一款分布式数据库系统，它既支持最简单的Key-Value格式，又兼容MySQL的功能，同时能非常简单通过添加新的节点来存储数十亿条数据。 HybridDB 是面向在线事务（OLTP）和在线分析（OLAP）混合场景的关系型数据库。HybridDB采用一份数据存储来进行OLTP和OLAP处理，解决了以往需要把一份数据多次复制来分别进行业务交易和数据分析的问题。 ScaleBase 是一款基于 MySQL 而构建的动态数据库集群，已针对云技术进行了优化。该解决方案可实现 MySQL 关系数据的完整性，能使您向外扩展到无限数量的用户、数据和事务。 SequoiaDB 是一款支持SQL、高并发、实时性、分布式、可扩展、灵活存储的操作型NewSQL数据库，现已开源。 Tokyo Cabinet(TC) 是日本人平林干雄开发的一款DBM数据库读写非常快。 四 云源生数据库云时代诞生的新型数据库，目前还处在发展阶段。 Aurora 亚马逊推出的云原生数据库。 PolarDB 阿里产品。 CynosDB 腾讯产品。 五 结语 数据库种类实在太多，在此只列举了一部分，当然，大部分人能用得到的就一部分。看到这些数据库，感觉自己知识实在匮乏，对很多东西理解太简单，对新技术的领悟太浅显。希望能在数据这块好好研究，毕竟未来可期。 六 参考资源[1] 数据库排名 [2] 什么是“云原生”数据 [3] 阿里云数据库入选Gartner]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>It</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Matplotlib 画图中文乱码解决]]></title>
    <url>%2Ftitle%2F2cca9645%2F</url>
    <content type="text"><![CDATA[用matplotlib画图出现中文符号乱码，东改改西改改都不对，实际是没找到中文字体，应对方法如下。 1.找到宋体 拷贝Window/Fonts/simhei.ttf 到 /usr/local/lib/python2.7(3.6)/dist-packages/matplotlib/mpl-data/fonts/ttf 2.删除缓冲文件1sudo rm -rf ~/.cache/matplotlib 3.设置字体配置文件123456sudo vim /usr/local/lib/python2.7(3.6)/dist-packages/matplotlib/mpl-data/matplotlibrc取消这三行注释并加入值:(1) font.family : sans-serif(2) font.sans-serif : SimHei, (加入SimHei,原有的字体不动)(2) axes.unicode_minus : False 4.命令行进入python并尝试导入(导入后要稍等字体刷新)123456:~$ pythonshieber@Kew:~$ pythonPython 3.6.7 (default, Oct 22 2018, 11:32:17)[GCC 8.2.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import matplotlib.pyplot as plt 5.针对python3和python2一样的操作 拷贝字体 /usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf 修改配置文件/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/matplotlibrc]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>It</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tex排版系统及其衍生系列产品的简介]]></title>
    <url>%2Ftitle%2F51414649%2F</url>
    <content type="text"><![CDATA[一. 什么是Tex？ 你用微软的Word写文档并转换为pdf，但是你觉得很不满意，尤其是涉及到数学公式录入时，Word的公式编辑器太慢而且符号查找费时费力，最后导出的pdf还是很丑。当然WPS也是一个选择，但是涉及到公式一样的很痛苦。你厌倦了这种情况，但又不得不这么做，似乎只有Word或WPS才是写文档的工具。但其实在Word还没诞生的时候就有人设计出了跨平台的文档排版利器。上世纪，计算机学界泰斗人物高德纳(Donald E. Knuth)应出版社要求对他六十年代的巨作《计算机编程艺术》^1 出修订版，他感到以手工方式对原稿进行修改存在种种不便，于是便放下手头的工作，开始设计一套高质量的计算机排版系统。原先计划花半年时间来改进排版技术然后继续写作的高德纳教授，最后却整整耗费十年心血，终于研制成功了闻名于世的TeX系统。TeX是一种优秀的电子排版系统，编译生成的文件格式是DVI格式，可以使用其他工具转换为PDF格式。TeX及其各种衍生系统可以应对多种场景，排版论文，书籍，报刊，报告时毫无问题，排版所得产品美观而且省时。 二. Tex的历史TeX 的名字是由大写的希腊字母“tec”(tau, epsilon,chi)组成。在希腊语中这个词的意思是“科技”和“艺术”，这也解释了它的发音。“T”和“E”就像在“technology”中的发音一样，而“x”的发音类似于苏格兰语单词“loch”或德语单词“ach”中的“ch”，也类似于西班牙语中的“j”或俄语中的“kh”。TeX 标志为TEX，这三个字母相靠得很近，而且中间的那个E有点儿下沉。但在无格式文件中，就写为TeX。 TeX的第一版于1978年面世。在经过了不断的改进后，1982年版的TeX是一个十分稳定的版本。从此以后，TeX没有较大的变动，只有很少部分的改进和错误修正。现在几乎所有的操作系统平台下，都有相应的TeX软件，而且用它们排版同一个文件得到的输出结果是相同的。TeX目前的版本是3.141592，很接近圆周率π。每有一新的版本，就会加上一个π的小数点后的数。所以我们已经知道下一版本的TeX是3.1415926，最终将收敛到π，这也代表了TeX不断追求完美的理想。 TeX的源程序是用Pascal写成的，原因是高德纳教授希望TeX尽可能方便地移植到其它的操作系统中去。当时Pascal是最适合于这一要求的编程语言。这使得TeX现在已经在几乎所有的计算机系统中得到实现。 三. 易混淆的TeX概念 TeX里存在两个重要概念：文档格式和排版引擎。 TeX系统工作原理：排版引擎编译文档生成相应的DVI，再由其他程序生成PDF文档等，不同的引擎支持的文档格式不尽相同。 TeX系统直接学习使用较困难，且使用的是Plain Tex格式，编译生成DVI格式文档而不是PDF格式，所以就有人对TeX进行扩展(定义宏集：就是把一段段代码抽象为指令)，就得到了不同的排版引擎和文档格式。 由于各种扩展多了，TeX家族里就出现了排版引擎和文档格式名称混淆的情况。要搞清楚的是，TeX排版系统是核心，是一种排版引擎，其他的各种实现都是基于TeX而改进的引擎。 TeX及其衍生排版系统编译的文档统称为tex文档，他们名字相同，千万不要混淆了。 Tex文档格式 Plain TeX: 是Tex中的一个最基本的宏集合与TeX的基础语言构成的一种Tex文档格式(类似 .txt，.docx格式)，由Tex引擎编译，是高德纳教授开发TeX时使用的格式。 LaTeX: 是一种新的Tex文档格式，和Plain Tex不同。LaTeX由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在上世纪80年代初期开发，使用方便。它充分发挥了由TeX所提供的强大功能，能在很短时间内生成高质量的产品。现在是科技界的标准格式。 AMS-LaTeX: 由Michael Spivak基于TeX开发的一种新Tex文档格式，由美国数学协会使用，许多数学期刊接受的论文就需要AMS-LaTeX格式。因为该格式加入了对许多数学符号及有关字体的支持，使得写数学方面的文档十分方便。 TeXinfo: 自由软件基金会(FSF)开发的一种Tex文档格式，是Linux等系统下的标准文档格式。 ConTeXt: 由Hans Hagen开发的一种Tex文档格式，编译后得到漂亮的出版样式。 Tex的各种排版引擎和指令 TeX: 最初由高德纳发明的一种排版引擎，编译Plain TeX格式的文档。 MikTex: 是Windows平台下的一种Tex的实现，一种排版引擎，已经被包含到CTeX套件中。 CTeX: 最初是由中科院数学与系统科学研究院的吴凌云研究员制作发布的TeX套装，是CTeX中文套装的简称。基于MikTex引擎的Windows实现。CTeX是把MikTeX，WinEdit，GSview，Ghostscript等一些常用的相关工具包装在一起制作的一个简易安装程序，并对其中文支持部分进行了配置，安装后就可以使用中文。因为CTeX结合图形界面并包含编辑器和文档查看工具，所以使用非常方便，特殊符号还可以点击插入，很多Windows下的专业人员就使用该套装处理文档。我本人的本科毕业论文就是用CTeX做的。 cwTeX: 是由台湾同胞吴聪敏和吴聪慧制作发布的跨平台TeX套装，和CTeX类似，只是台湾人用的多，支持繁体字，编译的文档格式是.ctx。 proTeXt: 是Windows下的一款基于MikTeX的简易安装发行版TeX排版系统。 MacTeX: 是Mac OSX下的TeX实现，一种排版引擎，用苹果电脑的用户首选。 Tex Live: 是美国数学学会创立的TUG(TeX User Group)维护和发布的一种基于TeX的排版引擎，跨平台(Windows,Unix/Linux,Mac OSX)。 PDFTex: 也是TeX的一种实现，一种排版引擎，可以把Tex原始文档直接转换为PDF文档。 Tex: 是PDFTeX引擎的指令，用于将Plain TeX格式文档生成DVI文档，容易和TeX引擎搞混。 LaTex: 是PDFTeX引擎的指令，用于将LaTeX格式文档生成DVI文档，容易和LaTeX文档格式搞混。 PDFtex: 是PDFTeX引擎的指令，用于编译Plain Tex格式文档生成PDF文档。 PDFLaTex: 是PDFTeX引擎的指令，用于编译LaTex格式文档生成PDF文档。 XeTeX: 是TeX的一种实现，一种排版引擎，支持Unicode和操作系统字体。 Xetex: 是XeTeX引擎的指令，用来编译Plain TeX文档生成PDF文档。 XeLaTex: 是XeTeX引擎的指令，用来编译LaTex格式文档生成PDF文档。 LuaTeX: 新的TeX实现，一种新的引擎，正在不断完善。 Luatex: 是LuaTeX引擎的指令，用于将Plaint TeX格式文档编译成PDF文档。 LuaLaTex: 是LuaTeX引擎的指令，用于将LaTeX格式文档编译成PDF文档。 context: 是LuaTeX引擎的指令，用于将ConTeXt格式文档编译成PDF文档。 Tex文档的编辑器和有关工具 GSview: CTeX套装包含的文档查看器，可以直接查看PostScript文档和PDF文档。 Ghostscript: 是一种PostScript的解释器，可以用来查看PostScript和PDF文档。 WinEdit: 是CTeX套装的编辑器，就是写Tex文档的工具。 TeXShop: 是MacTeX下的一款Tex文档编辑器，界面美观，苹果永远追求美的享受啊! TeXWorks: 是TexLive自带的Tex文档编辑器，由XeTeX作者Jonathan Kew仿照Mac上的TeXShop写出。 TeXMaker: 另一款Tex文档编辑器，支持文档导航。 TeXStudio: 又一款Tex文档编辑器，衍生自TeXmaker，功能更为强大。 由于我们要处理中文，推荐使用LuaTeX和XeLaTex两个引擎来排版，尤其是在CTeX套装中，选择这两个引擎可以解决中文编译问题。编辑器推荐TexStutio，当然，这个要难一些，但是学会了工作称心。 四. TeX的优点 TeX特别适合于科技论文和书籍的排版，利用它可以在计算机上生成与印刷品几乎完全一样的作品，目前在国外已经被广泛地用于编排书籍、档案、学位论文和私人信件，以及各种复杂的公式、目录、索引和参考文献等。由于使用TeX可以很轻松地完成高质量科技文献的排版工作，并且可以按照作者的要求进行扩充和修改，所以逐渐引起出版界和各国科技工作者的注意，被一致认为是目前国际上排版数学公式能力最强的系统，并且在各种国际会议上被指定为标准的论文编排软件。 稍有经验的人都会知道，即使再好的字处理软件打印出来的效果也都会跟屏幕上看到的有所差异，尤其是Word，还记得拿到打印店时格式出错，字迹变样吗？而TeX系统的输出是与设备无关的DVI（DeVice Independent）文件，因此无论是在针式打印机、喷墨打印机、激光打印机或是照排机上，其效果都是完全相同的，仅仅只是文字或者图形的分辩率因设备的不同而稍有差异。从这种意义上说，TeX才是真正的”所见即所得(What you see is what you get)”。 五. Tex的各种资源和站点(1) CTeX 套装官网(2) LaTeX项目官网(3) TeXLive的官网(4) CTAN 宏包官网]]></content>
      <categories>
        <category>排版设计</category>
      </categories>
      <tags>
        <tag>It</tag>
        <tag>Tex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[各种编程语言的适用范围]]></title>
    <url>%2Ftitle%2F45b4e77f%2F</url>
    <content type="text"><![CDATA[自Fortran语言诞生至今，各种计算机编程语言总和超过1500种，但今天还流行的并不多。大部分人在初学编程时都会问：”我该学什么语言？”。语言没有明显优劣，只有适合还是不适合，擅长与否，有的语言就是要比其他语言更适合某个领域。本文旨在梳理TIOBE榜(The Importance Of BeingEarnest)上一部分语言的适用场景，希望能成为一份粗略的编程语言选择指南。(排名没有先后) TIOBE Index收录的计算机语言的适用范围Tex(1) 这个似乎不是编程语言，但是对于一心追求美的人来说是不可少的。(2) 适用于书籍，报刊，杂志，论文，报告等等文档的排版。(3) 详细内容请看另一篇博文Tex排版系统及其衍生系列产品的简介 Java(1) 桌面应用，Web应用(2) 企业级应用，安卓应用(3) 软件工具，交易程序(4) 大数据和科学应用 C(1) 类Unix操作系统，嵌入式(2) 交换机，路由器，防火墙(3) 驱动程序，航空飞行器(4) 工程控制领域，机器人(5) 木马，病毒 C++(1) 游戏引擎，服务器(2) 图像处理，虚拟现实(3) 音视频处理，压缩技术(4) 数据库，安全协议(5) 图形用户界面，网络(6) 科学计算，人工智能(7) 编译器，调试器(8) 木马，病毒 Python(1) 网络爬虫，人工智能(2) 科学计算，Web开发(3) 大数据，云计算(4) 量化金融，运维(5) 图像，音视频处理(6) 木马，病毒 Ruby(1) Web开发 Perl(1) Unix系统维护，CGI脚本(2) 邮件文本处理和FTP自动化(3) 数据库通信，Web站点维护自动化 R(1) 数据挖掘，统计分析(2) 生物医学领域(3) 自动化报告 JavaScript(1) 网站前端，Web应用(2) 网站后端，插件开发 HTML(1) 这不是一门编程语言(2) 网页生成(3) 电子书制作 PHP(1) 网站开发，电子商务(2) Web应用，企业级应用(3) 微信开发，客户端界面 Go(1) 服务器，数据库(2) 分布式大型系统，云平台 Kotlin(1) 安卓官方开发语言 Swift(1) IOS及OS X开发 C#(1) Windows桌面应用，Web 应用 Objective-C(1) IOS平台软件开发 Bash(1) 自动化脚本 SQL(1) 数据库 Visual Basic.NET(1) 可视化程序设计(2) 木马，病毒 MATLAB(1) 科学计算，仿真模拟(2) 人工智能 Assembly(1) 底层，硬件控制(2) 木马，病毒 Groovy(1) Java的替代品 Delphi(1) 桌面开发，数据库开发(2) Web服务，游戏控制软件(3) 木马，病毒 Pascal(1) 编程竞赛，算法研究 Fortran(1) 科学研究，物理 Lua(1) 游戏脚本，内嵌脚本 Julia(1) 科学计算 TypeScript(1) 应用级的JavaScript开发语言 Lisp(1) 人工智能 Rust(1) 系统级编程 PostCript(1) 印刷机，打印机使用 Dart(1) Web，服务器(2) 物联网 Scratch(1) 儿童的编程语言 COBOL(1) 银行(四大行），保险，金融行业 Scala(1) 大数据，Web服务 Scheme(1) 科学计算 Haskell(1) 函数式编程 PowerShell(1) 自动化脚本，调用.Net和COM对象 Awk(1) 字节流数据处理 Erlang(1) 游戏网页，高并发 Clojure(1) 游戏后端(2) 自动化测试，黑盒测试 Maple(1) 数值计算 VHDL(1) 电路设计 结语一般人用得到的语言估计就这些了，每门语言的的适用领域不一定写全，但是大体不会错误，你用过多少种语言？]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>It</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL 官方推荐数据库连接器 Connector 8.0]]></title>
    <url>%2Ftitle%2F925b0210%2F</url>
    <content type="text"><![CDATA[一. python connector 8.0 简介MySQL Connector/Python 8.0(以下简称Connector)是一个自完备的Python驱动器，实现了同MySQL server的连接，是MySQL官方高度推荐使用的连接器，而MySQLdb则不是。该连接器符合Python的数据库API标准2.0(PEP 249)标准，纯Python写成，只依赖Python标准库。如果有需要，请尽量使用Connector。当然，其他语言的Connector实现也有，包括C，C++，NET，ODBC，J。本文只针对Python。 二. connector的变化MySQL Connector/Python 支持：(1) 几乎所有数据库特性，包括5.7版本的。(2) 支持X DevAPI。(3) All MySQL extensions to standard SQL syntax。(4) 数据流压缩，实现客户端到服务器端的高效沟通。(5) 使用SSL的TCP/IP套接字，在类Unix上使用Unix套接字。(6) 支持数据类型在MySQL和Python间的转换。例如Python的datetime和MySQL的DATETIME间相互转换，并且可以自由设置是否开启转换。 三. 各个版本支持的MySQL和Python版本 Connector Version MySQL Server Versions Python Versions 8.0 8.0, 5.7, 5.6, 5.5 3.7, 3.6, 3.5, 3.4, 2.7 2.1 5.7, 5.6, 5.5 3.5, 3.4, 2.7, 2.6 2.0 5.7, 5.6, 5.5 3.5, 3.4, 2.7, 2.6 1.2 5.7, 5.6, 5.5 5.1, 5.0, 4.1 3.4, 3.3, 3.2, 3.1, 2.7, 2.6 四. 安装 Linux下 1$ sudo pip install mysql-connector-python Windows下 1$ pip install mysql-connector-python 五. 连接方式 连接方式1 123456import mysql.connectorcnx = mysql.connector.connect(user=&apos;scott&apos;, password=&apos;password&apos;, host=&apos;127.0.0.1&apos;, database=&apos;employees&apos;)cnx.close() 连接方式2 123456from mysql.connector import (connection)cnx = connection.MySQLConnection(user=&apos;scott&apos;, password=&apos;password&apos;, host=&apos;127.0.0.1&apos;, database=&apos;employees&apos;)cnx.close() 常用的是连接方式1 错误处理 为了应对连接错误，可以引入try-except机制。1234567891011121314import mysql.connectorfrom mysql.connector import errorcodetry: cnx = mysql.connector.connect(user=&apos;scott&apos;, database=&apos;employ&apos;)except mysql.connector.Error as err: if err.errno == errorcode.ER_ACCESS_DENIED_ERROR: print(&quot;Something is wrong with your user name or password&quot;) elif err.errno == errorcode.ER_BAD_DB_ERROR: print(&quot;Database does not exist&quot;) else: print(err) else: cnx.close() 把参数单独放到外面或者文件中 123456789101112import mysql.connectorconfig = &#123; &apos;user&apos;: &apos;scott&apos;, &apos;password&apos;: &apos;password&apos;, &apos;host&apos;: &apos;127.0.0.1&apos;, &apos;database&apos;: &apos;employees&apos;, &apos;raise_on_warnings&apos;: True&#125;cnx = mysql.connector.connect(**config)cnx.close() 五.常见使用形式0.连接器操作原理Connector的工作流程：(1) 接到数据库。(2) 返回一个游标连接对象。(3) 通过游标对数据库执行增删查改操作。(4) 操作完成，分别断开连接。 具体示例： 12345cnx = mysql.connector.connect(database=&apos;world&apos;)cursor = cnx.cursor()cursor.execute(&apos;SQL语句&apos;)cursor.close()cnx.close() 1.创建表123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115from __future__ import print_functionimport mysql.connectorfrom mysql.connector import errorcodeDB_NAME = &apos;employees&apos;TABLES = &#123;&#125;TABLES[&apos;employees&apos;] = ( &quot;CREATE TABLE `employees` (&quot; &quot; `emp_no` int(11) NOT NULL AUTO_INCREMENT,&quot; &quot; `birth_date` date NOT NULL,&quot; &quot; `first_name` varchar(14) NOT NULL,&quot; &quot; `last_name` varchar(16) NOT NULL,&quot; &quot; `gender` enum(&apos;M&apos;,&apos;F&apos;) NOT NULL,&quot; &quot; `hire_date` date NOT NULL,&quot; &quot; PRIMARY KEY (`emp_no`)&quot; &quot;) ENGINE=InnoDB&quot;)TABLES[&apos;departments&apos;] = ( &quot;CREATE TABLE `departments` (&quot; &quot; `dept_no` char(4) NOT NULL,&quot; &quot; `dept_name` varchar(40) NOT NULL,&quot; &quot; PRIMARY KEY (`dept_no`), UNIQUE KEY `dept_name` (`dept_name`)&quot; &quot;) ENGINE=InnoDB&quot;)TABLES[&apos;salaries&apos;] = ( &quot;CREATE TABLE `salaries` (&quot; &quot; `emp_no` int(11) NOT NULL,&quot; &quot; `salary` int(11) NOT NULL,&quot; &quot; `from_date` date NOT NULL,&quot; &quot; `to_date` date NOT NULL,&quot; &quot; PRIMARY KEY (`emp_no`,`from_date`), KEY `emp_no` (`emp_no`),&quot; &quot; CONSTRAINT `salaries_ibfk_1` FOREIGN KEY (`emp_no`) &quot; &quot; REFERENCES `employees` (`emp_no`) ON DELETE CASCADE&quot; &quot;) ENGINE=InnoDB&quot;)TABLES[&apos;dept_emp&apos;] = ( &quot;CREATE TABLE `dept_emp` (&quot; &quot; `emp_no` int(11) NOT NULL,&quot; &quot; `dept_no` char(4) NOT NULL,&quot; &quot; `from_date` date NOT NULL,&quot; &quot; `to_date` date NOT NULL,&quot; &quot; PRIMARY KEY (`emp_no`,`dept_no`), KEY `emp_no` (`emp_no`),&quot; &quot; KEY `dept_no` (`dept_no`),&quot; &quot; CONSTRAINT `dept_emp_ibfk_1` FOREIGN KEY (`emp_no`) &quot; &quot; REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,&quot; &quot; CONSTRAINT `dept_emp_ibfk_2` FOREIGN KEY (`dept_no`) &quot; &quot; REFERENCES `departments` (`dept_no`) ON DELETE CASCADE&quot; &quot;) ENGINE=InnoDB&quot;)TABLES[&apos;dept_manager&apos;] = ( &quot; CREATE TABLE `dept_manager` (&quot; &quot; `dept_no` char(4) NOT NULL,&quot; &quot; `emp_no` int(11) NOT NULL,&quot; &quot; `from_date` date NOT NULL,&quot; &quot; `to_date` date NOT NULL,&quot; &quot; PRIMARY KEY (`emp_no`,`dept_no`),&quot; &quot; KEY `emp_no` (`emp_no`),&quot; &quot; KEY `dept_no` (`dept_no`),&quot; &quot; CONSTRAINT `dept_manager_ibfk_1` FOREIGN KEY (`emp_no`) &quot; &quot; REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,&quot; &quot; CONSTRAINT `dept_manager_ibfk_2` FOREIGN KEY (`dept_no`) &quot; &quot; REFERENCES `departments` (`dept_no`) ON DELETE CASCADE&quot; &quot;) ENGINE=InnoDB&quot;)TABLES[&apos;titles&apos;] = ( &quot;CREATE TABLE `titles` (&quot; &quot; `emp_no` int(11) NOT NULL,&quot; &quot; `title` varchar(50) NOT NULL,&quot; &quot; `from_date` date NOT NULL,&quot; &quot; `to_date` date DEFAULT NULL,&quot; &quot; PRIMARY KEY (`emp_no`,`title`,`from_date`), KEY `emp_no` (`emp_no`),&quot; &quot; CONSTRAINT `titles_ibfk_1` FOREIGN KEY (`emp_no`)&quot; &quot; REFERENCES `employees` (`emp_no`) ON DELETE CASCADE&quot; &quot;) ENGINE=InnoDB&quot;)cnx = mysql.connector.connect(user=&apos;scott&apos;)cursor = cnx.cursor()def create_database(cursor): try: cursor.execute( &quot;CREATE DATABASE &#123;&#125; DEFAULT CHARACTER SET &apos;utf8&apos;&quot;.format(DB_NAME)) except mysql.connector.Error as err: print(&quot;Failed creating database: &#123;&#125;&quot;.format(err)) exit(1)try: cursor.execute(&quot;USE &#123;&#125;&quot;.format(DB_NAME))except mysql.connector.Error as err: print(&quot;Database &#123;&#125; does not exists.&quot;.format(DB_NAME)) if err.errno == errorcode.ER_BAD_DB_ERROR: create_database(cursor) print(&quot;Database &#123;&#125; created successfully.&quot;.format(DB_NAME)) cnx.database = DB_NAME else: print(err) exit(1)for table_name in TABLES: table_description = TABLES[table_name] try: print(&quot;Creating table &#123;&#125;: &quot;.format(table_name), end=&apos;&apos;) cursor.execute(table_description) except mysql.connector.Error as err: if err.errno == errorcode.ER_TABLE_EXISTS_ERROR: print(&quot;already exists.&quot;) else: print(err.msg) else: print(&quot;OK&quot;)cursor.close()cnx.close() 2.插入1234567891011121314151617181920212223242526272829303132333435from __future__ import print_functionfrom datetime import date, datetime, timedeltaimport mysql.connectorcnx = mysql.connector.connect(user=&apos;scott&apos;, database=&apos;employees&apos;)cursor = cnx.cursor()tomorrow = datetime.now().date() + timedelta(days=1)add_employee = (&quot;INSERT INTO employees &quot; &quot;(first_name, last_name, hire_date, gender, birth_date) &quot; &quot;VALUES (%s, %s, %s, %s, %s)&quot;)add_salary = (&quot;INSERT INTO salaries &quot; &quot;(emp_no, salary, from_date, to_date) &quot; &quot;VALUES (%(emp_no)s, %(salary)s, %(from_date)s, %(to_date)s)&quot;)data_employee = (&apos;Geert&apos;, &apos;Vanderkelen&apos;, tomorrow, &apos;M&apos;, date(1977, 6, 14))# Insert new employeecursor.execute(add_employee, data_employee)emp_no = cursor.lastrowid# Insert salary informationdata_salary = &#123; &apos;emp_no&apos;: emp_no, &apos;salary&apos;: 50000, &apos;from_date&apos;: tomorrow, &apos;to_date&apos;: date(9999, 1, 1),&#125;cursor.execute(add_salary, data_salary)cnx.commit() #只是查询时，不需这行，涉及修改数据则必须cursor.close()cnx.close() 3.查询1234567891011121314151617181920import datetimeimport mysql.connectorcnx = mysql.connector.connect(user=&apos;scott&apos;, database=&apos;employees&apos;)cursor = cnx.cursor()query = (&quot;SELECT first_name, last_name, hire_date FROM employees &quot; &quot;WHERE hire_date BETWEEN %s AND %s&quot;)hire_start = datetime.date(1999, 1, 1)hire_end = datetime.date(1999, 12, 31)cursor.execute(query, (hire_start, hire_end))for (first_name, last_name, hire_date) in cursor: print(&quot;&#123;&#125;, &#123;&#125; was hired on &#123;:%d %b %Y&#125;&quot;.format( last_name, first_name, hire_date))cursor.close()cnx.close()]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL 8.0 迁移数据存储位置到指定位置(Linux版)]]></title>
    <url>%2Ftitle%2Fdd137b08%2F</url>
    <content type="text"><![CDATA[一：具体步骤停止mysql服务1$ sudo service mysql stop 拷贝数据存储到你的新位置 12例如: /home/database/$ sudo cp -R /var/lib/mysql /home/database/ 打开/etc/mysql/mysql.conf.d/mysqld.cnf修改数据存储位置 12345678910将以下两行注释掉并加入新的两行(按自己的位置修改)\#socket = /var/run/mysqld/mysqld.sock\#datadir= /var/lib/mysqlsocket = /home/database/mysql/mysql.sockdatadir = /home/database/mysql再接着添加以下内容[client]socket = /home/database/mysql/mysql.sock[mysql] socket = /home/database/mysql/mysql.sock 打开/etc/apparmor.d/usr.sbin.mysqld修改新位置的读写权限12345注释以下两行并加入新的两行（用gedit修改该文件要记得删除可能存在的usr.sbin.mysqld~ 文件，不然启动会失败）\#/var/lib/mysql/ r,\#/var/lib/mysql/\*\* rwk,/home/database/mysql/ r,/home/database/mysql/\*\* rwk, 打开/etc/apparmor.d/abstractions/mysql修改数据库的依赖路径123注释下面一行并加入第三行(这是个大坑)\#/var/lib/mysql&#123;,d&#125;/mysql&#123;,d&#125;.sock rw,/home/database/mysql/mysql.sock rw, 重新加载apparmor刷新配置文件1$ sudo /etc/init.d/apparmor reload 重新加载mysql服务1$ sudo service mysql start 二：其他几个大坑可能导致启动失败mysql/的权限属性123456注意查看/home/database/mysql是否属于mysql组和mysql用户，及权限，若不是则执行$ sudo chown -R mysql:mysql /home/database/mysql$ sudo chmod 755 /home/database/mysql/没有mysql组的通过以下命令创建mysql组和用户$ sudo groupadd mysql$ sudo useradd -r -g mysql mysql database/的权限属性1234database/的权限，建议是755，属于root，root$ sudo chgrp root database/$ sudo chown root database/$ sudo chmod 755 database/ Linux selinux安全机制12在/etc/selinux/config 或类似的文件里，如有SELINUX项，请修改为SELINUX=disabled 三：结语网上的很多教程都过时且并不详细，提到这个又漏掉那个，本教程仍旧不敢保证你一定能成功。MySQL 8.0的配置文件太多了，my.cnf conf.d/ mysql.cnf mysql.conf.d/ 等等出现了引用包含。官方文档 六千多页，够玩儿一年。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源精神:Linux]]></title>
    <url>%2Ftitle%2Fd8add382%2F</url>
    <content type="text"><![CDATA[Linux的好，谁用谁知道!如果说，有人不知道Linux或者Linus(林纳斯)的话,我认为这只是一件普通得不能再普通的事了；但是，有人不知道安卓(android)吗？有吗？但凡是一个学生，不管小学生抑或是大学生，人人都知道安卓，即便用的是Apple家的产品，他也不可能不知道安卓。可见，安卓非常出名，实际上，今天繁荣的互联网世界背后，安卓大有功劳。可是，人们就是不知道Linux。 说起Linux，许多人都是摇头，要不是看不上它的黑框框就是嫌弃上面没有Office，反正Linux历来不受大众喜爱。可用Linux做的安卓却倍加受宠，这也说明，Linux能得到大众的喜爱，只是他们喜爱的是Linux以安卓出现的样子，包装得好看了，大家就喜欢了，一漏出原型，众人又摇头叹气。 在过去的几年里，我在Linux上花了许多时间，最初完全不懂，系统也是傻瓜式的安装，反正就安好了，就开始用。那时候完全不懂电脑，即便会用Office，会写文档，但是，现在看来那就是三脚猫功夫，充其量算是会点鼠标罢了。慢慢的，随着学习的深入，我发现，Linux真是个宝啊，软件多，安装快，够安全，够稳定，功能逆天，手机端，桌面端，服务器端，嵌入式，跨平台，甚至还能连接卫星。这些发现让我精神振奋，有如发了笔大财。今天，我已经完全适应并爱上了Linux，Windows系统也只有用部分软件时才打开，而在Linux下工作成了我的常态，研究生阶段开始，每天三小时以上用在了Linux系统上，现在这些文字也是在Linux下用Vim写的。用Vim或者Emacs真是一种享受和解放，因为输入文字不需要鼠标，一切操作都可以用简单的指令解决，写作效率提升至少百分之50以上。所以，作为信息时代的你，为什么不用Vim写作呢？ Linux是什么?这个问题每个人有每个人的看法，我的看法是: Linux是一个强大安全稳定的操作系统内核，是一种能解决绝大多数用户问题的真正的先进技术。 GNU/Linux就像大家熟知的Windows一样，是一种操作系统，是一个远远优于Windows的系统，该系统诞生于上世纪90年代，并在10年前生下了安卓。说起Linux就不得不提他的创始人Linus，也就是这位大神! 正是他对学校教学所用的Minix系统的不满,使他谋生了自己写一个操作系统的念头，并且坚持了下来。在他21岁的时候，他只是芬兰赫尔辛基大学的一名大学生，他一个人独立的写出了Linux的第一版，时间为1991.8.25.起初起名为Frex,意为FreeUnix:免费的Unix。只是当Frex传到服务器上保存时，他的小伙伴觉得干脆把Linus的名字修改一下，用Linux做为保存Frex的文件夹(目录)名。以后，越来越多的人就用Linux来指代这个系统了,所以，Linux的名字不是Linus自己用自己的名字起的，因为，当时的他就只是为了玩一把，就是写了个怪胎，只是没想到越发展越强大，越来越多黑客加入了该系统的开发，很快这个系统就初具规模，并通过互联网传播到了世界各地。今天，该系统(实际上是一个内核)仍然由Linus领导，全球各个角落的人通过互联网协同工作，协力推进该项目的发展。像谷歌，微软，Facebook，阿里巴巴等大的互联网公司都在为该项目贡献代码，该项目也成了地球上最大跨时最久的开发项目，到现在都还在开发，代码已超过2500万行，一个人一辈子也不可能看完。 1990那个年代1990年，中国还处在农业社会，那时的世界与今天的世界是十分不同的，人们无法用电话通话，沟通只能靠书信，那时候是真正的家书，贸易不发达，人口流动也不是那么频繁，改革开放也才稍显威力，然而国外的开源运动却搞得如火如荼，即将进入一个崭新的时代。1991年Linus花了三千五百美元，买了台电脑，装上了Minix，却发现上网老是出问题，干脆自己写一个处理工具，然后由这个小工具慢慢发展成了一个大的内核。那时候正是开源时代，由MIT的理查德.斯托曼创建的GNU项目也搞得风生水起，但是GNU有工具没有系统核心。而Linux刚好补上了这个空缺，两相结合，颇为完美，这样，结合GNU众多优秀的系统软件，GNU/Linux横空出世，并迅速得到了全球各地的开发人员的喜爱。开放源代码的理念一直深深的植根于理查德的脑中，他提出了GPL通用公共许可协议，完全开源了源代码，所有人都可以修改和再发布。这样的理念在有的人看来太危险了，通常的公司都会把源代码保护好，要是被谁用了还要打官司告对方，怎么会完全公布呢?可是，人家斯托曼就是玩得不一样，实际上他是被麻省理工学院那群人给气了才跑出来自己建立GNU的，他确实做到了，这很了不起。95年，中国开始有了互联网，但是用Linux的肯定不多，那时长城也还没有，一切都是同世界互联，也就20多年，谁能想到今天的互联网会如此庞大繁荣，如此活力焕发呢? 开源精神技术模型铁道俱乐部的黑客们在上世纪,大约1958年，在MIT(麻省理工学院)，有着IBM产的超大的计算机，占据一整个房间。一些不安分的学生总是想摸摸这台大机器,运行他们的程序。可是，即便是得到特权的学生也只能由操作员为其运行程序。这群学生都是来自一个喜欢铁路模型的俱乐部–技术模型铁道俱乐部。该俱乐部发明的术语是:设备中零件不工作了叫”losing”,当零件坏了那就说它”munged”,天天上课的人就是个”tool”,如果一个项目只是参与其中就会带来莫大的乐趣，那么就叫”hack”那时MIT的约翰.麦肯锡在电气工程学院教授一门在今天称为”人工智能“的课，尽管当时大部分人都不看好这门技术，但是铁道俱乐部的这些捣蛋鬼都选了该门课程，并在AI实验室扎根了下来。 “hack”最初大体就是由这群MIT的学生发明的，干事效率高的人自称为”hacker”(今天翻译为黑客).这群黑客的伦理是: 对计算机的访问应该是不受限制的，完全的，任何人都有动手尝试的权利。 他们相信把东西拆开而理解其内部原理并改进是重要的，任何试图阻止他们这样干的行为都是不被允许的 信息应该可以自由获取不能迷信权威计算机让世界更美好 这些是黑客们不断完善的信条，经过众多黑客的共献，AI实验室成了黑客伦理的化身。 最后一名黑客大约在1971年，一位喜欢计算机技术的天才从哈佛退学并加入了MIT,并同样加入了AI实验室，他就是斯托曼。在AI实验室，他们一起搞技术，写程序，分享黑客精神。直到一天，实验室的黑客们为了生计而被公司挖走,他们都走了，剩下斯托曼一个人，他很伤心，因为他为之奋斗的实验室已经分崩离析了，人走了，就什么也没有了。 为了推广黑客伦理，斯托曼离开了MIT,并于1983年,创立了GNU(GNU is NotUnix)。他把自己的理念都融入到了GNU里面，设置了十分霸道的GPL通用公共许可协议: 凡是用到了GPL协议里的代码，那么你的整个产品都必须开源。 他想通过GNU计划继续推广他的黑客伦理，让更多的人使用计算机,无障碍地查看和修改代码,完善产品。斯托曼几乎就是地球上最后的黑客了，现在看到的黑客都是第四代，第五六七代黑客了。实际上，今天的黑客更多的是骇客，他们喜欢搞破坏而不是分享理念，推动开源的发展。 GNU/Linux时间来到90年代，当Linus把Linux推向互联网时，GNU计划发现这正是他们需要的，于是，GNU/Linux横空出世，结合双方的优点，Linux发展得十分顺利。人们对开源持积极态度，即便有众多公司把代码看成机密，但是人们对获取源代码并修改的意愿一直存在。而Linux是完全开源的，任何人都可以下载并查看，修改源代码。 今天的开源世界今年，微软收购了Github这个全球最大的开源集散地，最大的男性交友网站,并且承诺继续维持原有的运作模式，越来越多的公司也都开始采用开源产品，因为 免费有人打补丁开源产品可迅速上线使用 似乎，今天又回到了开源运动火热的年代，不知道斯托曼现在怎么看这个世界。但是不管怎么说，要感谢这些黑客和天才，没有他们，就没有安卓，没有今天繁荣的互联网世界!]]></content>
      <categories>
        <category>互联网</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十年]]></title>
    <url>%2Ftitle%2Fbdfafec0%2F</url>
    <content type="text"><![CDATA[此文成于2018.5.12汶川大地震十周年忌，今日将其发表。文中回顾了十年来我视角下的世界变迁，限于记忆和篇幅，文中每一句话均对应一个历史事件和重大的社会发展阶段！愿诸君共缅怀这段时光，这十年是我们90后真正成长并接过社会发展重担的十年，是我们成家立业，求学经商变迁的十年，也是我们90后追求自由，幸福，公平生活的十年，回顾于此，心中颇多感触，噫吁嚱！（谢波,于成都理工) 十年前稚气未脱是小孩，十年后老司机终日开小差。 十年来，腹胸腰背有所长，父母两鬓却微白，额间细纹埋！ 十年前，绿皮火车慢徘徊，今朝高铁祖国遍地开。 北上广深，四大神针，撑起异度文明。 十年前安识灰霭？美帝普及全民怼雾霾。PM2.5,你好坏！ 嫦娥先去，玉兔又来，蛟龙今又下海，中华科技，日新月异，遍地人才栽。 智能时代找AI，四大新贵，人人爱，人人为你站台！ 零八奥运今犹记，如今君又来，北张二市等着你，华夏必将更精彩。 全球变暖，气温不要升太快？烤化两极冰盖，直把东京热坏！ 十年前慧聪网自诩掌平台，十年来，马云怪才，缓缓来，阿里宝贝升级打怪，一幕幕，一招招，呈现女性最爱！ 来的终究会来，任你癫狂，我无惧任何祸灾。 十年前它颐指气使，暗控国之命脉，如今杀出个大boss太厉害！ 什么是谈笑风生潇洒自在，什么又是香港记者跑得快？全都是苟屁，给我滚开！ 有人偏爱“闷声大发财”，有人好色又贪财，为祸妇女，奇怪日记怀中揣！ 反腐大戏扣人心怀，贪腐代表犹记陕西表哥杨达才，车祸现场，竟能喜笑颜开？ 见你搂财，也见你人走茶凉倒台，监狱中索未来，回味往昔，终识儿时田园时光最自在，邻家姑娘最可爱！ 金融危机，华尔街哭泣，我有4万亿，高楼遍地林立，房奴满街无头绪，可气，可气！ 十年前汶川挂人心怀，逝者不在，十年来，蜀地重开，重建家园最实在，我们仍要打牌，犹爱吃菜，家有好女养，贤胥万里来！ 十年前安卓出生是小孩，十年来，iphone来到X时代，果粉卓粉，相杀相爱,手机反复买，旧的不去新的不来。 网络成了新平台，主播变大拿，网民成拥虿！键盘侠治国滔滔不绝，一句不对，怼你祖宗十八代！ 猫狗是萌宠，Panda最可爱，Bilibili的小哥哥小姐姐安在？日漫国漫，腾讯动漫，马化腾手握两撒手锏! Dota传奇，英雄联盟奇迹，今晚吃鸡，大吉大利！ 直男癌，绿茶婊，帽子扣得真不少，千好万好，愿意傻傻关心你的人才最好！ 海天盛宴，人体器官，二代们使劲撒欢，王思聪炮轰众客官：不要脸！ 十年前下馆子，今有外卖，外卖外卖，信誉犹在？ 十年前人等车，十年后车等人，人车车人分不清，滴滴伴你安全出行？ 十年前，购物逛街，十年后购物上网，双11成购物节，单身狗遭了一劫又一劫。 过年回家，七大姑八大姨笑哈哈，男友哇，女友哇，赶快给我带回家！ 全民健身跑起来，约你，来不来？ 通信便利，交心不在，相顾无言，低头微信畅开怀—还真是怪！ 空间朋友圈，秀完美食秀恩爱，可劲儿使能耐，秀得恩爱，死得最快！众人还把你埋汰！ 计划生育，国之大计，终遭抛弃，解放妇女生育权利。 可男多女少，女友不好找，Gay佬闺蜜气氛诡异，似塑料姐妹花小猪佩奇。 十年变化可真是快！！！来到了什么新时代。 这是一个什么样的时代？这是学‘习’的时代，知识千金难买，自由成为真爱！ 90来00来，一代又一代，绽放青春的精彩，定义国家的未来，说什么90后无用，可识天生我才？ 这是一个新时代，梦想仍在，小伙子不要怕，摔倒后侬可爬起来！ 愿君观后莞尔笑颜开，奋力拼搏方可逐梦未来！]]></content>
      <categories>
        <category>回忆</category>
      </categories>
      <tags>
        <tag>十年，变迁</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈现代操作系统历史]]></title>
    <url>%2Ftitle%2F500c6ff0%2F</url>
    <content type="text"><![CDATA[智能手机操作系统智能手机的使用已十分普遍了。不论苹果或是安卓系统的智能手机都拥有巨大的市场，拥虿甚广！可是，有谁能想到这个如此受欢迎的东西也就诞生十来年。2007年11月份，安卓从加州山景城谷歌公司溜出，并迅速引领了移动互联网的发展！ 大概在2000年代，手机市场还是由诺基亚统治，一个做木材生意的公司，把手机做到全球第一确实了不起。与此同时，一名叫做Andy Rubin的小伙子创立公司并开发了一种新的相机系统，用于图片处理。但是相机市场的下滑，迫使该公司转向于手机系统。他利用开源的Linux稳定内核作为其手机系统的核心，成功开发出了一种能上网的系统，后来这个系统在2005年被谷歌收购，经过进一步开发，于2007年11月释出，这就是安卓。于此同时，苹果公司也发布了一款手机系统，它的内核来源于BSD版本的Unix，同Linux属于同族不同分支的系统。我们可以这样认为，即苹果系统是安卓系统的叔叔。他们的共同祖先是贝尔实验室的Unix系统。当然，这个贝尔实验室还出过七个诺贝尔奖，互联网和C语言，C++语言也诞生于此。 PC操作系统除了手机操作系统，我们常见的还有电脑上的操作系统，这种系统发迹于上世纪的美国，最开始分为多个派别，后来大体两派：一派是比尔盖茨的微软，一派就是各大公司和大学，实验室合作的或独立开发的系统，其中贝尔实验室的Unix操作系统是最成功的。今天大家看到的Windows10操作系统则源于1981年比尔盖茨花5万美元从Seattle Computer Systems（西雅图计算机系统公司)买的DOS系统(磁盘操作系统，就是一个黑框框)。聪明的比尔盖茨结合IBM的PC电脑，售卖该DOS系统，赚取大量利润，并以此为基础改进DOS系统，并最终演变出了Windows NT系统，也就是Windows95，Windows98，Windows2000。而后Windows NT不断进化，诞生了Windows XP，Windows Vista, Windows 7, Windows 8/8.1，Windows10。Windows系统是一个很好用，但却是一个很复杂而很难学习的系统，其内部为了兼容以往的软件和系统，保留了大量不合宜的代码，这也就导致Windows是地球上架构最烂的系统，最容易受到黑客攻击的系统。客观讲，Windows是个很成功的产品，但却不是像苹果那样的杰作。Windows的发迹，主要是因为比尔盖茨商业头脑太厉害，少有干得过他的。 另外一个电脑操作系统是苹果的Mac os x操作系统，源于乔布斯被苹果公司开除后自创的达尔文系统，底层依旧是Unix核心。当乔布斯重回苹果时，带回了该系统，并开发出了苹果系统。苹果系统定义了现代操作系统的图形用户界面，下拉菜单，按钮，鼠标等控件。微软的电脑界面，菜单等等都是学的苹果的，要不是苹果，微软可能还是有一个黑框框。 第三类电脑操作系统是Unix操作系统的变种Linux衍生版，因为Linux只是一个内核，通过结合不同的系统软件就是不同的款，但是核心一致。所以这一类操作系统特别多，因为开源，任何人可以拿过来改一下并发布。我现在写这篇文章的操作系统是基于Linux内核的Ubuntu(我现在已几乎不用Windows了)。目前Ubuntu是最成功的桌面版Linux操作系统，其他的Linux操作系统还有Debian，Centos，Redhat约上百款。安卓也是基于Linux的，可见Linux非常强大，手机端和电脑端都吃得开。 服务器操作系统，超级计算机操作系统由于这一类是属于行业的操作系统，民间几乎不可能看到，但是它却在背后默默的为亿万人民服务。比如你购物需要进行交易结算，用任何的App都需要后台支持，这些都要靠服务器操作系统来处理。目前服务器操作系统分为两大阵营，一派微软，一派Linux。微软在开发PC版本的操作系统的同时也开发了服务器操作系统，目前60%左右的服务器操作系统是Linux，因为它架构好，易修改，稳定。服务器必需要稳定，试想你在付款，一下卡了，你的钱不就白花了吗？这也是Linux的强项，Linux的一款叫做Centos的系统据说创下过５年不关机不出事故的记录，对比微软动不动就出事故，犯卡，Linux能统治服务器自然就合情合理了。 另外一个很重要的操作系统是超级计算机的系统，因为超级计算机管理的存储和运算节点十分的庞大，所以系统必需稳定好用。而Linux刚好满足这些特点，Linux再次占领该领域，目前，世界前500强超级计算机全都使用Linux系统，中国的天河，神威太湖之光也是中国基于Linux内核自主研发的。 物联网系统随着社会生产力的发展，传统互联网的使用有了更高的追求方向，专家们提出了基于万物互联的物联网概念。物联网就是把所有能连网的电器都用网连起来，比如空调，冰箱，汽车，卫星，手机，智能手表，智能自行车，智能椅子，甚至是床都可以用网连起来。人们会问，床不是没网吗？现在没有，可只要未来有需要，嵌入式工程师们早晚会开发出来的，只需对相应硬件给予软件，配上网络。目前，专家们提出的物联网，在我看来是通过中央控制器控制各种不同的物理器件，获取大数据存储在云服务器上，结合新的技术，例如人工智能，开展新的服务模式，为消费者提供更好的产品和服务。针对不同的器件，功能不同，就需要设计不同的操作系统，显然空调和床的功能不一样，这不像手机，品牌不同，但功能差不多。目前，众多物联网公司正利用Linux内核开发物联网操作系统，也就是嵌入式系统，其实安卓系统也是一款嵌入式操作系统。我认为，今后几十年，我们的家庭和城市治理要更多的依靠物联网基础设施，人们的生活便利程度不断提高，未来的社会将是一个相当程度靠网络管理的高度智能化的社会。当然，政府肯定还存在，但是重要性会下降，它不会像今天那么重要。可能在我们这代人四五十岁的时候，我们的家主要是有智能器件打理，家政服务就不再需要了。各种专门仪器会处理扫地，洗衣，烧水，洗碗，铺床等等工作。 总结按目前的分类法，操作系统分为手机端，服务器端，桌面端，物联网端。其中Windows在桌面和服务器端能做；苹果在手机和桌面端能用；Linux在手机，桌面，服务器，物联网上都能做！看来Linux是个非常有用的技术，这也是我下心学习它的原因，因为我赌定它会成为未来几十年社会发展的动力。未来，随着新技术的出现，应该还会有新的系统出现，可能就衍生自Linux。未来的世界将是万物互联的世界，我家的冰箱可能和你家的冰箱在聊天，在恋爱，谁说机器就不能恋爱呢？洗碗机可能和灶台吐槽主人的烹饪技术，阳台看花的仪器可以向你报告今天该花吸收的二氧化碳量，桌子和椅子组成一家人为你服务。这样想想，感觉未来真是挺美好的，我们的生活将和智能的器件关联起来，人类的历史也会是人和物的历史。人类只能走这条智能化，信息化的路，所以，让我们为这一天的早日到来努力奋斗吧。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我对英语学习的看法(一)]]></title>
    <url>%2Ftitle%2F3dfb8a8e%2F</url>
    <content type="text"><![CDATA[英语学习英语学习的目的 A.为了工作B.为了出国C.为了旅游D.为了学术E.为了考试 想来,英语的学习目的大体如此,并不绝对,各种想法都有.我呢,少时不知英语的重要性完全对英语漠视甚至讨厌,有段时间进而讨厌起英语老师来了,现在来想来,实在是傻.后悔是没后悔药了,好在我把自己给救过来了,英语的学习也给我快乐和目标.以前我学习英语,从来都是为了考试,从不想为什么,因为心里讨厌着呢.后来,上了大学,我发现不用英语不行了,交流,工作,学习迫使自己用英语,这个是很大的转变,因为一旦你开始用它,你就会发现语言也不是那么讨厌,相反,是十分有用,好用,可用.我自己对英语有如此大的态度转变可能是因为: 1.英语,我学来不是奔着考试去的.2.用什么学什么,太高大上的语法对我并无作用,当然语法十分重要.3.找对好的方法,学习英语也不是那么难吧? 最大的转变还是大二去酒店做兼职的时候，一个外国客人吃披萨还是什么时，问我要胡椒(pepper),我给听成了纸(paper),，所以我就给他递上了纸巾。接下来，有趣的来了，他感到不可思议，睁大了眼睛，疑惑为什么我会给他纸巾，后来经理来轻松的化解了这个小问题。但是，事后我反思，他为何会很吃惊？看到这里，不知道，中国同学能发现问题吗？如果，老外真的说的paper你们会给他什么呢？是一张写字的纸还是餐巾纸呢？这里就要谈到语言的不同了，这属于语用学的内容。在中文里，纸代表写字的纸，也代表餐巾纸，卫生纸等等纸，这是中文的博大精深之处。但是，英文不是这样的。英文里的纸就是paper,指代写字的纸张，餐巾纸该叫napkin或者tissue. 老外脑袋里无法把这两个概念，纸，餐巾纸等同起来，因为他们完全不一样嘛！所以，你可以想象”一个外国人说：小伙子，给我拿胡椒过来，然后我屁颠屁颠的给了他餐巾纸，他当然觉得不可思议了“，怕是觉得我是弱智了，但是语言的差别，他也不知道，他不知道中国人会把他们用来写字的纸和餐巾联系起来。但是，这个发现，给我带来的思考却十分的丰富，原来，我学的英语只是我脑袋里塑造的一个假象，全是乱的。后来，凡是听到paper或pepper之类的，一概递上胡椒，效果很好，他们还夸我机灵，有时还有小费。这也是改变我，并使我重新自学英文的一大出发点吧。以上的总结,可能还不周延.但是,已明显看出我自己摆脱了对英语的厌恶,而且超过了对考试的要求；心态上,不再把考试当成学习它的目标了,所以,有个好目标很重要.但是,中国的教育就是要逼你去死扣语法,做一些怪题,学一口哑巴英语,说来也怪,大家相安无事,就这么学了十几年的英语,也是过来了. 英语学习的方法各种方法都试过,但也仅限于试过,没坚持下来,多好的方法也没有用.据我的观察,任何一门语言学习,都需要建立良好的基础知识,这些知识是学好语言的关键,很不幸,中国人被传统教育坑害惨了.很多英语老师拿着学究派的语法死讲,语法确实重要,但是连词都吃不透,句都不懂,如何谈语法?我想,语言学习可以由以下一些点出发: A.学习基本词汇,词汇分层:基本词,延伸词,高层词,词网 一门语言的诞生过程中,单词才会渐渐多起来,很多词在历史中,一直在用,但是基本词义是一直存在的,进而延伸出词,最后归纳出高层词汇.举例:circle 这算是一个高层词汇,它往下可以得到各种和圆性质有关的词汇:circular,circuit,,circumstance,bicycle,cycle等等.这些词汇,都是从circle这一物理样态里衍生出来的.同样的比如:apple,bad,gold,tin四个词,是英语中最古老的四个词汇,今天亿万人仍旧在用,词义也没变多少,所以基本词汇很重要. 高中就被老师忽悠买了牛津高阶词典,但是几乎没用过的同学一定很多,我也是最近才开始想到, 牛津3000词汇不就是那些重要的基本词汇的总结吗?牛津词典不就是用这几千词汇来解释多达几十万的词汇吗? 以前,中国人讲究大词,比如讲一个人奇怪,有的人就能用grotesque这种词汇,但是这是一种花式用法. 什么意思?就是:这种词,多见诸于媒体报刊,博眼球的,写作要是用这个,也太怪了,不得体. 然而中国人甚觉良好,我以前也是,每回用了高大上的词汇还不忘夸自己几句,同孔乙己教小孩回字的 四种写法一般,沾沾自喜. B.学习简单的句式结构 有了单词,要学会一些基本的句式结构,然后将词用起来,这点很重要.传统的语法书对于各种句式,结构, 语法,总是不厌其烦的讲述.我认为,这些书,又有很多是大家(大方之家)写的,一定很好,所以我以前还拿 张道真的语法来看,但是一看就发现看不下去.一种句型,有什么规则,然后列出几条例外规则,整本语法书 就是在书写规则,例外规则,几张不规则动词变化表,什么特殊句式表,我背不下,记不了.学习英语的信心陡然下降,还感叹:英语可真难啊!实际上,英语中没有那么多例外,也没那么多套路,基本句型五种,时态分两种,语态两类,语气四种.大体如此.今后,我想我应该会慢慢更新从旋元佑老师哪里学习来的语法概念吧! C.广读英语 读英语,不是去看什么美剧,什么?不是很多人都说看美剧能学英语吗?呵呵,看电视剧学英语只能学得只言片语,那些说看美剧学英语是指学地道的口语,他们本身水平较高了,所以他们说这个好.但是一个外国人一来就学’仙人板板‘,这种四川话中的地道的土话,你觉得学得会吗?或者说有意义吗?所以初学者,肯定不是要去学英语中的这类词汇,而美剧中充斥着类似的各种典故,政治隐射,俚语,不是有点儿水平的人,看不懂.中国人一提老王,马上就想到戴绿帽的感觉.但是,外国人却不觉得,对于中国人来说,外国人讲他们的老王的时候,我们也不会觉得好笑的,这也是很多中国人并不觉得有些 美式笑话好笑的原因.但是,美剧可不可以看呢?当然可以啊,但是看就老老实实地看,不用抱着学英语的 态度去看,那样很累,就是放松的开心就好了,可能会学到一些口语表达.比如,我以前看生活大爆炸的时 候,也是轻松自在,也学了写口语,谢耳朵的搞怪确实连我这个理科生也觉得好笑. 论述这么多,回过头来,英语还是要多读文章,标准的英语,就是一根准绳,培养最好的语言基础, 一旦读得多了外国的老王你也认识了,那就差不多了,你的语感自然在阅读的过程中慢慢就来了,有些表达 顿时就蹦出来了,这是我的经验了.但是,读什么呢?读新课标?其实都可以,关键是要符合语法标准且同 自己的水准契合的文字材料,最好不要有中文,多读,不认识的单词多看几遍,慢慢就知道意思了. 我最开始对英语一窍不通,现在好一点儿.有一天,发现了BBC的软件,下了一个,慢慢看新闻,那种英语 是最传统的英语了,新闻既有意思,又提升自己的见识和眼界,随后我连我自己的手机也设置成 英文版本的(这不算崇洋媚外吧),大部分软件都是英语的,开始不认识,但是久了就知道各种按键对应的 英语单词了.后来,我的手机就一直是英文版本的了,现在想想都好几年了,因为天天用,这种英语习惯 已经进了脑子了,又促进了对英语的兴趣.然后看的文章也偏向英语,可以说,阅读改变了我,我是从最底层 走出来的,能在精神上把自己活得像个国际人士(自诩的)算是不容易了,但是我还要继续努力,还有很多经典 的英语书籍等待着我. D.勤练听力 听力,怎么说呢,也是随着用BBC,就在BBC上下它的播客节目来听,十分有意思.慢慢的,听的材料就熟悉了, 语感就来了,而且回去发现四级自己可以听写出每个单词,我都没想到.我平时,在图书馆听,路上偶尔听 反正节目有意思,有深度,不觉得是练习听力,其实这就是我的生活,和别人听音乐是一样的,成了一种爱好 了.所以,我建议愿意练习听力的同学,直接上外国网站去下载播客节目来听.这些年听过的播客节目有:BBC的CrowdScience,BBC Culture,BBC News,Trending还有美国航空航天管理局NASA的播客,以及全球的两大顶级科学杂志Science和Natured的播客,当然,这个比较难,全是地球上的前沿的科技和技术,我发现在 很久一段时间内,我都是靠这些播客来了解科学发展,人类的进步,中国大陆几乎不讲这些,或者报道落后. 从NASA开播客来看,美帝对科学的普及都到了一种平常的状态,而中国民众却很少有机会得到科学普及, 不要讲那种顶级杂志了,就是小的媒体,除了CCTV10那走进科学,天天找鬼,震惊,还能有什么呢? 这种种,打开了我的见识,提升了英语听力,对语言的学习又达到了一种新感觉.所以,听力不要用四六级, 这是我的看法,可能不适用,但是,我就是这么过来的,我相信其他人只要愿意,也能做到.听得多了,语感 自然有的,年轻人,还是要多提高一下自己的知识水平.举个例:有一次在听Nature两主持人讨论考古学家 发掘工作时,主持人来了句:Which bEgs a question. 我马上就把它理解成了:’那么问题就来了’这句话, 当时在中国大陆这话很火,是网友们恶搞蓝翔挖掘机的,但是,英语里这样的表达,我就觉得理解起来就很好, 简直是活灵活现啊.语言,终归要用来听和说的,要多练习,希望有一天,能成为自己生活的一部分, 就像我们伟大的汉字一样. 下面就结合看旋元佑老师的书籍得到的知识将一些语法知识,记录在此,希望自己十年后能回来看看, 这是写给未来的信吧,也可以当成写给儿子女儿的英语入门读物,当然,也一并写给未来妻子了, 亲爱的,期待你的到来.也欢迎有兴趣的人来看看,讲得不好,你可以指出.(Aug 13 2018) 英语的词汇类型英语中一共有十类词,大体分为下面十类,根据用法,有些句子和词可以变化成相应的词. 十大类词 冠词 名词 动词 形容词 副词 介词 代词 连词 助动词 叹词 名词类 名词 动名词 代名词 名词从句 不定词 动词类 动词 分词 不定式 动名词 介词 副词类 副词 状语从句 形容词类 形容词 分词 关系从句 上面的分类是我在阅读一些句子后结合语法给出的分类,我发现这些词类广泛的用于任何领域的英语中. 冠词:主要是为了指示一个名词,或事情,指示的清楚的就用定冠词,指示不清的就用不定冠词.比如一个苹果,an apple就讲的不清楚,因为,这个苹果不知道是谁的,可能是你的,也可能是别人的,但是确实是一个,所以用an.但是,这个苹果,the apple就指示清楚了,因为它明显指代刚刚我说的那个,指示明确.所以,传统语法就讲,前文提到过的用the,根本原因就是提到过,具有明显的时空对应感觉在里面,指哪个大家很清楚.所以,不需要去背传统的语法,你发现指示得清楚就用the,that之类的就好了. 名词: 指代事物,事情.最普遍的一种词了,中文中也一样,因为我们人类需要对客观世界进行描述,所以一定要有个名字,名词就是它们的名称啦! 动词: 这个就是指动作的词汇,因为有一类东西我们无法用名词来描述,比如杀,吃,打,跑.这些词都是动词当然他们有时候会蜕变成名词.可见语言里倾向于静态的描述词汇.动词和名词反映的是人们的时空观,尤其是词汇诞生时,创造者一定有时空的观念在里面.这点后文还会专门细讲. 形容词: 要看蚊子长得帅不帅,大象跑得快不快,具体问题具体分析.这是我高中物理老师的原话,我们对一些事物需要一种主观性或客观性的修饰词来描述,这就是形容词的基本作用.漂亮,帅,高,快,有趣的都是修饰性的,都可以作为形容词. 副词: 可是美也得有个程度,帅也有相对吧,跑得快也是相对的,所以副词就出来了,它修饰动词和形容词,表示到底有多美的程度,范围,跑的具体状态. 介词: 这词用法是表达所有关系,three cars of mine.同时介词也表示时空关系和动作.如:drop off 指掉落脱离了原来的状态. 代词: 代词可以看出指代一讲事物,但是用法有不同的地方. 连词: 主要是用于构句,用连词来把两个或多个句子连接起来.为什么呢？因为,有的句子间有因果关系,时空关系,并列关系等.如because,since,after,before.这样两个句子才能连在一起.I love you, because youare so beautiful. I was so tired after doing such a work. 助动词: 助词,就是去帮助别人啦,帮助谁呢？帮助动词啦.用来构成时态或者一种语气,也就是时间先后关系和语气的用法.既然一个动词需要助动词,那么这个动词就有点虚,需要别人来帮助才能使自己把事情讲清楚.Eg:If I had know, I would have done that earlier! 这里面的助动词就要帮助动词把事情说清楚. 叹词: 这个没什么可以说的,惊叹,感叹,赞叹等.Suprise, Woh, Ha, Oh! 英语的句子类别英语的句式分为三大类,分别是 A.初级 限定句单句:B.中级 复合句:C.高级 简化句: 什么是限定句单句呢? 就是只有一个叙事的动词的句子.I love you. He has a good wife.这类句子很简单,是最基础的句子,也就是我们讲得小学生都懂的那种.但是复合句呢,就要稍微复杂一些,但包含的意义更丰富.复合句靠连词连接,表达一个完整的具有意义的句子.When we sit here,we can see the snow-covered mountain.用when 来连接两个句子,交代了我们看到白雪皑皑的山时的状态:坐着.所以这是一个状语从句.到了高级句时,就是把复合句中的废话删除,只留一个动词,其他的动词都变成非谓语动词.就是动名词,分词,不定词等等.比如上面那句,前后出现了we,删掉一个,然后把其中一个动词变成非谓语动词When sitting here,we can see thesnow-covered mountain,然后when也可以删掉了,因为sitting就是一个现在分词,具有进行的意味,表示我们坐着的状态.所以Sitting here,we can see the snow-covered mountain就是最简化也是修辞最完成的句子了.以上三句,就把英语的种种变化都表现出来了,以后就是逐个语法概念的的学习,直到我们看到像这样的句子:The doctor of the National Meteorological Observartory Jiang Wen who is graduated from the CMU saidthat the typooh was coming soon.能简化成:The typooh was coming soon,said Jiang Wen,the doctor of the National MeterologicalObservartory,graduated from the CMU 这样就非常不错了.(Aug 13 2018) 第零章 句子的句型英语句子就只有五种句型,其他的句型皆是由这五种句型组合得到,所以,学会分析五种基本句型是重中之重常见的句子成分有主语(S),动词(V),宾语(O),补语(C)也即这四个词的(Subject,Verb,Object,Compliment)的首字母,这种记法没有什么大道理,只是一种方便表达的技术性手段而已、五种句型分别为 S + V S + V + O S + V + C S + V + O + C S + V + O + O 可以看到,任何一种句子里面都有动词,相反的,什么补语或者宾语有时候并不出现,所以动词是英语句子中的关键。同时,主语也是都存在的,所以,写英语作文的时候,好好想想自己主语动词交代清楚没？很多作文有主语和动词,但是指代错误,称为牛头不对马嘴,让人看了产生逻辑错乱,云里雾里的,这错误我以前不懂语法的时候可是常常犯的. 对于上面五个句子,我想可以用一句话来概括:某物做了什么,或者某物怎么怎么样。主语交代事情的执行者,就是那个物(注意,为了描述的抽象简洁,人也看成物,这样可以用一种比较有把握的描述手段展开讨论).动词承载动作,宾语成了动作的对象,如果没有宾语,那就是某物是什么或者某物怎么了。这样,可以开始讨论一下这五个句子类型了。一个主语做了个事,附带还可能带有修饰成分。而做一件事,是具有相对关系的,也就是,A对B做了什么,或者A独自做了什么,只有这两种可能了吧！ 对于1,只有主语和动词,这就说明,该物独自干了个事情,没有作用对象,现在,想想我们生活中是不是有很多一个物做事的时候? 比如,狗跑,叶落,风吹。The dog runs,the leaves fall,the wind blows.像上面的一类动词,自己就能把事情描述清楚,并不需要宾语,我们称之为不及物动词,及物就是需要接个宾语的意思,不及物,就是我不需要宾语个人照样能玩得转,嘿嘿！所以像I kill, he eats, she loves 这种句子就不对,因为呀,这种句子无法表达一个完整的事情,我杀,他吃,她爱,都不够妥帖,一看都知道,这些动词需要有个作用的对象,也就是宾语,所以这种词就称为及物动词,但是要注意,及物动词和不及物动词有时候可以转换,有的意思可能有些变化或者不变,比如run,作跑讲时,不及物,但是作为操作,运营时就是及物动词了,His mother runs a company.他妈妈经营着一家公司,这时候的run就是及物动词了。所以背单词时候一定要看清楚及物还是不及物,不要用错了,上面的句子,我们还是补全看着合适些:I killed him, he eats eggs. she loves me. 对于2,我想刚才的论述很完备了,不用再讲了. 对于3,这个需要多将一些,关于补语,我在相当长的一段时间内都是晕的.什么是补语呢？补语就是具有修饰性的词语或者句子,干脆点讲,就是形容词。该句也就是某物怎么怎么样,这样一种描述性的句子,甚至不涉及到动词有人马上就要问了,你句子里不是写的S + V + C吗？明明有动词,怎么不涉及动词呢？这样来看,似乎是对的但是这样来理解就麻烦了,想这样的一类句子, She looks beautiful,I am a handsome guy.She appears unhappy. 里面的动词不具有动作,我认为它们是假动词或者伪动词,他们的作用主要是连接主语和宾语做一种等价的描述就是:她美,我帅,她不高兴,这里哪里有动作,完全没有嘛! 所以这种动词,语言学家又给他们名了个名:系动词系就是联系,连缀的意思,这样的一类动词都可以翻译为’是’这个意思,而’是’是最没用的动词了. She looks beautiful = She is beautifulShe appears unhappy = She is unhappy 你看是不是前后都通,一个意思嘛！所以呀,下次再给女友写情书,就不要写You looks beautiful 干脆写成You are beautiful 来得实在,不美,你也不爱呀！要是她看起来不高兴,也别用appears了,当你都能感觉她像生气了,那么多半错不了,得哄了,我以前就是不爱哄,完了,独身一人！所以,言归正传,第三类句型就是什么是什么,至于像:I am a handsome guy.这样的句子,里面的guy不是形容词,但是我们可以这样理解:我是一个具有男人性质的或者男子气息的小伙子,因为这样的句子肯定不只是要表达一个陈述的意思,它还有一层暗含的意味在里面。所以,看美剧里有的人说:I am a man.时,他是说我是个男子汉的意思,具有一种性质在里面。要是哪个女同学夸你：you are really a man.你真男人。你觉得她只想说你是个男的？come on! 小子,是该你表现的时候了。对句子的分析足够敏感后,生活中什么人讲什么话一下就懂了.说不定学好语言的套路后还能促进基因交流. 对于4,它就是第2和3两句复合的句型,S + V + O + C = S + V + (S + V + C)然后(S + V + C)又看成是O 或C。这样S + V + O + C = S + V + (O/C) 还是基本句型嘛!这种句型如何理解呢？可以先从后面来,O + C 就是宾语加补语,回到句型3,我们知道这是说什么是什么的意思。那么加上S + V就是某物对于什么是什么有个动作,什么动作呢？比如,认为,考虑,使得等动作所以I consider she funny, Tom made me crying.按照上面的定义O + C = S + V + C,O = S好理解,因为主语宾语都可以是名词,补语相互对应,但是V是如何跑出来的呢？我们讲过,在S + V + C 中,V解释为’是’,所以V 可以替换成具有是这个意思的动词。 I consider she funnyS V O CI consider that she is funnyS V S V C 这样,凡是这样的句子都可以加一个具有是这个意思的动词进去,然后加that 形成从句,表示cosider 了一件事这件事就是She is funny.既然是一件事,就相当于名词,所以这个从句就是名词从句. I consider (that she is funny)S V O 所以回忆以前学习英语,是不是被要求背consider, made , deem 等等动词,造句时要有这一种规则?这样的规则固然没错,可是谁又背得完呢?只要理解了,那么,那些动词是这样造句不是很简单吗？ I insist you uglyI believe the universe immenseI made the school teacher my wife 然后你可以加一个’是’的动词到后面的成分来看句子通不通 you are uglythe niverse is immensethe school teacher is my wife 是通的,那上面的三句就是 S + V + O + C的结构,这也是检查这种句子的方法:插入一个是,判断句子通顺 对于5.我想可以用一样的套路来理解,S + V + O + O = S + V + (S + V + O),同上面的分析如出一辙, I gave her a ring.S V O OI call her honeyS V O O 注意这个和上面第四容易混淆,但是一旦我们利用插入是这个动词后 she is a ringshe is honey 句意不通,可见这是两个不同的宾语,没法儿划等,所以句型也就搞懂了 总结一下,判断句子的句型,就是这五种,而且最后两种特别好处理,第一种也一看就懂了,第三种找是这个意思,找不出是这个意思就是第二种句型了所以不要去背语法,要理解语法,解释语法,这就效率很高了,而且很有意思。一点儿都不枯燥。(Aug 14 2018) 第一章 名词词组按照词类和语法穿插的模式,花点儿时间,将所有语法讲完是切实可行的.首先是名词或者说名词词组。但是,光是讲名词是不行的,因为名词一定会用到句子中,而句子中的名词绝对是以名词词组的形式出现的,所以需要讲名词词组的语法知识。我想,一种词汇成分,在句子中可以从三个方面来考虑: 1.形式 2.位置 3.作用 不论看什么句子,分析何种成分,要看该句子的形式：就是传统语法反复灌输的知识,二是:位置,这个很重要,许多语法都是讲形式,对位置都是用:’规定就是如此’这样的说法来搪塞,至于作用嘛,谈得更少,所以像下面的三句话,意思完全不一样,要是出现在听力中,绝对没什么人能作对 a.He writes,as if he is a left-handed(他写字的样子看起来就是个左撇子,本意:就是左撇子)b.He writes,as if he was a left-handed(他写字的样子看起来有点儿像是个左撇子,本意:有点儿像左撇子,但不敢肯定)c.He writes,as if he were a left-handed(他写字的样子,装得他是个左撇子一样,本意:装作左撇子,实际上不是左撇子) 下面是听力对应的选项: A.he used to using left hand 听到a句时选择的答案B.he may like using left hand 听到b句时选择的答案C.he used to using right hand 听到c句时选择的答案D.he is capabal of using both hands 干扰项,给那些听清楚了,但犹豫的人准备的。 根据经验,A选项,极少数的人会选,即便他听到的是a句,因为他分别不出这里的用法,实际上,大部分能听清楚的人听到任何一句都会选B,当然其他的大多数人是听不清楚就好办了,猜嘛!这里c其实就是虚拟语气的用法,但是传统的句法,只讲了这个语气,但是从来不会把另外的ab两种用法给你讲明白,因为他们认为语法知识讲到了,而且详细了。但是讲人写个类似a的句子时,大部分人就会写成c的版本,然而这是错的,所以对语法的用法不熟悉,导致大部分人开始批判语法,进而讨厌语法。 现在开始正式进入语法知识点的学习,将语法知识连起来,而不是讲什么不规则动词表,抑或是什么有道词典时不时搞的那种’还在用xxx表示xxx,你out了’这种知识最没用,最能麻痹人。比如有次有道词典讲的:’还在用how are you,i am fine打招呼？’这样的噱头。实际上，how are you是非常传统的,i am fine 也十分妥帖,打招呼用这个无论亲疏都可以，不知道有道是不是招了几个考过了专八的会讲满口语法错误的英语的英语专业的毕业生.(Aug 27, 2018) 名词要看成词组，改词组由三部分组成，分为冠词，形容词，名词。三部分合在一起组成名词词组在句子中充当主语，宾语等成分.即：冠词 (副词) 形容词 名词 == 名称词组，在句子中充当语法成分，例如 a bad girlthat tiny balla rather tired man 可以看到，凡是一个名词在使用时，均是使用三部分构成，当然也可以少某些部分the girlthose (暗指人，尤其在语境中)apples等等都是三部分省略的结果，凡是一个名词，一定要看成三部分的组合，这样才比较有把握。 Oct 11, 2018 Shieber]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>英语学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站建立]]></title>
    <url>%2Ftitle%2Fe6eb3c29%2F</url>
    <content type="text"><![CDATA[踩了各种坑，经过各种困难，终于把网站建立好了，利用hexo，只需要简单的几个指令。 123$ hexo g$ hexo s$ hexo d 前端发展飞速，bootstrap，JQuery广泛使用，近来尤雨溪的Vue也开始火起来了。hexo由台湾大神Tommy351写就，在中国有着广泛的使用！据说他当年看哪个博客模板都觉得丑，遂自己写了一个，就是这个hexo.以下是官方给的使用指南，十分简单。 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>网页</category>
      </categories>
      <tags>
        <tag>建站伊始</tag>
      </tags>
  </entry>
</search>
