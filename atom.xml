<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shieber</title>
  
  <subtitle>友朋自远方来，不亦乐乎?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shieber.cn/"/>
  <updated>2020-11-08T15:19:10.935Z</updated>
  <id>http://www.shieber.cn/</id>
  
  <author>
    <name>Shieber</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C/Python/Go/Rust/Dart控制原语</title>
    <link href="http://www.shieber.cn/title/5ad75c9d/"/>
    <id>http://www.shieber.cn/title/5ad75c9d/</id>
    <published>2020-11-08T15:06:25.000Z</published>
    <updated>2020-11-08T15:19:10.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/08/BTBsJI.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第八篇：流程控制原语。</p><p>流程控制原语，主要管理代码执行逻辑和路径，包括判断，跳转，循环。无论是面向对象还是面向过程，流程控制都必不可少。</p><h1 id="C流程控制原语"><a href="#C流程控制原语" class="headerlink" title="C流程控制原语"></a>C流程控制原语</h1><ul><li>if else </li><li>switch case</li><li>?:</li><li>for </li><li>while </li><li>do while </li><li>goto continue break</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    int num;</span><br><span class="line">    printf(&quot;Please enter a numer:&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line"></span><br><span class="line">    if (num &gt; 0) &#123;</span><br><span class="line">        printf(&quot;Greater than zero\n&quot;);</span><br><span class="line">    &#125;  </span><br><span class="line">    else if (num &lt; 0) &#123;</span><br><span class="line">        printf(&quot;Less than zero\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        printf(&quot;Equal to zero\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch (num) &#123;</span><br><span class="line">        case 0:</span><br><span class="line">            printf(&quot;Zero\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        case 1:</span><br><span class="line">            printf(&quot;One\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            printf(&quot;Other&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (num % 2 == 0) ? printf(&quot;Even\n&quot;):printf(&quot;Odd\n&quot;);</span><br><span class="line"></span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; num; i++) &#123;</span><br><span class="line">        if (i % 2 == 0) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d&quot;,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (num &gt; 0) &#123;</span><br><span class="line">        printf(&quot;%d&quot;, 2*num--);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        printf(&quot;%d&quot;, 3*num++);</span><br><span class="line">    &#125; while (num &lt;= 0);</span><br><span class="line"></span><br><span class="line">    LOOP: if (num &lt; 10) &#123;</span><br><span class="line">        printf(&quot;%d&quot;, num++);</span><br><span class="line">        goto LOOP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python流程控制原语"><a href="#Python流程控制原语" class="headerlink" title="Python流程控制原语"></a>Python流程控制原语</h1><ul><li>if elif else</li><li>for in range</li><li>for else</li><li>while</li><li>while else</li><li>pass continue break</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3 </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">num = int(input(<span class="string">"Please enter a numer:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"Greater than zero"</span>)</span><br><span class="line"><span class="keyword">elif</span> num &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"Less than zero"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Equal to zero"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">10</span>:</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    print(<span class="number">2</span>*num)</span><br><span class="line">    num -= <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure><h1 id="Go流程控制原语"><a href="#Go流程控制原语" class="headerlink" title="Go流程控制原语"></a>Go流程控制原语</h1><ul><li>if else</li><li>switch case default fallthrough</li><li>select case default</li><li>for</li><li>goto continue break</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span> </span><br><span class="line">    <span class="string">"os"</span> </span><br><span class="line">    <span class="string">"strconv"</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n stirng</span><br><span class="line">    fmt.Print(<span class="string">"Please enter a numer:"</span>)</span><br><span class="line">    fmt.Scanln(&amp;n)</span><br><span class="line">    num := strconv.Atoi(n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Greater than zero"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Less than zero"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Equal to zero\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> num &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Zero"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            fmt.Println(<span class="string">"One"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nums <span class="keyword">interface</span>&#123;&#125; = num</span><br><span class="line">    <span class="keyword">switch</span> nums.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Nil"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Int"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Float64"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">bool</span>, <span class="keyword">string</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Bool or String"</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> c1, c2 <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;- c1:</span><br><span class="line">            fmt.Println(<span class="string">"Recieved c1"</span>)</span><br><span class="line">        <span class="keyword">case</span> &lt;- c2:</span><br><span class="line">            fmt.Println(<span class="string">"Recieved c2"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Not recieved"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span>([]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;) &#123;</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="number">2</span>*num)</span><br><span class="line">        num--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOOP: <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">        num++</span><br><span class="line">        <span class="keyword">goto</span> LOOP</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust流程控制原语"><a href="#Rust流程控制原语" class="headerlink" title="Rust流程控制原语"></a>Rust流程控制原语</h1><ul><li>if else</li><li>for in</li><li>while</li><li>loop break</li><li>match</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> line = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Please enter a numer:"</span>);</span><br><span class="line">    <span class="keyword">let</span> _ = io::stdin()</span><br><span class="line">        .read_line(&amp;<span class="keyword">mut</span> line)</span><br><span class="line">        .unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num:<span class="built_in">i32</span> = line</span><br><span class="line">        .trim()</span><br><span class="line">        .parse::&lt;<span class="built_in">i32</span>&gt;()</span><br><span class="line">        .unwrap(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Greater than zero"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Less than zero"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Equal to zero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..num &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="number">2</span>*num);</span><br><span class="line">        num -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> num &gt; <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,num);</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//let f = File::open("main.jpeg").expect("file not found\n");</span></span><br><span class="line">    <span class="keyword">let</span> f = File::open(<span class="string">"main.jpeg"</span>);</span><br><span class="line">    <span class="keyword">match</span> f &#123;</span><br><span class="line">        <span class="literal">Ok</span>(f) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"file found &#123;:?&#125;"</span>, f);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">Err</span>(mesg) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"file not found \n&#123;:?&#125;"</span>, mesg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart流程控制原语"><a href="#Dart流程控制原语" class="headerlink" title="Dart流程控制原语"></a>Dart流程控制原语</h1><ul><li>if else</li><li>switch case default</li><li>for</li><li>for in </li><li>while</li><li>do while</li><li>continue break</li><li>?: ?? ??=</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"dart:io"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() </span><br><span class="line">&#123;</span><br><span class="line">    stdout.write(<span class="string">"Please enter a numer:"</span>);</span><br><span class="line">    <span class="keyword">var</span> line = stdin.readLineSync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">num</span> = <span class="built_in">int</span>.parse(line);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Greater than zero"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Less than zero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Equal to zero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">num</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"One"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Other"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;i&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">2</span>*i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">const</span>[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="built_in">print</span>(prop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">num</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">2</span>*<span class="built_in">num</span>);</span><br><span class="line">        <span class="built_in">num</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">num</span>);</span><br><span class="line">        <span class="built_in">num</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">num</span> &lt; <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    LOOP1: </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">num</span>);</span><br><span class="line">        <span class="built_in">num</span> += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span> LOOP1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LOOP2:</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span> LOOP2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = <span class="built_in">num</span> &gt; <span class="number">0</span> ? <span class="string">"greater"</span>:<span class="string">"less or equal"</span>;</span><br><span class="line">    <span class="built_in">print</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">num</span> ??= <span class="number">1</span>; </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">num</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> y = <span class="built_in">num</span> ?? <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">print</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/08/BTBsJI.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C/Python/Go/Rust/Dart常量和变量</title>
    <link href="http://www.shieber.cn/title/bf474c89/"/>
    <id>http://www.shieber.cn/title/bf474c89/</id>
    <published>2020-11-08T08:22:04.000Z</published>
    <updated>2020-11-08T08:23:34.179Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/08/Bo6QFH.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第七篇：常量和变量。</p><p>编程语言中的量是一种表述和存储模型，它表征了某个对象或事物在内存中的保存和使用方式。这些量即有值又有类型。常量就是值和类型均不能变的量，相反，变量的值可以变，但类型不可变，除非重定义。</p><h1 id="C常量和变量"><a href="#C常量和变量" class="headerlink" title="C常量和变量"></a>C常量和变量</h1><p>C中常量</p><ul><li>define 定义</li><li>const 定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量定义方式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 9.8   <span class="comment">// 没有;号</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">54</span>;</span><br></pre></td></tr></table></figure><p>C中变量</p><ul><li>type variable 定义方式1</li><li>type variable = value 定义方式2</li><li>type variable1, variable2 定义方式3</li><li>type variable1 = value1, variable2 = value2 定义方式4</li><li>extern type variable 定义方式5</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C中变量类型</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">int</span> <span class="keyword">float</span> <span class="keyword">double</span></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">struct</span> <span class="title">union</span></span></span><br><span class="line"><span class="class"><span class="title">array</span></span></span><br><span class="line"><span class="class"><span class="title">pointer</span></span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">C</span>变量定义及初始化</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">i</span>;</span></span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>, d = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> l = <span class="string">"s"</span>;</span><br><span class="line"><span class="keyword">float</span> m = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> WEEK&#123; MON = <span class="number">1</span>,Tue,Wed,Thu,Fri,Sat,Sun&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125;s1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> subject[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> book_id;</span><br><span class="line">&#125;k1;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">t1</span>, <span class="title">t2</span>[20], *<span class="title">t3</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125;Simple;</span><br><span class="line">Simple u1, u2[<span class="number">20</span>], *u3;</span><br><span class="line"></span><br><span class="line">unio Data &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">&#125;data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> Data newData; <span class="comment">// 一次最好只使用一个变量</span></span><br><span class="line">newData.i = <span class="number">10</span>;</span><br><span class="line">newData.f = <span class="number">12.5</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(newData.str <span class="string">"C programming"</span>);</span><br></pre></td></tr></table></figure><h1 id="Python常量和变量"><a href="#Python常量和变量" class="headerlink" title="Python常量和变量"></a>Python常量和变量</h1><p>Python中并没有C中那种命名常量，一切都看使用形式。数字、字符串、布尔值、空值等都是常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 常量定义方式</span><br><span class="line">PI = <span class="number">3.141592653</span></span><br><span class="line">NAME = <span class="string">"Shieber"</span></span><br><span class="line">YES = <span class="literal">True</span></span><br><span class="line">RESULT = <span class="literal">None</span></span><br><span class="line">PERSON = (<span class="string">"Shieber"</span>, <span class="number">24</span>, <span class="number">172</span>)</span><br><span class="line"></span><br><span class="line">// 变量定义方式</span><br><span class="line">age = <span class="number">24</span></span><br><span class="line">name = [<span class="string">"Shieber"</span>,<span class="string">"Kew"</span>,<span class="string">"Kim"</span>]</span><br><span class="line">dics = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</span><br><span class="line">sets = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="Go常量和变量"><a href="#Go常量和变量" class="headerlink" title="Go常量和变量"></a>Go常量和变量</h1><p>Go中基本变量包括布尔型，数字型，字符串，它的定义和C一样使用const。</p><p>Go中常量</p><ul><li>const 定义</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量定义方式</span></span><br><span class="line"><span class="keyword">const</span> i <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> y <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> b <span class="keyword">string</span> = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">const</span> a, b = <span class="string">"a"</span>, <span class="string">"b"</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span>      <span class="comment">// 0</span></span><br><span class="line">    b             <span class="comment">// 1</span></span><br><span class="line">    _             <span class="comment">// 2</span></span><br><span class="line">    d             <span class="comment">// 3</span></span><br><span class="line">    e = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 16</span></span><br><span class="line">    f             <span class="comment">// 32 </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Go中变量</p><ul><li>var定义</li><li>:= 定义</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量定义方式</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> bar [<span class="number">10</span>]<span class="keyword">float32</span></span><br><span class="line">baz := [...]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>      <span class="comment">//映射</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">n := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">30</span>)  <span class="comment">//切片</span></span><br><span class="line">q := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)   <span class="comment">//通道</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">struct</span> person &#123;</span><br><span class="line">    Name: <span class="keyword">string</span></span><br><span class="line">    Gender: <span class="keyword">string</span></span><br><span class="line">    Age: <span class="keyword">int</span></span><br><span class="line">    Address: <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p := person&#123;</span><br><span class="line">    Name: <span class="string">"Shieber"</span>,</span><br><span class="line">    Gender: <span class="string">"Male"</span>,</span><br><span class="line">    Age: <span class="number">24</span>,</span><br><span class="line">    Address: <span class="string">"CD"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d, e <span class="keyword">int</span></span><br><span class="line">c, d, e = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d, e  = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">c, d, e := <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"Shieber"</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"Shieber"</span></span><br><span class="line"></span><br><span class="line">s := <span class="string">"Shieber"</span></span><br></pre></td></tr></table></figure><h1 id="Rust常量和变量"><a href="#Rust常量和变量" class="headerlink" title="Rust常量和变量"></a>Rust常量和变量</h1><p>Rust中常量定义和C中相似，只是Rust加入了生命周期概念。</p><p>Rust中常量</p><ul><li>const 定义常量，类似C中#define </li><li>static 定义全局变量，可当常量使用</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AGE:<span class="built_in">i32</span> = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">const</span> NUM:<span class="built_in">f64</span> = <span class="number">3.0</span>;</span><br><span class="line"><span class="keyword">const</span> NUMS:[<span class="built_in">i32</span>:<span class="number">4</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> NAME:<span class="built_in">String</span> = <span class="string">"Shieber"</span></span><br></pre></td></tr></table></figure><p>Rust中变量</p><ul><li>let 定义，值不能变，但变量能重定义</li><li>let mut 定义，值能变，变量也能重定义</li><li>static mut 定义，静态变量，但值可变</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量定义方式</span></span><br><span class="line"><span class="keyword">let</span> x:<span class="built_in">f64</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">6.28</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> z = <span class="number">70000</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> k: int64 = <span class="number">70000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> NUM:<span class="built_in">i32</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">    NUM += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Num:&#123;&#125;"</span>,NUM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart常量和变量"><a href="#Dart常量和变量" class="headerlink" title="Dart常量和变量"></a>Dart常量和变量</h1><p>Dart中常量</p><ul><li>const  定义并赋值</li><li>final  定义时可不赋值，但只能赋值一次</li></ul><p>final和const区别：final修饰的是变量，定义时可不赋值，但初始化赋值只能一次，之后就不再变，类似常量。而const一开始修饰的就必须是常量，且必须初始化。final用时才申请内存，const一开始就处理好了，所以速度要快些。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592653</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> F = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">int</span> A; <span class="comment">//未初始化</span></span><br><span class="line">A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> C = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> NAME = <span class="string">'Shieber'</span>; <span class="comment">// 可以加上类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> bar = <span class="keyword">const</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> baz = <span class="keyword">const</span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> x; <span class="comment">// 内部变量必须是final，因为类型不定</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> y;</span><br><span class="line">    <span class="keyword">const</span> Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y); <span class="comment">// 返回必须是const</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dart中变量</p><ul><li>var 定义</li><li>dynamic 定义，类型可变</li><li>type variable  定义</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Shieber'</span>; <span class="comment">// 自动推导类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dynamic</span> str = <span class="string">'Shieber'</span>;</span><br><span class="line">str = <span class="number">20</span>;            <span class="comment">// dynamic变量的类型可改变</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> str = <span class="string">'Shieber'</span>;</span><br><span class="line"><span class="built_in">String</span> s = <span class="string">'''</span></span><br><span class="line"><span class="string">Hello</span></span><br><span class="line"><span class="string">Dart</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> y = <span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">int</span> str = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">double</span> c = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> l2 = <span class="keyword">const</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// const 可构造变量, l2可修改</span></span><br><span class="line"><span class="built_in">List</span> l3 =  <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">l3.add(<span class="string">'z'</span>);</span><br><span class="line">l3.add(<span class="string">'k'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span> m1 = &#123;</span><br><span class="line">    <span class="string">'Name'</span>: <span class="string">'Shieber'</span>,</span><br><span class="line">    <span class="string">'Age'</span>: <span class="number">24</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span> m2 = <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="string">'Name'</span>: <span class="string">'Shieber'</span>,</span><br><span class="line">    <span class="string">'Age'</span>: <span class="number">24</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m3[<span class="string">'Name'</span>] = <span class="string">'Shieber'</span>;</span><br><span class="line">m3[<span class="string">'Age'</span>] = <span class="number">24</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/08/Bo6QFH.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C/Python/Go/Rust/Dart运算符</title>
    <link href="http://www.shieber.cn/title/ed051314/"/>
    <id>http://www.shieber.cn/title/ed051314/</id>
    <published>2020-11-07T12:37:03.000Z</published>
    <updated>2020-11-08T15:05:17.541Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/BIFNv9.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第六篇：运算符。</p><p>运算符是一种告诉编译器/解释器执行特定数学，逻辑，关系等操作的符号。</p><h1 id="C运算符"><a href="#C运算符" class="headerlink" title="C运算符"></a>C运算符</h1><ul><li>算术运算符 [+ - * / % ++ –]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [sizeof  &amp;(取址)  *(取值)  ?:]</li></ul><h1 id="Python运算符"><a href="#Python运算符" class="headerlink" title="Python运算符"></a>Python运算符</h1><ul><li>算术运算符 [+ - * / % // **]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [and or not]</li><li>位运算符是 [&amp; | ^ ~ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= := += -= *= /= %= **= //= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [is, is not,  in, not in]]</li></ul><h1 id="Go运算符"><a href="#Go运算符" class="headerlink" title="Go运算符"></a>Go运算符</h1><ul><li>算术运算符 [+ - * / % ++ –]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [&amp;(取址)  *(取值)]</li></ul><h1 id="Rust运算符"><a href="#Rust运算符" class="headerlink" title="Rust运算符"></a>Rust运算符</h1><ul><li>算术运算符 [+ - * / %]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [-(取负) !(取反) &amp;(租借)  *(取值/指针) -&gt; 函数闭包 ?(错误) as(类型转换)]</li></ul><h1 id="Dart运算符"><a href="#Dart运算符" class="headerlink" title="Dart运算符"></a>Dart运算符</h1><ul><li>算术运算符 [+ - * / ~/ %]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ ~ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= ~/= %= ??= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [-(取负) as is is! . ?: ?? ?. ..]</li></ul><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>对比发现，下面这些运算符是所有语言都有的，且用法也一样。</p><ul><li>算术运算符 [+ - * / %]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// operators.c C中使用运算符 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c1, c2, c3, c4, c5, c6 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    c1 = a + b;</span><br><span class="line">    c2 = a - b;</span><br><span class="line">    c3 = a * b;</span><br><span class="line">    c4 = b / a;</span><br><span class="line">    c5 = a % b;</span><br><span class="line">    c6 += c5;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a == b\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a != b\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !a &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ture\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> b &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        a *= <span class="number">2</span>;</span><br><span class="line">        b -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c1 &amp;&amp; c2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ture\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c3 &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c4 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c4 &amp; c5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c5 | c6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c5 ^ c6);</span><br><span class="line"></span><br><span class="line">    c6 &amp;= c5;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c6);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/BIFNv9.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C/Python/Go/Rust/Dart数据类型</title>
    <link href="http://www.shieber.cn/title/6a4fc2a2/"/>
    <id>http://www.shieber.cn/title/6a4fc2a2/</id>
    <published>2020-11-07T03:23:55.000Z</published>
    <updated>2020-11-07T09:46:57.921Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5B37R.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第五篇：数据类型。</p><h1 id="C数据类型"><a href="#C数据类型" class="headerlink" title="C数据类型"></a>C数据类型</h1><p>因为C是底层语言，所以它的数据类型偏底层，和内存联系在一起。</p><p><strong>基本类型</strong></p><ul><li>字符类型 char  </li><li>数值类型 [signed/unsigned] short int long float double </li></ul><p><strong>派生类型</strong>  </p><ul><li>枚举体型 enum  </li><li>结构体型 struct  </li><li>联合体型 union  </li><li>数组类型 array  </li><li>函数类型 function </li></ul><p><strong>指针类型</strong></p><ul><li>指针类型 pointer </li></ul><p><strong>空类型</strong></p><ul><li>空类型 void</li></ul><h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><p>Python作为动态语言，数据分可变与否，偏实用。</p><p><strong>不可变类型</strong>    </p><ul><li>布尔类型 bool</li><li>字符串型 string    </li><li>元组类型 tuple   </li><li>数值类型 number [int float complex]  </li></ul><p><strong>可变类型</strong>  </p><ul><li>列表类型 list  </li><li>字典类型 dict  </li><li>集合类型 set   </li></ul><h1 id="Go数据类型"><a href="#Go数据类型" class="headerlink" title="Go数据类型"></a>Go数据类型</h1><p>Go作为网络时代的C，其数据类型中既有偏底层的，又有偏实用的，其中有一些是Go特有的。</p><p><strong>基本类型</strong>  </p><ul><li>布尔类型 bool</li><li>码点类型 rune</li><li>字符及串 byte string  </li><li>数值类型 (u)int(8,16,32,64) float(32,64) complex  </li></ul><p><strong>派生类型</strong>  </p><ul><li>指针类型 pt := &amp;v (nil)  </li><li>数组类型 nu := [4]int{0,1,2,3}   </li><li>切片类型 sl := []int{0,1,2,3,}  </li><li>映射类型 mp := make(map[string]string)  </li><li>结构类型 type Employee struct {}  </li><li>管道类型 ch := make(chan int, 2)  </li><li>接口类型 func (p *Ptr) getName() string{}  </li><li>函数类型 func sayHello(name strin){}  </li></ul><h1 id="Rust数据类型"><a href="#Rust数据类型" class="headerlink" title="Rust数据类型"></a>Rust数据类型</h1><p>Rust面向底层，数据类型和C很像，但又有些数据类型和Go相似。</p><p><strong>标量类型</strong></p><ul><li>布尔类型 bool</li><li>字符类型 char  </li><li>数值类型 u|i(8/16/32/64/128/size)  f32(64)  </li></ul><p><strong>复合类型</strong></p><ul><li>元组类型 tuple</li><li>数组类型 array</li><li>切片类型 slice</li><li>结构体型 struct</li><li>枚举类型 enum</li><li>泛型类型 generics [trait]</li></ul><h1 id="Dart数据类型"><a href="#Dart数据类型" class="headerlink" title="Dart数据类型"></a>Dart数据类型</h1><p>Dart即可看成动态，又可看成静态语言，数据类型丰富。</p><p><strong>基本类型</strong></p><ul><li>布尔类型 bool</li><li>字符串型 String</li><li>码点类型 rune </li><li>符号类型 Symbol</li><li>数值类型 num int double</li></ul><p><strong>集合类型</strong></p><ul><li>列表类型 List</li><li>映射类型 Map</li><li>集合类型 Set</li><li>队列类型 Queue</li><li>枚举类型 enum</li></ul><p><strong>动态类型</strong></p><ul><li>动态类型 dynamic</li></ul><h1 id="类型对比"><a href="#类型对比" class="headerlink" title="类型对比"></a>类型对比</h1><ul><li>Go和Dart共有码点(rune)类型</li><li>C和Rust与Dart共有枚举(enum)类型</li><li>Python和Rust共有元组(tuple)类型</li><li>Python和Dart共有列表(list)，集合(set)和映射(map)类型</li><li>Go独有通道(channel)和接口(interface)类型</li><li>Dart独有符号(Symbol)，队列(queue)，动态(dynamic)类型</li><li>各种语言都或多或少存在指针(*&amp;)，引用的使用</li></ul><p>布尔型，字符型，数值型，数组型几乎是各语言共有的类型，这说明此四类型是基础，重中之重。基于这些类型，各语言构造了不同用途的复杂数据结构。</p><p>学习时，要先从基础类型学，然后学习各语言衍生的复杂结构，最后总结。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/B5B37R.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C/Python/Go/Rust/Dart基础</title>
    <link href="http://www.shieber.cn/title/2e9fe2ee/"/>
    <id>http://www.shieber.cn/title/2e9fe2ee/</id>
    <published>2020-11-07T01:58:08.000Z</published>
    <updated>2020-11-07T09:45:08.308Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B50NLj.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第四篇：基础语法和工具。</p><p>程序中包含的基本要素(不同语言包含的元素不完全一样，只是大体上一样)</p><ul><li>库/包/头文件</li><li>变量</li><li>语句/表达式</li><li>控制流程</li><li>函数</li><li>类/接口</li><li>标签</li><li>注释</li></ul><p>标识符是程序中元素的名称，如变量，函数等。五种语言标识符的规则是一样的：</p><ul><li>标识符不能是关键字</li><li>标识符可以包括字符和数字，不能以数字开头</li><li>除下划线_或美元符号$外，不能包含特殊符号</li><li>标识符必须是唯一的，标识符区分大小写，不能包含空格</li></ul><p>各语言分割符，注释方式，括号/缩进，格式化，文档，包管理，测试，工程的区别如下</p><table><thead><tr><th align="center">语言</th><th align="center">分割符</th><th align="center">注释方式</th><th align="center">括号/缩进</th><th align="center">格式化</th><th align="center">文档</th><th align="center">包管理</th><th align="center">测试</th><th align="center">工程工具</th></tr></thead><tbody><tr><td align="center">C</td><td align="center">;</td><td align="center"><code>// /**/</code></td><td align="center">{ 可换行</td><td align="center">无</td><td align="center">无</td><td align="center">无</td><td align="center">Gtest</td><td align="center">无</td></tr><tr><td align="center">Python</td><td align="center">无</td><td align="center"><code># &#39;&#39;&#39; &quot;&quot;&quot;</code></td><td align="center">有: 和<code>\t</code>或<code></code></td><td align="center">无</td><td align="center">无</td><td align="center">pip</td><td align="center">unittest</td><td align="center">无</td></tr><tr><td align="center">Go</td><td align="center">无</td><td align="center"><code>// /**/</code></td><td align="center">{ 不可换行</td><td align="center">gofmt</td><td align="center">godoc</td><td align="center">go get</td><td align="center">go test</td><td align="center">mod</td></tr><tr><td align="center">Rust</td><td align="center">;</td><td align="center"><code>// /**/</code></td><td align="center">{ 可换行</td><td align="center">rustfmt</td><td align="center">rustdoc</td><td align="center">rustup</td><td align="center">cargo test</td><td align="center">cargo</td></tr><tr><td align="center">Dart</td><td align="center">;</td><td align="center"><code>// /**/</code></td><td align="center">{ 可换行</td><td align="center">dartfmt</td><td align="center">dartdoc</td><td align="center">pub</td><td align="center">group test</td><td align="center">无</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/B50NLj.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C/Python/Go/Rust/Dart程序结构</title>
    <link href="http://www.shieber.cn/title/e0879928/"/>
    <id>http://www.shieber.cn/title/e0879928/</id>
    <published>2020-11-06T16:11:02.000Z</published>
    <updated>2020-11-07T09:43:50.099Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5wXGT.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第三篇：程序结构。</p><h1 id="C程序结构"><a href="#C程序结构" class="headerlink" title="C程序结构"></a>C程序结构</h1><p>C 程序主要包括以下部分：</p><ul><li>预处理(#)</li><li>变量</li><li>语句/表达式</li><li>函数</li><li>标签</li><li>注释</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言程序hlwd.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shieber@Kew:c 🐁  gcc hlwd.c -o hlwd</span><br><span class="line">shieber@Kew:c 🐁  ./hlwd                 #C程序执行方法</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h1 id="Python程序结构"><a href="#Python程序结构" class="headerlink" title="Python程序结构"></a>Python程序结构</h1><p>Python 程序主要包括以下部分：</p><ul><li>包(import)</li><li>编码(utf-8)</li><li>变量</li><li>语句/表达式</li><li>函数</li><li>类</li><li>注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python语言程序hlwd.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello, World!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    hw()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shieber@Kew:python 🐁  python3 hlwd.py     <span class="comment">#Python程序执行方法</span></span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h1 id="Go程序结构"><a href="#Go程序结构" class="headerlink" title="Go程序结构"></a>Go程序结构</h1><p>Go 程序主要包括以下部分：</p><ul><li>包(import)</li><li>变量</li><li>语句/表达式</li><li>函数</li><li>接口</li><li>标签</li><li>注释</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Go语言程序hlwd.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shieber@Kew:<span class="keyword">go</span> 🐁  <span class="keyword">go</span> run hlwd.<span class="keyword">go</span>         #Go程序执行方法<span class="number">1</span></span><br><span class="line">Hello, World!</span><br><span class="line">shieber@Kew:<span class="keyword">go</span> 🐁  <span class="keyword">go</span> build hlwd.py -o hlwd</span><br><span class="line">shieber@Kew:<span class="keyword">go</span> 🐁  ./hlwd                 #Go程序执行方法<span class="number">2</span></span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h1 id="Rust程序结构"><a href="#Rust程序结构" class="headerlink" title="Rust程序结构"></a>Rust程序结构</h1><p>Rust 程序主要包括以下部分：</p><ul><li>箱(crate)/包(package)</li><li>变量</li><li>语句/表达式</li><li>函数</li><li>特性</li><li>模块(mod)</li><li>标签</li><li>注释</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rust语言程序hlwd.rs</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shieber@Kew:rust 🐁  rustc hlwd.rs    </span><br><span class="line">shieber@Kew:rust 🐁  ./hlwd            #Rust程序执行方法<span class="number">1</span></span><br><span class="line">Hello, World!</span><br><span class="line">shieber@Kew:rust 🐁  cargo run         #Rust程序执行方法<span class="number">2</span></span><br><span class="line">Hello, World!</span><br><span class="line">shieber@Kew:rust 🐁  cargo build       </span><br><span class="line">shieber@Kew:rust 🐁  cargo run         #Rust程序执行方法<span class="number">3</span></span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h1 id="Dart程序结构"><a href="#Dart程序结构" class="headerlink" title="Dart程序结构"></a>Dart程序结构</h1><p>Dart 程序主要包括以下部分：</p><ul><li>库(import)和包(package)</li><li>变量</li><li>语句/表达式</li><li>函数</li><li>类</li><li>接口</li><li>集合/泛型</li><li>注释</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dart语言程序hlwd.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shieber@Kew:dart 🐁  dart hlwd.dart         <span class="comment">#Dart程序执行方法1</span></span><br><span class="line">Hello, World!</span><br><span class="line">shieber@Kew:dart 🐁  dart2native hlwd.dart -o hlwd</span><br><span class="line">shieber@Kew:dart 🐁  ./hlwd                 <span class="comment">#Dart程序执行方法2</span></span><br><span class="line">Hello, World!                                </span><br><span class="line">shieber@Kew:dart 🐁  dart2js hlwd.dart -o hlwd <span class="comment">#使用浏览器执行</span></span><br></pre></td></tr></table></figure><p>通过对比，发现五种语言程序结构大体是差不多的。这五种语言同时也有许多不同：</p><ul><li>Go和Python语言结尾不用分号</li><li>Dart语言和Python一样，可以看成脚本型语言</li><li>Dart语言和C/Go/Rust一样，又能看成编译型语言</li><li>C必须编译执行，Python直接执行，Go可即时和编译执行</li><li>Rust可编译也可用Cargo执行，Dart即能当脚本执行又能编译后执行</li><li>Python用#作为注释符号，其余四种使用的注释都是//或/**/</li><li>Python中并不需要一个叫main的主函数，而其他四种语言均需要main函数。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/B5wXGT.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C/Python/Go/Rust/Dart关键字</title>
    <link href="http://www.shieber.cn/title/909876b5/"/>
    <id>http://www.shieber.cn/title/909876b5/</id>
    <published>2020-11-06T13:38:01.000Z</published>
    <updated>2020-11-07T09:42:47.849Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5w4xg.png" alt="cpygorsdart"></p><a id="more"></a><p>本文是对比学习的第二篇，主要统计关键字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                     <span class="function">C <span class="title">Keywords</span><span class="params">(<span class="number">34</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">auto</span>        <span class="keyword">double</span>       <span class="keyword">int</span>         struct       <span class="keyword">inline</span> </span></span><br><span class="line"><span class="function"><span class="keyword">break</span>       <span class="keyword">else</span>         <span class="keyword">long</span>        <span class="keyword">switch</span>       <span class="keyword">restrict</span></span></span><br><span class="line">case        enum         register    typedef      ...</span><br><span class="line"><span class="keyword">char</span>        <span class="keyword">extern</span>       <span class="keyword">return</span>      <span class="keyword">union</span></span><br><span class="line"><span class="keyword">const</span>       <span class="keyword">float</span>        <span class="keyword">short</span>       <span class="keyword">unsigned</span></span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span>          <span class="keyword">signed</span>      <span class="keyword">void</span></span><br><span class="line"><span class="keyword">default</span>     <span class="keyword">goto</span>         <span class="keyword">sizeof</span>      <span class="keyword">volatile</span></span><br><span class="line"><span class="keyword">do</span>          <span class="keyword">if</span>           <span class="keyword">static</span>      <span class="keyword">while</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                     Python Keywords(<span class="number">33</span>)</span><br><span class="line"><span class="keyword">and</span>         <span class="function"><span class="keyword">def</span>          <span class="title">for</span>         <span class="title">in</span>           <span class="title">or</span>        <span class="title">while</span></span></span><br><span class="line"><span class="function"><span class="title">as</span>          <span class="title">del</span>          <span class="title">from</span>        <span class="title">is</span>           <span class="title">pass</span>      <span class="title">with</span> </span></span><br><span class="line"><span class="function"><span class="title">assert</span>      <span class="title">elif</span>         <span class="title">False</span>       <span class="title">lambda</span>       <span class="title">raise</span>     <span class="title">yield</span></span></span><br><span class="line"><span class="function"><span class="title">break</span>       <span class="title">else</span>         <span class="title">global</span>      <span class="title">nonlocal</span>     <span class="title">return</span></span></span><br><span class="line"><span class="function"><span class="title">class</span>       <span class="title">except</span>       <span class="title">if</span>          <span class="title">not</span>          <span class="title">try</span>    </span></span><br><span class="line"><span class="function"><span class="title">continue</span>    <span class="title">finally</span>      <span class="title">import</span>      <span class="title">None</span>         <span class="title">True</span></span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                     Go Keywords(<span class="number">25</span>)     </span><br><span class="line"><span class="keyword">break</span>       <span class="keyword">default</span>      <span class="function"><span class="keyword">func</span>        <span class="title">interface</span>    <span class="title">select</span></span></span><br><span class="line"><span class="keyword">case</span>        <span class="keyword">defer</span>        <span class="keyword">go</span>          <span class="keyword">map</span>          <span class="keyword">struct</span></span><br><span class="line"><span class="keyword">chan</span>        <span class="keyword">else</span>         <span class="keyword">goto</span>        <span class="keyword">package</span>      <span class="keyword">switch</span></span><br><span class="line"><span class="keyword">const</span>       <span class="keyword">fallthrough</span>  <span class="keyword">if</span>          <span class="keyword">range</span>        <span class="keyword">type</span></span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span>          <span class="keyword">import</span>      <span class="keyword">return</span>       <span class="keyword">var</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                     Rust Keywords(<span class="number">39</span>)  </span><br><span class="line"><span class="keyword">as</span>          <span class="keyword">dyn</span>          <span class="keyword">if</span>          <span class="keyword">move</span>         <span class="class"><span class="keyword">struct</span>    <span class="title">use</span></span></span><br><span class="line"><span class="keyword">async</span>       <span class="keyword">else</span>         <span class="keyword">impl</span>        <span class="keyword">mut</span>          <span class="keyword">super</span>     <span class="keyword">where</span></span><br><span class="line"><span class="keyword">await</span>       <span class="class"><span class="keyword">enum</span>         <span class="title">in</span></span>          <span class="keyword">pub</span>          <span class="class"><span class="keyword">trait</span>     <span class="title">while</span></span></span><br><span class="line"><span class="keyword">break</span>       <span class="keyword">extern</span>       <span class="keyword">let</span>         <span class="keyword">ref</span>          <span class="literal">true</span>      <span class="keyword">Self</span></span><br><span class="line"><span class="keyword">const</span>       <span class="literal">false</span>        <span class="keyword">loop</span>        <span class="keyword">return</span>       <span class="class"><span class="keyword">type</span></span></span><br><span class="line"><span class="class"><span class="title">continue</span></span>    <span class="function"><span class="keyword">fn</span>           <span class="title">match</span>       <span class="title">self</span>         <span class="title">union</span></span></span><br><span class="line"><span class="function"><span class="title">crate</span>       <span class="title">for</span>          <span class="title">mod</span>         <span class="title">static</span>       <span class="title">unsafe</span></span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                     Dart Keywords(<span class="number">60</span>)</span><br><span class="line"><span class="keyword">abstract</span>    <span class="keyword">continue</span>     <span class="keyword">extends</span>     <span class="keyword">implements</span>   <span class="keyword">operator</span>  <span class="keyword">this</span></span><br><span class="line"><span class="keyword">as</span>          <span class="keyword">covariant</span>    <span class="keyword">factory</span>     <span class="keyword">import</span>       <span class="keyword">part</span>      <span class="keyword">throw</span></span><br><span class="line"><span class="keyword">assert</span>      <span class="keyword">default</span>      <span class="keyword">false</span>       <span class="keyword">in</span>           <span class="keyword">rethrow</span>   <span class="keyword">true</span></span><br><span class="line"><span class="keyword">async</span>       <span class="keyword">deferred</span>     <span class="keyword">final</span>       <span class="class"><span class="keyword">interface</span>    <span class="title">return</span>    <span class="title">try</span></span></span><br><span class="line"><span class="class"><span class="title">await</span>       <span class="title">do</span>           <span class="title">finally</span>     <span class="title">is</span>           <span class="title">set</span>       <span class="title">typedef</span></span></span><br><span class="line"><span class="class"><span class="title">break</span>       <span class="title">dynamic</span>      <span class="title">for</span>         <span class="title">library</span>      <span class="title">show</span>      <span class="title">var</span>       </span></span><br><span class="line"><span class="class"><span class="title">case</span>        <span class="title">else</span>         <span class="title">function</span>    <span class="title">mixin</span>        <span class="title">static</span>    <span class="title">void</span>      </span></span><br><span class="line"><span class="class"><span class="title">catch</span>       <span class="title">enum</span>         <span class="title">get</span>         <span class="title">new</span>          <span class="title">super</span>     <span class="title">while</span>     </span></span><br><span class="line"><span class="class"><span class="title">class</span>       <span class="title">export</span>       <span class="title">hide</span>        <span class="title">null</span>         <span class="title">switch</span>    <span class="title">with</span>      </span></span><br><span class="line"><span class="class"><span class="title">const</span>       <span class="title">external</span>     <span class="title">if</span>          <span class="title">on</span>           <span class="title">sync</span>      <span class="title">yield</span></span></span><br></pre></td></tr></table></figure><p>下面是所有语言的都有的关键字，可见各门语言还是有差异的，不同的关键字反应了实现不同语言编译器的考量不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>       <span class="literal">false</span></span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span></span><br><span class="line"><span class="keyword">else</span>        <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span>          <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Go是没有while的，要实现while功能得自己用for来构造。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;                            while condition &#123;</span><br><span class="line">    <span class="keyword">if</span> !condition &#123;     等于         do_works()</span><br><span class="line">        <span class="keyword">break</span>                    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    do_works()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可见，Go语言关键字最少，只25个，学习起来最轻松，Python则次之。C关键字实际不只34个，但常用就34个，C语言是计算机底层的核心语言，是现代互联网的基座。Rust是新出的一门底层语言，定位类似C语言，但强调安全，并发。Rust引入的生命周期，所有权/借用机制是学习的难点。最后，Dart关键字足足60个，看来学习难度较大，但因为它本身语法和Python，Go有类似的地方，所以难度会减少。但60个和Go的25个比起来，学习负担还是太重了。</p><p>为什么我只列出了这五种语言的关键字呢？C/Rust偏底层，C++存在的问题，Rust解决了，所以我学习的重点不再是C/C++，而是C/Rust，相信未来的主流学习也是C/Rust吧。当然，C++还不会被淘汰，但很多工作会被Rust替代。Go语言在云/分布式/微服务领域大放异彩，Python和Go可以作为中间层语言使用。Dart是谷歌新操作系统Fuchsia的Flutter平台默认语言，可通过Flutter编写上层应用，未来可能成为跨系统语言。其实Go和Dart都是谷歌公司开发的语言，未来预期不会太差吧？</p><p><img src="https://s1.ax1x.com/2020/11/06/Bfrs4f.png" alt="dart"></p><p><img src="https://s1.ax1x.com/2020/11/06/BfsWRO.jpg" alt="fuchsia"></p><p>底层C/Rust，中层Go/Python，上层Dart，我觉得这算是一个比较好的搭配。Java/C++这些早就火了的语言也值得学习，然而精力有限，就留给其他愿意折腾的人去学习吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/B5w4xg.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C/Python/Go/Rust/Dart历史</title>
    <link href="http://www.shieber.cn/title/9b69707/"/>
    <id>http://www.shieber.cn/title/9b69707/</id>
    <published>2020-11-06T05:40:52.000Z</published>
    <updated>2020-11-08T09:10:28.059Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5wgat.png" alt="cpygorsdart"></p><a id="more"></a><p>最近学习Rust和Dart语言，发现难度挺大的，尤其是在自己会python/go/c这些语言的情况下，特别容易搞混。所以就想着对比学习，总结五种语言的特性，从它们的异同间发现知识点。</p><p>本文为五种语言对比学习的第一篇，主要讲历史。</p><h1 id="C语言历史"><a href="#C语言历史" class="headerlink" title="C语言历史"></a>C语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/BhcSt1.png" alt="c"></p><p>C语言是一种通用的高级语言，最初是由丹尼斯·里奇在贝尔实验室为开发UNIX操作系统而设计的。C语言最开始是于1972年在DEC PDP-11计算机上被首次实现。C语言是以B语言为基础的，B语言大概是在1970年被引进的。在1978年，布莱恩·柯尼汉（Brian Kernighan）和丹尼斯·里奇（Dennis Ritchie）制作了C的第一个公开可用的描述，现在被称为K&amp;R标准。</p><p>UNIX操作系统，C编译器，和几乎所有的UNIX应用程序都是用C语言编写的。由于各种原因，C 语言现在已经成为一种广泛使用的专业语言。C语言标准是于1988年由美国国家标准协会（ANSI，全称 American National Standard Institute）制定的。</p><p>C是编译型语言，运行前需要编译，在类Unix平台，gcc是默认的C编译器。</p><p>C优点：</p><ul><li>易于学习</li><li>结构化语言</li><li>产生高效率程序</li><li>处理底层的活动</li><li>在多种计算机平台上编译</li></ul><p>C使用领域：</p><ul><li>汇编器</li><li>编译器</li><li>解释器</li><li>数据库</li><li>操作系统</li><li>文本编辑器</li><li>网络驱动器</li></ul><h1 id="Python语言历史"><a href="#Python语言历史" class="headerlink" title="Python语言历史"></a>Python语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/Bh6UyD.png" alt="python"></p><p>Python 是一个高层次的结合了解释性、互动性和面向对象的脚本语言。Python的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色的语法结构。</p><p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p><p>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。</p><p>Python 2.0 于 2000 年 10 月 16 日发布，增加了实现完整的垃圾回收，并且支持 Unicode。Python 3.0 于 2008 年 12 月 3 日发布，此版不完全兼容之前的 Python 源代码。不过，很多新特性后来也被移植到旧的Python 2.6/2.7版本。</p><p>Python是解释型语言，执行需要解释器而不是编译器，Python的解释器有多种，默认官方解释器是CPython。除此之外还有IPython，Jython，PyPY，Pyston v2等。</p><p>Python优点：</p><ul><li>易阅读：Python代码定义的更清晰</li><li>易学习：Python有较少的关键字，结构简单</li><li>易维护：Python的成功在于它的源代码是相当容易维护的</li><li>易可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</li><li>广泛的标准库：Python的最大的优势之一是丰富的库，跨平台，在UNIX，Windows和Mac兼容很好</li></ul><p>Python使用领域：</p><ul><li>Web开发</li><li>游戏开发</li><li>网络爬虫</li><li>科学计算</li><li>人工智能</li><li>自动化运维</li></ul><h1 id="Go语言历史"><a href="#Go语言历史" class="headerlink" title="Go语言历史"></a>Go语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/Bh6cSf.png" alt="go"></p><p>2007年9月，Rob Pike在Google分布式编译平台上进行C++编译，在漫长的等待过程中，他和Robert Griesemer探讨了程序设计语言的一些关键性问题，他们认为，简化编程语言相比于在臃肿的语言上不断增加新特性，会是更大的进步。随后他们在编译结束之前说服了身边的Ken Thompson，觉得有必要为此做一些事情。几天后，他们发起了一个叫Golang的项目，将它作为自由时间的实验项目。</p><p>2008年5月 Google发现了GO语言的巨大潜力，得到了Google的全力支持，这些人开始全职投入GO语言的设计和开发。</p><p>2009年11月 Go语言第一个版本发布。2012年3月 第一个正式版本Go1.0发布。</p><p>2015年8月 Go1.5发布，这个版本被认为是历史性的。完全移除C语言部分，使用Go编译Go，少量代码使用汇编实现。Go是编译型语言，执行需要Go编译器。</p><p>当前(2020)，Go语言成了云计算核心语言，网络时代的C语言。</p><p>Go优点：</p><ul><li>学习简单</li><li>编译效率高</li><li>内存占用少</li><li>包管理和工程管理(mod)使用方便</li><li>天生自带并发，容易实现大并发程序</li></ul><p>Go使用领域：</p><ul><li>数据库</li><li>云平台</li><li>网络编程</li><li>消息中间件</li><li>分布式系统</li></ul><h1 id="Rust语言历史"><a href="#Rust语言历史" class="headerlink" title="Rust语言历史"></a>Rust语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/BhcV7d.png" alt="rust"></p><p>Rust 语言是一种高效、可靠的通用高级语言。其高效不仅限于开发效率，它的执行效率也是令人称赞的，是一种少有的兼顾开发效率和执行效率的语言。</p><p>Rust最早是Mozilla雇员Graydon Hoare的一个个人项目，从2009年开始，得到了Mozilla研究院的支助，2010年项目对外公布。2010 ～2011年间实现的自举。从此以后，Rust经历了巨大的设计变化和反复（历程极其艰辛），终于在2015 年5月15日发布了1.0版。在这个研发过程中，Rust建立了一个强大活跃的社区，形成了一整套完善稳定的项目贡献机制。</p><p>Rust能得到Mozilla研究院的支持，是因为Mozilla在开发和维护Firefox的Gecko引擎的时候，对于这样一个由C++写的维护了20多年的，累计上千万行的代码库，已经不胜厌烦。由于历史包袱及各种漏洞、性能瓶颈，Firefox已经远远落后竞争对手Google Chrome了。Mozilla亟需一种能够安全编程的语言来重新让 Firefox能跟上并超越时代。于是Rust项目就被资助并坚持孵化，直到发布1.0。</p><p>影响了Rust的流行的编程语言包括C, C++, C#, Erlang, Haskell, OCaml, Ruby, Scheme 和 Swift 等。Rust也影响了C#7, Elm, Idris, Swift。</p><p>Rust是编译型语言，执行需要rustc编译器。</p><p>Rust优点：</p><ul><li>安全</li><li>并发</li><li>宏强大</li><li>高性能</li><li>工具链完整</li></ul><p>Rust使用领域：</p><ul><li>命令行</li><li>数据库</li><li>Web应用</li><li>操作系统</li><li>网络服务器</li><li>嵌入式设备</li></ul><h1 id="Dart语言历史"><a href="#Dart语言历史" class="headerlink" title="Dart语言历史"></a>Dart语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/BhcDuF.png" alt="dart"></p><p>Dart诞生于2011 年，刚开始的定位是取代JavaScript，但却以Flutter的编程语言出道而被人熟知，它是强类型语言却又同时支持类型推导，它支持AOT也支持JIT，由于是第一个使用声明式UI的编程语言，也引发过很过争议。除了用于Flutter，很少有人知道，Dart也可以用于后台开发，Dart甚至也可以和C直接交互。Dart语言设计者Lars Bak就是jvm发明者，从此点可以看出Dart有Java的基因。</p><p>Dart是既是编译型又是解释型语言，执行可用dart利用DartVm，也可用dart2js, dart2native编译器编译为js代码和原生代码。</p><p>Dart优点：</p><ul><li>异步</li><li>跨平台</li><li>包管理解决依赖</li></ul><p>Dart使用领域：</p><ul><li>命令行</li><li>前后端</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/B5wgat.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>Go的各种数据结构底层表示</title>
    <link href="http://www.shieber.cn/title/e985015c/"/>
    <id>http://www.shieber.cn/title/e985015c/</id>
    <published>2020-10-21T02:55:08.000Z</published>
    <updated>2020-11-06T14:02:48.966Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/10/21/BCAWVS.png" alt="go-datastructure"></p><a id="more"></a><p>go语言内置数据类型包含数值，字符串和引用类型，这些不同类型的数据底层结构是不一样的。面试时问到部分的底层结构，下面对所有内容作一个总结。</p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>整数型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">按照数值范围，是否有负数和特殊用途，存在八种类型。</span><br><span class="line">类型     数值范围</span><br><span class="line"><span class="keyword">int8</span>    [<span class="number">-128</span><span class="number">-127</span>]</span><br><span class="line"><span class="keyword">int16</span>   [<span class="number">-32768</span><span class="number">-32767</span>]</span><br><span class="line"><span class="keyword">int32</span>   [<span class="number">-2147483648</span><span class="number">-2147483647</span>]</span><br><span class="line"><span class="keyword">int64</span>   [<span class="number">-9223372036854775808</span><span class="number">-9223372036854775807</span>]</span><br><span class="line"><span class="keyword">uint8</span>   [<span class="number">0</span><span class="number">-255</span>]</span><br><span class="line"><span class="keyword">uint16</span>  [<span class="number">0</span><span class="number">-65535</span>]</span><br><span class="line"><span class="keyword">uint32</span>  [<span class="number">0</span><span class="number">-4294967295</span>]</span><br><span class="line"><span class="keyword">uint64</span>  [<span class="number">0</span><span class="number">-18446744073709551615</span>]</span><br><span class="line"><span class="keyword">int</span>     依机器为<span class="keyword">int32</span>/<span class="keyword">int64</span>位</span><br><span class="line"><span class="keyword">uint</span>    依机器为<span class="keyword">uint32</span>/<span class="keyword">uint64</span>位</span><br><span class="line"><span class="keyword">byte</span>    字节，值范围<span class="keyword">uint8</span></span><br><span class="line"><span class="keyword">rune</span>    码点，值范围<span class="keyword">int32</span></span><br><span class="line"><span class="keyword">uintptr</span> 保存指针的数值，值范围<span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line">整数直接存储在存储器中，有符号数包含符号位s和尾数部分m。</span><br><span class="line">如<span class="number">32</span>位十进制有符号数d = <span class="number">-11</span></span><br><span class="line">s = <span class="number">1</span></span><br><span class="line">m = <span class="number">0000000000000000000000000001011</span></span><br><span class="line"><span class="number">1</span> <span class="number">0000000000000000000000000001011</span></span><br><span class="line">s   m 两部分组合得到d</span><br><span class="line">d = <span class="number">10000000000000000000000000001011</span> (<span class="number">32</span>位计算机存储的<span class="number">-11</span>)</span><br><span class="line"></span><br><span class="line">若是<span class="number">64</span>位十进制有符号数d = <span class="number">-11</span></span><br><span class="line">d = <span class="number">1000000000000000000000000000000000000000000000000000000000001011</span> (<span class="number">64</span>位计算机存储的<span class="number">-11</span>)</span><br></pre></td></tr></table></figure><p>浮点数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">按照数值范围分为如下两种类型。</span><br><span class="line"><span class="keyword">float32</span></span><br><span class="line"><span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">浮点数涉及小数，必须将小数表示为二进制。浮点数底层结构包含符号位s，阶码e，尾数m。</span><br><span class="line">浮点数f表示规则如下</span><br><span class="line"><span class="number">1.</span>首位s为符号位，s=<span class="number">0</span>时，f为正数，s=<span class="number">1</span>时，f为负数。</span><br><span class="line"><span class="number">2.</span>接着<span class="number">8</span>/<span class="number">11</span>位为阶码，阶码为f二进制表示科学计数法的指数加<span class="number">127</span>/<span class="number">1023</span>的二进制数。</span><br><span class="line"><span class="number">3.</span>最后<span class="number">23</span>/<span class="number">52</span>位为尾数，就是二进制表示的小数部分。</span><br><span class="line">其中/两侧的数分别对应<span class="number">32</span>位和<span class="number">64</span>位。</span><br><span class="line"></span><br><span class="line">如<span class="number">32</span>位的十进制数f = <span class="number">5.0</span> = <span class="number">0</span>b101<span class="number">.0</span> = <span class="number">0</span>b1<span class="number">.01</span>x2^<span class="number">2</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line">e = <span class="number">2</span>+<span class="number">127</span>=<span class="number">10000001</span> </span><br><span class="line">m = <span class="number">01</span> </span><br><span class="line"><span class="number">0</span> <span class="number">10000001</span> <span class="number">01000000000000000000000</span> </span><br><span class="line">s   e            m 三部分组合得到f</span><br><span class="line">f = <span class="number">01000000101000000000000000000000</span> (<span class="number">32</span>位计算机存储的<span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line">同理<span class="number">64</span>位的十进制数f = <span class="number">5.0</span> = <span class="number">0</span>b101<span class="number">.0</span> = <span class="number">0</span>b1<span class="number">.01</span>x2^<span class="number">2</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line">e = <span class="number">2</span>+<span class="number">1023</span>=<span class="number">10000000001</span></span><br><span class="line">m = <span class="number">01</span> </span><br><span class="line"><span class="number">0</span> <span class="number">10000000001</span> <span class="number">0100000000000000000000000000000000000000000000000000</span> </span><br><span class="line">s   e            m</span><br><span class="line">f = <span class="number">0100000000010100000000000000000000000000000000000000000000000000</span> (<span class="number">64</span>位计算机存储的<span class="number">5.0</span>)</span><br></pre></td></tr></table></figure><p>复数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">按照数值范围分为如下两种类型。</span><br><span class="line"><span class="keyword">complex64</span></span><br><span class="line"><span class="keyword">complex128</span></span><br><span class="line">复数存在实部和虚部，而且都为浮点数，所以底层为两个浮点数的组合，输出时虚部会添加上i</span><br></pre></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串底层结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">string</span> <span class="keyword">struct</span> &#123; </span><br><span class="line">    str unsafe.Pointer <span class="comment">//指针</span></span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span>            <span class="comment">//长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>数组底层结构   </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> array <span class="keyword">struct</span> &#123; </span><br><span class="line">    array unsafe.Pointer <span class="comment">//指针 </span></span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span>              <span class="comment">//长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片底层结构   </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123; </span><br><span class="line">    array unsafe.Pointer <span class="comment">//指针</span></span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span>              <span class="comment">//长度</span></span><br><span class="line">    <span class="built_in">cap</span> <span class="keyword">int</span>              <span class="comment">//容量(切片基于数组)</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>映射底层结构   </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    count     <span class="keyword">int</span>   </span><br><span class="line">    flags     <span class="keyword">uint8</span> </span><br><span class="line">    B         <span class="keyword">uint8</span>          <span class="comment">//平衡因子</span></span><br><span class="line">    noverflow <span class="keyword">uint16</span> </span><br><span class="line">    hash0     <span class="keyword">uint32</span> </span><br><span class="line">    buckets   unsafe.Pointer <span class="comment">//桶</span></span><br><span class="line">    bucket    unsafe.Pointer <span class="comment">//旧桶</span></span><br><span class="line">    nevacuate <span class="keyword">uintptr</span></span><br><span class="line">    extra     *mapextra </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全映射底层结构 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Map <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu Mutex   <span class="comment">//锁(并发安全)</span></span><br><span class="line">    dirty <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line">    misses <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通道底层结构 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hchan <span class="keyword">struct</span> &#123;</span><br><span class="line">    qcount   <span class="keyword">uint</span>           <span class="comment">// 队列中元素个数</span></span><br><span class="line">    dataqsiz <span class="keyword">uint</span>           <span class="comment">// 队列中元素大小</span></span><br><span class="line">    buf      unsafe.Pointer <span class="comment">// 指向缓冲区的指针</span></span><br><span class="line">    elemsize <span class="keyword">uint16</span></span><br><span class="line">    closed   <span class="keyword">uint32</span></span><br><span class="line">    elemtype *_type         <span class="comment">// 元素类型</span></span><br><span class="line">    sendx    <span class="keyword">uint</span>           <span class="comment">// 发送下标</span></span><br><span class="line">    recvx    <span class="keyword">uint</span>           <span class="comment">// 接收下标</span></span><br><span class="line">    sendq    waitq          <span class="comment">// 发送队列</span></span><br><span class="line">    recvq    waitq          <span class="comment">// 接收队列</span></span><br><span class="line">    lock     mutex          <span class="comment">// 锁(并发安全)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无方法的接口底层结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> &#123;</span><br><span class="line">    _type *_type          <span class="comment">//类型指针</span></span><br><span class="line">    data unsafe.Pointer   <span class="comment">//数据指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有方法的接口底层结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ifcae <span class="keyword">struct</span> &#123;</span><br><span class="line">    tab *itab      </span><br><span class="line">    data unsafe.Pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> &#123;</span><br><span class="line">    inter *interfacetype</span><br><span class="line">    _type *_type</span><br><span class="line">    hash  <span class="keyword">uint32</span>       <span class="comment">// 类型转换时快速判断类型是否相等</span></span><br><span class="line">    _     [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">    fun   [<span class="number">1</span>]<span class="keyword">uintptr</span>   <span class="comment">// 动态数组，存储函数指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> _type <span class="keyword">struct</span> &#123; <span class="comment">// go类型运行时表示，所有类新基础</span></span><br><span class="line">    size       <span class="keyword">uintptr</span> <span class="comment">// 内存占用</span></span><br><span class="line">    ptrdata    <span class="keyword">uintptr</span></span><br><span class="line">    hash       <span class="keyword">uint32</span>  <span class="comment">// 判断类型是否相等</span></span><br><span class="line">    tflag      tflag</span><br><span class="line">    align      <span class="keyword">uint8</span></span><br><span class="line">    fieldAlign <span class="keyword">uint8</span></span><br><span class="line">    kind       <span class="keyword">uint8</span></span><br><span class="line">    equal      <span class="function"><span class="keyword">func</span><span class="params">(unsafe.Pointer, unsafe.Pointer)</span> <span class="title">bool</span></span></span><br><span class="line">    gcdata     *<span class="keyword">byte</span></span><br><span class="line">    str        nameOff</span><br><span class="line">    ptrToThis  typeOff</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/21/BCAWVS.png&quot; alt=&quot;go-datastructure&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://www.shieber.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>云原生技术栈</title>
    <link href="http://www.shieber.cn/title/83723c7e/"/>
    <id>http://www.shieber.cn/title/83723c7e/</id>
    <published>2020-10-07T10:20:41.000Z</published>
    <updated>2020-10-07T11:20:07.334Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/10/07/0dYPZ6.png" alt="cloud-native"></p><a id="more"></a><p>最近折腾云原生技术，然而学了半天，感觉知识越来越复杂，涉及的技术太多了，本文特此稍做总结。</p><h3 id="什么是云原生"><a href="#什么是云原生" class="headerlink" title="什么是云原生"></a>什么是云原生</h3><p>云原生是一种新的构建软件并提供服务的架构或模式，云是和本地相对的。从技术的角度，云原生架构是基于云原生技术的一组架构原则和设计模式的集合，旨在将云应用中的非业务代码部分进行最大化的剥离，从而让云设施接管应用中原有的大量非功能特性(如弹性、韧性、安全、可观测性、灰度等)，使业务不再有非功能性业务中断困扰的同时，具备轻量、敏捷、高度自动化的特点。</p><h3 id="为什么需要云原生"><a href="#为什么需要云原生" class="headerlink" title="为什么需要云原生"></a>为什么需要云原生</h3><p>对于企业的 CIO 或者 IT 主管而言，原来企业内部 IT 建设以“烟筒”模式比较多，每个部门甚至每<br>个应用都相对独立，如何管理与分配资源成了难题。大家都基于最底层 IDC 设施独自向上构建，都需要<br>单独分配硬件资源，这就造成资源被大量占用且难以被共享。但是上云之后，由于云厂商提供了统一的<br>IaaS 能力和云服务，大幅提升了企业 IaaS 层的复用程度，CIO 或者 IT 主管自然而然想到 IaaS 以上层的系统也需要被统一，使资源、产品可被不断复用，从而能够进一步降低企业运营成本。</p><p>所有这些问题都指向一个共同点，那就是云的时代需要新的技术架构，来帮助企业应用能够更好地利<br>用云计算优势，充分释放云计算的技术红利，让业务更敏捷、成本更低的同时又可伸缩性更灵活，而这<br>些正好就是云原生架构专注解决的技术点。</p><h3 id="云原生架构原则"><a href="#云原生架构原则" class="headerlink" title="云原生架构原则"></a>云原生架构原则</h3><p>云原生架构本身作为一种架构，也有若干架构原则作为应用架构的核心架构控制面，通过遵从这些架<br>构原则可以让技术主管和架构师在做技术选择时不会出现大的偏差。</p><ul><li>服务化原则</li><li>弹性原则</li><li>可观测原则</li><li>韧性原则</li><li>自动化原则</li><li>零信任原则</li><li>持续演进原则</li></ul><h3 id="云原生主要技术"><a href="#云原生主要技术" class="headerlink" title="云原生主要技术"></a>云原生主要技术</h3><ul><li>容器</li><li>微服务</li><li>DevOps</li><li>Serverless</li><li>Service Mesh</li><li>开放应用模型</li><li>云原生中间件</li></ul><h3 id="云原生技术栈"><a href="#云原生技术栈" class="headerlink" title="云原生技术栈"></a>云原生技术栈</h3><p>云原生涉及众多技术，这些技术按照作用可分为四层，每层涉及的工具如下(只列出部分代表性工具)。蓝色框中代表CNCF孵化项目，是重点工具。</p><p><img src="https://s1.ax1x.com/2020/10/07/0dYPZ6.png" alt="cloud-native"></p><p>1.基础层（Provisioning）</p><ul><li>自动化和配置 KubeEdge Ansible</li><li>容器注册 HARBOR Dragonfly</li><li>安全管理 TUF falco</li><li>密钥管理 spiffe SPIRE</li></ul><p>2.运行时层（Runtime）  </p><ul><li>云原生存储 ROOK Portworx ceph 盘古</li><li>容器运行时 Containerd rkt cri-o</li><li>云网络 CNI</li></ul><p>3.编排和管理层（Orchestration &amp; Management）  </p><ul><li>编排和调度 K8S K3S Mesos Swarm</li><li>服务发现 CoreDNS etcd Consul</li><li>远程调用 gRPC Thrift</li><li>服务代理 Envoy CONTOUR MSON</li><li>API网关 Kong</li><li>服务网格 Linkerd Istio </li></ul><p>4.应用程序定义和开发层（Application Definition &amp; Development）  </p><ul><li>数据库 TiKV/TiDB Vitess Redis MySQL MongoDB Neo4j</li><li>流和消息传递 NATS Cloudevents Flink Spark Kafka</li><li>应用定义和镜像构建 Helm </li><li>持续集成和持续交付 Orgo Jenkins Gitlab Github</li></ul><p>除了四层技术栈，还有些跨四层运行的工具</p><p>1.平台类  </p><ul><li>Kubernetes发行版 谷歌K8S Azure K8S  AWS K8S Rancher </li><li>Kubernetes托管平台 谷歌云 AWS Azure 阿里云 阿里云 腾讯云 </li><li>Kubernetes安装程序 Minikube Rancher</li><li>PaaS/容器服务 heroku </li></ul><p>2.可观察性与分析  </p><ul><li>监控 Prometheus cortex</li><li>日志 Elasticsearch Logstash Kibana</li><li>跟踪 JAEGER </li><li>混沌 Gremlin Chaos mesh</li></ul><h3 id="云原生技术栈中的中国产品"><a href="#云原生技术栈中的中国产品" class="headerlink" title="云原生技术栈中的中国产品"></a>云原生技术栈中的中国产品</h3><ul><li>PingCAP 贡献给CNCF的有TiKV/TiDB， Chaos mesh</li><li>阿里自研了盘古，MSON，Dubbo-go</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>技术栈涉及很多工具，像Kubernetes，Elasticsearch等都是重型工具，学习难，但光是使用它们就能干不少事。这些工具，要想都精通不太可能，基本学习使用就只用挑核心产品如Kubernetes，Docker，Etcd，Prometheus，Elasticsearch等学习，把流程搞熟悉。</p><p>工作流程能跑通后接着就是再深入某个技术点，比如  </p><ul><li>对容器编排有需求就研究Kubernetes，Mesos，Swarm </li><li>对分布式事务有需求就研究MySQL，TiDB/TiKV数据库</li><li>对实时搜索有需求就研究Elasticsearch涉及的ELK技术</li><li>对微服务有需求就研究Istio，Dubbo-go等</li><li>对容器有需求就研究Containerd，RunC，Docker等</li><li>对实时大数据处理有需求就研究Spark，Flink，MapReduce等</li></ul><p>这些技术都很复杂，而且这些技术还在随着时代发展而不断变化，不知未来以Kubernetes为代表的云原生技术又会变成什么样？精通某一个领域我认为都非常不容易，但技术人，再复杂也得学呀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/07/0dYPZ6.png&quot; alt=&quot;cloud-native&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Unix时间戳</title>
    <link href="http://www.shieber.cn/title/f7591bd4/"/>
    <id>http://www.shieber.cn/title/f7591bd4/</id>
    <published>2020-09-13T12:26:40.000Z</published>
    <updated>2020-09-16T01:52:07.458Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/09/13/w0Hp2n.png" alt="unixtimestamp"></p><a id="more"></a><h2 id="Unix进入16亿秒计时"><a href="#Unix进入16亿秒计时" class="headerlink" title="Unix进入16亿秒计时"></a>Unix进入16亿秒计时</h2><p>中国时间2020-09-13 20:26:40, Unix时间戳进入16亿秒计时了。回顾Unix计时以来计算机及互联网连同人类社会的发展，可以看到每亿秒人类都取得了巨大进步，每亿秒都有每亿秒的故事。科技进步的速度不断加快，每亿秒中发生的事情也多了起来。前9亿秒基本是美国人在发展，从9亿秒开始，中国人开始入场。期待中国在接下来的每亿秒中创造出更好的技术和产品。</p><p><strong>说明</strong>:部分时间无法查到具体时间，所以用00:00:00代替。查到月份而无日期的用该月1日代替。总的来说，时间戳数量级不会错，因为一个月的时间戳2592000秒，影响不大。</p><table><thead><tr><th align="center">Unix系统时间(UTC+8)</th><th align="right">时间戳</th><th align="left">大事件</th><th align="left">地点/创立者</th></tr></thead><tbody><tr><td align="center">1970-01-01 08:00:00</td><td align="right">0.00秒</td><td align="left">Unix纪元开始</td><td align="left">美国贝尔实验室-肯·汤普森/丹尼斯·里奇</td></tr><tr><td align="center">1971-01-01 00:00:00</td><td align="right">0.31亿秒</td><td align="left">硅谷命名首次提出</td><td align="left">美国-唐·赫夫勒</td></tr><tr><td align="center">1972-01-01 00:00:00</td><td align="right">0.63亿秒</td><td align="left">C语言诞生</td><td align="left">美国贝尔实验室-丹尼斯·里奇/肯·汤普森</td></tr><tr><td align="center">1973-03-03 17:46:40</td><td align="right">1.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1973-05-22 00:00:00</td><td align="right">1.06亿秒</td><td align="left">以太网诞生</td><td align="left">美国-施乐公司鲍伯·梅特卡夫</td></tr><tr><td align="center">1974-12-01 00:00:00</td><td align="right">1.55亿秒</td><td align="left">互联网TCP协议发布</td><td align="left">美国-温顿·瑟夫/罗伯特·卡恩</td></tr><tr><td align="center">1975-04-04 00:00:00</td><td align="right">1.65亿秒</td><td align="left">微软公司成立</td><td align="left">美国-比尔·盖茨</td></tr><tr><td align="center">1976-04-01 00:00:00</td><td align="right">1.97亿秒</td><td align="left">苹果公司成立</td><td align="left">美国-史蒂芬·乔布斯</td></tr><tr><td align="center">1976-05-04 03:33:20</td><td align="right">2.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1977-06-01 00:00:00</td><td align="right">2.33亿秒</td><td align="left">甲骨文公司成立</td><td align="left">美国-拉里·埃里森</td></tr><tr><td align="center">1979-07-05 13:20:00</td><td align="right">3.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1980-01-01 00:00:00</td><td align="right">3.15亿秒</td><td align="left">计算机实现TCP协议</td><td align="left">美国-Bill Joy</td></tr><tr><td align="center">1981-08-12 00:00:00</td><td align="right">3.66亿秒</td><td align="left">第一款PC电脑发布</td><td align="left">美国-IBM公司</td></tr><tr><td align="center">1982-09-04 23:06:40</td><td align="right">4.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1983-12-01 00:00:00</td><td align="right">4.39亿秒</td><td align="left">C++语言诞生</td><td align="left">美国贝尔实验室-Bjarne Stroustrup</td></tr><tr><td align="center">1984-01-01 00:00:00</td><td align="right">4.41亿秒</td><td align="left">Matlab语言诞生</td><td align="left">美国-Cleve Moler</td></tr><tr><td align="center">1985-07-01 00:00:00</td><td align="right">4.88亿秒</td><td align="left">高通公司成立</td><td align="left">美国-雅各布斯</td></tr><tr><td align="center">1985-10-17 00:00:00</td><td align="right">4.98亿秒</td><td align="left">80386处理器发布</td><td align="left">美国-英特尔公司</td></tr><tr><td align="center">1985-11-05 08:53:20</td><td align="right">5.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1985-11-20 00:00:00</td><td align="right">5.01亿秒</td><td align="left">Windows 1.0发布</td><td align="left">美国-微软公司</td></tr><tr><td align="center">1987-09-14 21:07:00</td><td align="right">5.58亿秒</td><td align="left">互联网进入中国</td><td align="left">中国-钱天白发出第一封邮件</td></tr><tr><td align="center">1987-09-15 00:00:00</td><td align="right">5.58亿秒</td><td align="left">华为公司成立</td><td align="left">中国-任正非</td></tr><tr><td align="center">1987-10-25 00:00:00</td><td align="right">5.62亿秒</td><td align="left">台积电公司成立</td><td align="left">中国·台湾-张忠谋</td></tr><tr><td align="center">1988-08-01 00:00:00</td><td align="right">5.86亿秒</td><td align="left">微软发布首款Office</td><td align="left">美国-微软公司</td></tr><tr><td align="center">1989-01-05 18:40:00</td><td align="right">6.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1989-12-25 00:00:00</td><td align="right">6.30亿秒</td><td align="left">Python语言诞生</td><td align="left">荷兰-Guido von Rossum</td></tr><tr><td align="center">1990-11-27 00:00:00</td><td align="right">6.59亿秒</td><td align="left">ARM公司成立</td><td align="left">英国-赫尔曼·豪泽</td></tr><tr><td align="center">1990-12-25 00:00:00</td><td align="right">6.62亿秒</td><td align="left">万维网(WWW)诞生</td><td align="left">欧洲核子研究中心-蒂姆·伯纳斯-李</td></tr><tr><td align="center">1991-01-01 00:00:00</td><td align="right">6.63亿秒</td><td align="left">物联网概念提出</td><td align="left">美国麻省理工大学-Kevin Ashton</td></tr><tr><td align="center">1991-08-25 00:00:00</td><td align="right">6.80亿秒</td><td align="left">Linux系统诞生</td><td align="left">芬兰赫尔辛基大学-林纳斯·托瓦兹</td></tr><tr><td align="center">1992-03-08 04:26:40</td><td align="right">7.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1993-08-22 00:00:00</td><td align="right">7.45亿秒</td><td align="left">英伟达公司成立</td><td align="left">美国-黄仁勋</td></tr><tr><td align="center">1994-10-13 00:00:00</td><td align="right">7.80亿秒</td><td align="left">第一个浏览器诞生</td><td align="left">美国-网景公司(Mozilla前身)</td></tr><tr><td align="center">1995-03-01 00:00:00</td><td align="right">7.93亿秒</td><td align="left">雅虎公司成立</td><td align="left">美国-杨致远</td></tr><tr><td align="center">1995-05-09 14:13:20</td><td align="right">8.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1995-05-23 00:00:00</td><td align="right">8.01亿秒</td><td align="left">Java语言诞生</td><td align="left">美国-詹姆斯·高斯林</td></tr><tr><td align="center">1995-07-16 00:00:00</td><td align="right">8.05亿秒</td><td align="left">亚马逊公司成立</td><td align="left">美国-杰夫·贝佐斯</td></tr><tr><td align="center">1995-09-01 00:00:00</td><td align="right">8.09亿秒</td><td align="left">JavaScript语言诞生</td><td align="left">美国-网景公司·Brendan Eich</td></tr><tr><td align="center">1996-01-01 00:00:00</td><td align="right">8.20亿秒</td><td align="left">WiFI技术诞生</td><td align="left">澳大利亚-约翰·沙利文团队</td></tr><tr><td align="center">1997-05-11 00:00:00</td><td align="right">8.63亿秒</td><td align="left">深蓝击败象棋冠军</td><td align="left">美国-IBM公司</td></tr><tr><td align="center">1997-06-01 00:00:00</td><td align="right">8.65亿秒</td><td align="left">网易公司成立</td><td align="left">中国-丁磊</td></tr><tr><td align="center">1998-07-10 00:00:00</td><td align="right">9.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1998-09-04 00:00:00</td><td align="right">9.04亿秒</td><td align="left">谷歌公司成立</td><td align="left">美国-拉里·佩奇/谢尔盖·布林</td></tr><tr><td align="center">1998-09-22 00:00:00</td><td align="right">9.06亿秒</td><td align="left">GFW前身开启</td><td align="left">中国-公安部</td></tr><tr><td align="center">1998-11-11 00:00:00</td><td align="right">9.10亿秒</td><td align="left">腾讯公司成立</td><td align="left">中国-马化腾</td></tr><tr><td align="center">1999-07-06 00:00:00</td><td align="right">9.30亿秒</td><td align="left">超链专利发表</td><td align="left">美国-李彦宏</td></tr><tr><td align="center">1999-09-09 00:00:00</td><td align="right">9.36亿秒</td><td align="left">阿里巴巴公司成立</td><td align="left">中国-马云</td></tr><tr><td align="center">2000-01-01 00:00:00</td><td align="right">9.40亿秒</td><td align="left">百度公司成立</td><td align="left">中国-李彦宏</td></tr><tr><td align="center">2001-09-04 00:00:00</td><td align="right">9.90亿秒</td><td align="left">佩奇超链专利发表</td><td align="left">美国-拉里·佩奇</td></tr><tr><td align="center">2001-09-09 09:46:40</td><td align="right">10.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2003-10-01 00:00:00</td><td align="right">10.64亿秒</td><td align="left">安卓公司成立</td><td align="left">美国-安迪·罗宾</td></tr><tr><td align="center">2003-10-15 00:00:00</td><td align="right">10.66亿秒</td><td align="left">支付宝诞生</td><td align="left">中国-阿里巴巴·淘宝</td></tr><tr><td align="center">2004-02-04 00:00:00</td><td align="right">10.75亿秒</td><td align="left">Facebook公司成立</td><td align="left">美国-扎克伯格</td></tr><tr><td align="center">2004-11-09 19:33:20</td><td align="right">11.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2005-01-01 00:00:00</td><td align="right">11.04亿秒</td><td align="left">大数据概念提出</td><td align="left">美国-Roger Mougalas</td></tr><tr><td align="center">2005-04-07 00:00:00</td><td align="right">11.12亿秒</td><td align="left">Git工具诞生</td><td align="left">美国-林纳斯·托瓦兹</td></tr><tr><td align="center">2006-07-28 00:00:00</td><td align="right">11.54亿秒</td><td align="left">人工神经网络诞生</td><td align="left">加拿大-杰弗瑞·辛顿</td></tr><tr><td align="center">2006-08-09 00:00:00</td><td align="right">11.55亿秒</td><td align="left">云计算概念提出</td><td align="left">美国-谷歌CEO埃里克·施密特</td></tr><tr><td align="center">2007-05-25 00:00:00</td><td align="right">11.80亿秒</td><td align="left">Pornhub上线</td><td align="left">加拿大-Pornhub公司</td></tr><tr><td align="center">2007-01-09 00:00:00</td><td align="right">11.68亿秒</td><td align="left">iPhone首款发布</td><td align="left">美国-苹果公司</td></tr><tr><td align="center">2007-11-05 00:00:00</td><td align="right">11.68亿秒</td><td align="left">安卓系统首次发布</td><td align="left">美国-谷歌公司</td></tr><tr><td align="center">2008-01-01 00:00:00</td><td align="right">11.99亿秒</td><td align="left">5G概念提出</td><td align="left">美国-美国航空航天管理局</td></tr><tr><td align="center">2008-01-11 05:20:00</td><td align="right">12.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2008-04-10 00:00:00</td><td align="right">12.07亿秒</td><td align="left">Github上线</td><td align="left">美国-汤姆·普雷斯顿</td></tr><tr><td align="center">2009-01-03 00:00:00</td><td align="right">12.30亿秒</td><td align="left">比特币创世区块诞生</td><td align="left">日本-中本聪</td></tr><tr><td align="center">2009-08-14 00:00:00</td><td align="right">12.50亿秒</td><td align="left">新浪微博诞生</td><td align="left">中国-新浪公司</td></tr><tr><td align="center">2009-09-21 00:00:00</td><td align="right">12.53亿秒</td><td align="left">Go语言诞生</td><td align="left">美国-谷歌-原贝尔实验室成员肯.汤普森等</td></tr><tr><td align="center">2009-11-11 00:00:00</td><td align="right">12.57亿秒</td><td align="left">双十一活动诞生</td><td align="left">中国-阿里巴巴·淘宝</td></tr><tr><td align="center">2010-03-04 00:00:00</td><td align="right">12.67亿秒</td><td align="left">美团公司成立</td><td align="left">中国-王兴</td></tr><tr><td align="center">2010-04-06 00:00:00</td><td align="right">12.70亿秒</td><td align="left">小米公司成立</td><td align="left">中国-雷军</td></tr><tr><td align="center">2011-01-21 00:00:00</td><td align="right">12.95亿秒</td><td align="left">微信诞生</td><td align="left">中国-腾讯·张小龙团队</td></tr><tr><td align="center">2011-03-13 15:06:40</td><td align="right">13.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2012-03-09 00:00:00</td><td align="right">13.31亿秒</td><td align="left">字节跳动成立</td><td align="left">中国-张一鸣</td></tr><tr><td align="center">2012-06-01 00:00:00</td><td align="right">13.38亿秒</td><td align="left">滴滴公司成立</td><td align="left">中国-程维</td></tr><tr><td align="center">2013-01-01 00:00:00</td><td align="right">13.56亿秒</td><td align="left">边缘计算概念提出</td><td align="left">美国-Ryan LaMothe</td></tr><tr><td align="center">2014-04-01 00:00:00</td><td align="right">13.96亿秒</td><td align="left">ofo小黄车公司成立</td><td align="left">中国-戴威</td></tr><tr><td align="center">2014-05-14 00:53:20</td><td align="right">14.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2014-06-02 00:00:00</td><td align="right">14.01亿秒</td><td align="left">Swift语言发布</td><td align="left">美国-苹果公司</td></tr><tr><td align="center">2015-01-01 00:00:00</td><td align="right">14.20亿秒</td><td align="left">云原生推出</td><td align="left">美国-CNCF</td></tr><tr><td align="center">2015-02-27 00:00:00</td><td align="right">14.24亿秒</td><td align="left">星际文件系统发布</td><td align="left">美国-协议实验室</td></tr><tr><td align="center">2015-05-15 00:00:00</td><td align="right">14.31亿秒</td><td align="left">Rust语言发布</td><td align="left">美国-Mozilla公司</td></tr><tr><td align="center">2016-03-15 17:02:00</td><td align="right">14.58亿秒</td><td align="left">Alpha-Go大败李世石</td><td align="left">韩国-Alpha-Go VS 李世石</td></tr><tr><td align="center">2016-08-16 01:40:00</td><td align="right">14.71亿秒</td><td align="left">墨子号量子卫星发射</td><td align="left">中国-中科大·潘建伟团队</td></tr><tr><td align="center">2016-09-20 00:00:00</td><td align="right">14.74亿秒</td><td align="left">抖音上线</td><td align="left">中国-字节跳动公司</td></tr><tr><td align="center">2017-07-14 10:40:00</td><td align="right">15.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2017-09-25 00:00:00</td><td align="right">15.06亿秒</td><td align="left">量子编程语言Q#发布</td><td align="left">美国-微软公司</td></tr><tr><td align="center">2017-11-16 00:00:00</td><td align="right">15.10亿秒</td><td align="left">6G概念提出</td><td align="left">英国-Neil McRae</td></tr><tr><td align="center">2019-05-23 00:00:00</td><td align="right">15.58亿秒</td><td align="left">SpaceX星链卫星发射</td><td align="left">美国-SpaceX公司</td></tr><tr><td align="center">2019-09-20 00:00:00</td><td align="right">15.68亿秒</td><td align="left">谷歌量子霸权</td><td align="left">美国-谷歌公司</td></tr><tr><td align="center">2019-11-01 00:00:00</td><td align="right">15.72亿秒</td><td align="left">5G正式商用</td><td align="left">中国-三大运营商/华为公司</td></tr><tr><td align="center">2020-01-01 08:00:00</td><td align="right">15.77亿秒</td><td align="left">Unix纪元50周年</td><td align="left"></td></tr><tr><td align="center">2020-06-18 06:55:37</td><td align="right">15.92亿秒</td><td align="left">量子编程语言Silq发布</td><td align="left">瑞士-苏黎世联邦理工学院Martin Vechev</td></tr><tr><td align="center">2020-09-13 20:26:40</td><td align="right">16.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2023-11-15 06:13:20</td><td align="right">17.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2027-01-15 16:00:00</td><td align="right">18.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2030-03-18 01:46:40</td><td align="right">19.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2033-05-18 11:33:20</td><td align="right">20.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2036-07-18 21:20:00</td><td align="right">21.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2038-01-19 11:14:08</td><td align="right">21.47亿秒</td><td align="left">所有32位操作系统报废</td><td align="left"></td></tr><tr><td align="center">2039-09-19 07:06:40</td><td align="right">22.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2042-11-19 16:53:20</td><td align="right">23.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2046-01-20 02:40:00</td><td align="right">24.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2049-03-22 12:26:40</td><td align="right">25.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2052-05-22 22:13:20</td><td align="right">26.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2055-07-24 08:00:00</td><td align="right">27.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2058-09-23 17:46:40</td><td align="right">28.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2061-11-24 03:33:20</td><td align="right">29.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2065-01-24 13:20:00</td><td align="right">30.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2068-03-26 23:06:40</td><td align="right">31.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2070-01-01 08:00:00</td><td align="right">31.50亿秒</td><td align="left">Unix纪元100周年</td><td align="left"></td></tr><tr><td align="center">2071-05-28 08:53:20</td><td align="right">32.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2074-07-28 18:40:00</td><td align="right">33.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2077-09-28 04:26:40</td><td align="right">34.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2080-11-28 14:13:20</td><td align="right">35.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2084-01-30 00:00:00</td><td align="right">36.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2087-04-01 09:46:40</td><td align="right">37.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2090-06-01 19:33:20</td><td align="right">38.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2093-08-02 05:20:00</td><td align="right">39.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2096-10-02 15:06:40</td><td align="right">40.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2099-12-04 00:53:20</td><td align="right">41.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2100-01-01 00:00:00</td><td align="right">41.02亿秒</td><td align="left">Unix纪元进入22世纪</td><td align="left"></td></tr><tr><td align="center">2103-02-04 10:40:00</td><td align="right">42.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2106-04-06 20:26:40</td><td align="right">43.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2109-06-07 06:13:20</td><td align="right">44.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2110-01-02 06:28:16</td><td align="right">44.18亿秒</td><td align="left">比特币时间戳溢出</td><td align="left"></td></tr><tr><td align="center">2112-08-07 16:00:00</td><td align="right">45.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2115-10-09 01:46:40</td><td align="right">46.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2118-l2-09 11:33:20</td><td align="right">47.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2122-02-08 21:20:00</td><td align="right">48.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2125-04-11 07:06:40</td><td align="right">49.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2128-06-11 16:53:20</td><td align="right">50.00亿秒</td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/13/w0Hp2n.png&quot; alt=&quot;unixtimestamp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="互联网" scheme="http://www.shieber.cn/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="unix" scheme="http://www.shieber.cn/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>如何制作deb包</title>
    <link href="http://www.shieber.cn/title/583751c1/"/>
    <id>http://www.shieber.cn/title/583751c1/</id>
    <published>2020-09-07T10:17:18.000Z</published>
    <updated>2020-09-10T10:50:59.171Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/09/10/wJoQ4U.png" alt="deb"></p><a id="more"></a><p>平时安装软件有可能用到deb包，那么它是如何制作的呢？</p><h2 id="学会包命名"><a href="#学会包命名" class="headerlink" title="学会包命名"></a>学会包命名</h2><p>包名格式：软件名_上游版本号.主版本号.次版本号-修订号_平台</p><p>如: gim_bash_0.0.4-1_amd64</p><h2 id="安排deb包内部结构"><a href="#安排deb包内部结构" class="headerlink" title="安排deb包内部结构"></a>安排deb包内部结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└── gim_bash_0.0.4-1_amd64</span><br><span class="line">    ├── DEBIAN</span><br><span class="line">    │   └── control</span><br><span class="line">    └── usr</span><br><span class="line">        └── local</span><br><span class="line">            └── bin</span><br><span class="line">                └── gim</span><br></pre></td></tr></table></figure><p>上面是一个deb包打包前的结构，DEBIAN/control为控制文件，里面写了各种软件包信息。gim为代码，<br>usr/local/bin/是gim最终安装位置，也可以安装到/usr/bin，则结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└── gim_bash_0.0.4-1_amd64</span><br><span class="line">    ├── DEBIAN</span><br><span class="line">    │   └── control</span><br><span class="line">    └── usr</span><br><span class="line">        └── bin</span><br><span class="line">            └── gim</span><br></pre></td></tr></table></figure><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><ul><li>写好代码，(编译)，修改最终文件属性<blockquote><p>sudo chown root gim<br>sudo chgrp root gim</p></blockquote></li><li>准备好deb包结构</li><li>修改control文件</li><li>打包为deb</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">drwxrwxr-x 4 shieber shieber 4.0K 9月   8 13:55 gim_bash_0.0.4-1_amd64</span><br><span class="line"><span class="meta">$</span><span class="bash"> dpkg-deb --build gim_bash_0.0.4-1_amd64/</span></span><br><span class="line">dpkg-deb: 正在 'gim_bash_0.0.4-1_amd64.deb' 中构建软件包 'gim'。</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls </span></span><br><span class="line">drwxrwxr-x 4 shieber shieber 4.0K 9月   8 13:55 gim_bash_0.0.4-1_amd64</span><br><span class="line">-rw-r--r-- 1 shieber shieber 1.9K 9月  10 18:42 gim_bash_0.0.4-1_amd64.deb</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i gim_bash_0.0.4-1_amd64.deb</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/10/wJoQ4U.png&quot; alt=&quot;deb&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件包" scheme="http://www.shieber.cn/categories/%E8%BD%AF%E4%BB%B6%E5%8C%85/"/>
    
    
      <category term="deb" scheme="http://www.shieber.cn/tags/deb/"/>
    
  </entry>
  
  <entry>
    <title>编程语言的七夕</title>
    <link href="http://www.shieber.cn/title/b4d27a1f/"/>
    <id>http://www.shieber.cn/title/b4d27a1f/</id>
    <published>2020-08-25T15:25:07.000Z</published>
    <updated>2020-08-30T02:39:36.047Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/25/d2lbbn.png" alt="valentine"></p><a id="more"></a><p>有Hello world项目，七夕节，今天就来个I love you。看看计算机各种编程语言如何输出I love you。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">英特尔64位机器语言(16进制，大量删节)</span><br><span class="line"></span><br><span class="line">7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............</span><br><span class="line">0300 3e00 0100 0000 3005 0000 0000 0000  ..&gt;.....0.......</span><br><span class="line">4000 0000 0000 0000 2819 0000 0000 0000  @.......(.......</span><br><span class="line">0000 0000 4000 3800 0900 4000 1d00 1c00  ....@.8...@.....</span><br><span class="line">0000 0000 4000 3800 0900 4000 1d00 1c00  .... . .........</span><br><span class="line">0000 0000 4000 3800 0900 4000 1d00 1c00  .......... .....</span><br><span class="line">4802 0000 0000 0000 4802 0000 0000 0000  H.......H.......</span><br><span class="line">0100 0000 0000 0000 2f6c 6962 3634 2f6c  ......../lib64/l</span><br><span class="line">642d 6c69 6e75 782d 7838 362d 3634 2e73  d-linux-x86-64.s</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  o.2.............</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  ....... ........</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  ..... ..........</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  ................</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  .. .............</span><br><span class="line">474e 5500 0000 0000 0300 0000 0200 0000  GNU.............</span><br><span class="line">474e 5500 62ac 36a4 3ad7 9006 fbe2 d107  GNU.b.6.:.......</span><br><span class="line">d9c9 dd6f ce89 2222 0100 0000 0100 0000  ...o..&quot;&quot;........</span><br><span class="line">006c 6962 632e 736f 2e36 0070 7574 7300  .libc.so.6.puts.</span><br><span class="line">5f5f 6378 615f 6669 6e61 6c69 7a65 005f  __cxa_finalize._</span><br><span class="line">5f6c 6962 635f 7374 6172 745f 6d61 696e  _libc_start_main</span><br><span class="line">0047 4c49 4243 5f32 2e32 2e35 005f 4954  .GLIBC_2.2.5._IT</span><br><span class="line">415e 415f c390 662e 0f1f 8400 0000 0000  A^A_..f.........</span><br><span class="line">f3c3 0000 4883 ec08 4883 c408 c300 0000  ....H...H.......</span><br><span class="line">0100 0200 4920 6c6f 7665 2079 6f75 0000  ....I love you..</span><br><span class="line">011b 033b 3c00 0000 0600 0000 10fe ffff  ...;&lt;...........</span><br><span class="line">8800 0000 30fe ffff b000 0000 40fe ffff  ....0.......@...</span><br><span class="line">4743 433a 2028 5562 756e 7475 2037 2e35  GCC: (Ubuntu 7.5</span><br><span class="line">2e30 2d33 7562 756e 7475 317e 3138 2e30  .0-3ubuntu1~18.0</span><br><span class="line">3429 2037 2e35 2e30 0000 0000 0000 0000  4) 7.5.0........</span><br><span class="line">006d 6169 6e00 5f5f 544d 435f 454e 445f  .main.__TMC_END_</span><br><span class="line">5f00 5f49 544d 5f72 6567 6973 7465 7254  _._ITM_registerT</span><br><span class="line">4d43 6c6f 6e65 5461 626c 6500 5f5f 6378  MCloneTable.__cx</span><br><span class="line">4d43 6c6f 6e65 5461 626c 6500 5f5f 6378  ...... .. ......</span><br><span class="line">615f 6669 6e61 6c69 7a65 4040 474c 4942  a_finalize@@GLIB</span><br><span class="line">435f 322e 322e 3500 002e 7379 6d74 6162  C_2.2.5...symtab</span><br><span class="line">0200 0000 0000 0000 3802 0000 0000 0000  ........8.......</span><br><span class="line">3802 0000 0000 0000 1c00 0000 0000 0000  8...............</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">汇编语言(1949年)</span><br><span class="line">section .data            </span><br><span class="line">        msg db &quot;I love you&quot;, 0xA</span><br><span class="line">        len equ $ - msg</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line">_start:</span><br><span class="line">        mov eax, 4</span><br><span class="line">        mov ebx, 1 </span><br><span class="line">        mov ecx, msg</span><br><span class="line">        mov edx, len</span><br><span class="line">        int 0x80 </span><br><span class="line">                 </span><br><span class="line">        mov eax, 1</span><br><span class="line">        mov ebx, 0</span><br><span class="line">        int 0x80</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```Fortran</span><br><span class="line">Fortran语言(1957年诞生，上古四大语言之一，世界上第一门高级语言)</span><br><span class="line">program love</span><br><span class="line">write (*.*) &quot;I love you&quot;</span><br><span class="line">end program love</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lisp语言(1958年诞生，上古四大语言之一，人工智能语言)</span><br><span class="line"></span><br><span class="line">(<span class="name">print</span> <span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">COBOL语言(1959年诞生，上古四大语言之一，目前用于银行系统)</span><br><span class="line">IDENTIFICATION   DIVISION.</span><br><span class="line">PROGRAM-ID.      &apos;七夕快乐&apos;.</span><br><span class="line">ENVIRONMENT      DIVISION.</span><br><span class="line">DATA             DIVISION.</span><br><span class="line">FILE             SECTION.</span><br><span class="line">WORKING-STORAGE  SECTION.</span><br><span class="line">PROCEDURE        DIVISION.</span><br><span class="line">MAIN-PROCEDURE.</span><br><span class="line">DISPLAY &quot;I love you&quot;.</span><br><span class="line">STOP RUN.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALGOL语言(1960年诞生，上古四大语言之一，代数语言，C语言祖宗)</span><br><span class="line">(print((&quot;I love you&quot;,newline)))</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Basic语言(1964年诞生，比尔盖茨发家语言)</span><br><span class="line">PRINT "I love you"</span><br><span class="line">END</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">B语言(1969年诞生，C语言前身，C语言又叫NewB)</span><br><span class="line">main() &#123;</span><br><span class="line">    extern a, b, c;</span><br><span class="line">    putchar (a); putchar (b); putchar (c);</span><br><span class="line">&#125;</span><br><span class="line">a &apos;hell&apos;;</span><br><span class="line">b &apos;o, w&apos;;</span><br><span class="line">c &apos;orld&apos;;</span><br></pre></td></tr></table></figure><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Pascal</span>语言(<span class="number">1970</span>年诞生，用于教学)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">writeln("I love you")</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C语言(<span class="number">1972</span>年诞生，和Unix同生，共同催生了Linux，众多编程语言以及互联网)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I love you!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```Smalltalk</span><br><span class="line">Smalltalk语言(<span class="number">1972</span>年诞生，第一门面向对象的语言)</span><br><span class="line">Transcript show: <span class="string">"I love you"</span>; cr.</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scheme语言(1975年诞生，Lisp变种之一)</span><br><span class="line">(<span class="name"><span class="builtin-name">display</span></span> <span class="string">"I love you"</span>)(<span class="name"><span class="builtin-name">newline</span></span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bash语言(1977年诞生，Linux系统默认工具语言)</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "I love you"</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C++语言(<span class="number">1980</span>年诞生，C的扩展版，支持面向对象)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"I love you"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">R语言(<span class="number">1980</span>年诞生，用于统计)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Matlab语言(<span class="number">1984</span>年诞生，数值计算，仿真，底层基于C语言)</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Objective-C语言(1986年诞生，C语言的一种扩展，用于开发IOS和Mac系统等)</span><br><span class="line">#import &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#import &lt;objc/Object.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;I love you\n&quot;);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Perl语言(<span class="number">1987</span>年诞生，借鉴C，Shell)</span><br><span class="line"><span class="comment">#!/usr/bin/env perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"I love you\n"</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Html标记语言(1990年诞生，网页语言，由互联网之父蒂姆.伯纳斯.李发明)</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>七夕快乐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>I love you<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python2语言(1991年诞生，底层基于C语言)</span><br><span class="line">#!/usr/bin/env python2</span><br><span class="line">#-*- coding: utf-8</span><br><span class="line">print &quot;I love you&quot;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Lua语言(<span class="number">1993</span>年诞生，大量用于游戏和数据库事务)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java语言(<span class="number">1995</span>年诞生，类C/C++语言，目前属于甲骨文公司)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 7<span class="title">x</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I love you"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaScript语言(<span class="number">1995</span>年诞生，网页交互)</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">"I love you"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ruby语言(<span class="number">1995</span>年诞生，日本人松本行弘发明)</span><br><span class="line">print <span class="string">"I love you\n"</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PHP语言(<span class="number">1995</span>年诞生，又名拍黄片，网站建设LAMP中的P)</span><br><span class="line">&lt;!DOCTYPE html&gt;  </span><br><span class="line">    &lt;body&gt;  </span><br><span class="line">    <span class="meta">&lt;?php</span>  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I love you"</span>;</span><br><span class="line">    <span class="meta">?&gt;</span>  </span><br><span class="line">    &lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">C<span class="meta">#语言(1999年诞生，微软公司开发)</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">namespace 7x</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">love</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"I love you"</span>);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```D</span><br><span class="line">D语言(<span class="number">1999</span>年诞生)</span><br><span class="line">import std.stdio</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    writeln(<span class="string">"I love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Python3语言(2008年诞生，Python2的下一代)</span><br><span class="line">#!/usr/bin/env python3</span><br><span class="line">#-*- coding: utf-8</span><br><span class="line"></span><br><span class="line">print(&quot;I love you&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Go语言(<span class="number">2009</span>年诞生，云时代语言，谷歌公司开发)</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"I love you"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rust语言(<span class="number">2010</span>年诞生，Mozilla公司开发，高效安全的语言，目标是替代C/C++语言)</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WebAssembly语言文本格式(2010年诞生，Mozilla公司开发)</span><br><span class="line">(module</span><br><span class="line">    (func (result i32)</span><br><span class="line">        (i32.const 0)</span><br><span class="line">    )</span><br><span class="line">    (export &quot;I love you&quot; (func 0))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dart语言(<span class="number">2011</span>年诞生，谷歌公司开发，支持其下一代操作系统fuchsia和flutter网页开发框架)</span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Kotlin语言(<span class="number">2011</span>年诞生，谷歌官方指定安卓系统开发语言)</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"I love you"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TypeScript语言(<span class="number">2012</span>年诞生，JavaScript超集，微软公司开发)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I love you"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Julia语言(<span class="number">2012</span>年诞生，用于高性能计算)</span><br><span class="line">println(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Swift</span>语言(<span class="number">2014</span>年诞生，苹果公司开发，用于开发<span class="type">IOS</span>和<span class="type">Mac</span>系统等)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/25/d2lbbn.png&quot; alt=&quot;valentine&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.shieber.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="CS" scheme="http://www.shieber.cn/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核代码结构</title>
    <link href="http://www.shieber.cn/title/71001b59/"/>
    <id>http://www.shieber.cn/title/71001b59/</id>
    <published>2020-08-07T08:58:13.000Z</published>
    <updated>2020-08-19T08:51:56.532Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/07/afOPyT.png" alt="linus-tux"></p><a id="more"></a><h1 id="Linux系统结构"><a href="#Linux系统结构" class="headerlink" title="Linux系统结构"></a>Linux系统结构</h1><p>大二时阅读过linus在1991年写的kernel-0.01版，现在发现和今天的内核比起来结构超级简单。下图是Linux系统架构图，中线间就是内核。</p><p><img src="https://s1.ax1x.com/2020/08/07/afL3in.png" alt="kernel-arch"></p><h3 id="1991年0-01版内核目录及文件"><a href="#1991年0-01版内核目录及文件" class="headerlink" title="1991年0.01版内核目录及文件"></a>1991年0.01版内核目录及文件</h3><table><thead><tr><th align="left">num</th><th align="left">dir</th><th align="left">note</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">boot</td><td align="left">启动文件</td></tr><tr><td align="left">2</td><td align="left">init</td><td align="left">初始化/主进程</td></tr><tr><td align="left">2</td><td align="left">fs</td><td align="left">文件系统</td></tr><tr><td align="left">7</td><td align="left">mm</td><td align="left">内存管理</td></tr><tr><td align="left">5</td><td align="left">kernel</td><td align="left">内核文件</td></tr><tr><td align="left">3</td><td align="left">include</td><td align="left">头文件</td></tr><tr><td align="left">6</td><td align="left">lib</td><td align="left">函数库</td></tr><tr><td align="left">8</td><td align="left">tools</td><td align="left">工具</td></tr><tr><td align="left">9</td><td align="left">Makefile</td><td align="left">编译脚本</td></tr></tbody></table><p>启动文件中boot.s先运行，接着是head.s运行，最后切换到init中的main.c开启init线程。其他文件是kernel用来管理的各类必备文件。</p><h3 id="2020年5-8版本内核目录及文件"><a href="#2020年5-8版本内核目录及文件" class="headerlink" title="2020年5.8版本内核目录及文件"></a>2020年5.8版本内核目录及文件</h3><table><thead><tr><th align="left">num</th><th align="left">item</th><th align="left">item</th><th align="left">item</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">arch</td><td align="left">init</td><td align="left">net</td></tr><tr><td align="left">2</td><td align="left">block</td><td align="left">ipc</td><td align="left">README</td></tr><tr><td align="left">3</td><td align="left">certs</td><td align="left">Kbuild</td><td align="left">samples</td></tr><tr><td align="left">4</td><td align="left">COPYING</td><td align="left">Kconfig</td><td align="left">scripts</td></tr><tr><td align="left">5</td><td align="left">CREDITS</td><td align="left">kernel</td><td align="left">security</td></tr><tr><td align="left">6</td><td align="left">crypto</td><td align="left">lib</td><td align="left">sound</td></tr><tr><td align="left">7</td><td align="left">Documentation</td><td align="left">Makefile</td><td align="left">tools</td></tr><tr><td align="left">8</td><td align="left">drivers</td><td align="left">mm</td><td align="left">usr</td></tr><tr><td align="left">9</td><td align="left">fs</td><td align="left">LICENSES</td><td align="left">virt</td></tr><tr><td align="left">10</td><td align="left">include</td><td align="left">MAINTAINERS</td><td align="left"></td></tr></tbody></table><p>可以看到，2020年的内核和1991年的内核相比，变化非常大。具体代码行数变化如下图所示。  </p><p><img src="https://s1.ax1x.com/2020/08/07/afjNsf.png" alt="code-0.01"></p><p><img src="https://s1.ax1x.com/2020/08/07/afjgyV.png" alt="code-5.80"></p><p>30年间，从89个文件变成了69319个文件。代码行数从8326行到1950万行，这就是开源的奇迹。</p><h3 id="0-01版代码树"><a href="#0-01版代码树" class="headerlink" title="0.01版代码树"></a>0.01版代码树</h3><p>.<br>├── boot 启动文件<br>│   ├── boot.s<br>│   └── head.s<br>├── fs  文件系统<br>│   ├── bitmap.c<br>│   ├── block_dev.c<br>│   ├── buffer.c<br>│   ├── char_dev.c<br>│   ├── exec.c<br>│   ├── fcntl.c<br>│   ├── file_dev.c<br>│   ├── file_table.c<br>│   ├── inode.c<br>│   ├── ioctl.c<br>│   ├── Makefile<br>│   ├── namei.c<br>│   ├── open.c<br>│   ├── pipe.c<br>│   ├── read_write.c<br>│   ├── stat.c<br>│   ├── super.c<br>│   ├── truncate.c<br>│   └── tty_ioctl.c<br>├── include 头文件<br>│   ├── a.out.h<br>│   ├── asm<br>│   │   ├── io.h<br>│   │   ├── memory.h<br>│   │   ├── segment.h<br>│   │   └── system.h<br>│   ├── const.h<br>│   ├── ctype.h<br>│   ├── errno.h<br>│   ├── fcntl.h<br>│   ├── linux<br>│   │   ├── config.h<br>│   │   ├── fs.h<br>│   │   ├── hdreg.h<br>│   │   ├── head.h<br>│   │   ├── kernel.h<br>│   │   ├── mm.h<br>│   │   ├── sched.h<br>│   │   ├── sys.h<br>│   │   └── tty.h<br>│   ├── signal.h<br>│   ├── stdarg.h<br>│   ├── stddef.h<br>│   ├── string.h<br>│   ├── sys<br>│   │   ├── stat.h<br>│   │   ├── times.h<br>│   │   ├── types.h<br>│   │   ├── utsname.h<br>│   │   └── wait.h<br>│   ├── termios.h<br>│   ├── time.h<br>│   ├── unistd.h<br>│   └── utime.h<br>├── init 初始化/主进程0<br>│   └── main.c<br>├── kernel 内核文件<br>│   ├── asm.s<br>│   ├── console.c<br>│   ├── exit.c<br>│   ├── fork.c<br>│   ├── hd.c<br>│   ├── keyboard.s<br>│   ├── Makefile<br>│   ├── mktime.c<br>│   ├── panic.c<br>│   ├── printk.c<br>│   ├── rs_io.s<br>│   ├── sched.c<br>│   ├── serial.c<br>│   ├── sys.c<br>│   ├── system_call.s<br>│   ├── traps.c<br>│   ├── tty_io.c<br>│   └── vsprintf.c<br>├── lib  函数库<br>│   ├── close.c<br>│   ├── ctype.c<br>│   ├── dup.c<br>│   ├── errno.c<br>│   ├── execve.c<br>│   ├── _exit.c<br>│   ├── Makefile<br>│   ├── open.c<br>│   ├── setsid.c<br>│   ├── string.c<br>│   ├── wait.c<br>│   └── write.c<br>├── Makefile<br>├── mm  内存管理<br>│   ├── Makefile<br>│   ├── memory.c<br>│   └── page.s<br>└── tools 工具<br>│   └── build.c  </p><p>11 directories, 88 files  </p><p>里面的代码不难，但细节多。看了人家大佬的代码，再反思自己的代码，差距很大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/07/afOPyT.png&quot; alt=&quot;linus-tux&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="内核" scheme="http://www.shieber.cn/categories/%E5%86%85%E6%A0%B8/"/>
    
    
      <category term="Linux" scheme="http://www.shieber.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>华为面试</title>
    <link href="http://www.shieber.cn/title/f822c036/"/>
    <id>http://www.shieber.cn/title/f822c036/</id>
    <published>2020-08-04T04:52:39.000Z</published>
    <updated>2020-08-14T00:31:45.861Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/04/a0F4bR.png" alt="interview"></p><a id="more"></a><p>最近参加华为面试，感觉问的问题很有价值，总结了下面试的题目。</p><h2 id="一面-2020-08-03-10-05"><a href="#一面-2020-08-03-10-05" class="headerlink" title="一面 [2020.08.03 10:05]"></a>一面 [2020.08.03 10:05]</h2><ul><li>谈谈分布式。  </li><li>谈谈数据结构。  </li><li>哈希碰撞如何解决？  </li><li>手撕代码：集合合并。  </li><li>谈Python，Rust语言。  </li><li>四层B+树，查找需要次数？  </li><li>B+树的查找过程是怎么样？  </li><li>B+树适合的情况，B+树节点分裂的条件。  </li><li>存储10万左右的中国地名数据，自己设计数据模型来存储，要求实现快速访问。  </li></ul><h2 id="二面-2020-08-04-10-01"><a href="#二面-2020-08-04-10-01" class="headerlink" title="二面 [2020.08.04 10:01]"></a>二面 [2020.08.04 10:01]</h2><ul><li>谈汇编语言。</li><li>谈编程语言发展。</li><li>谈微服务和集群。</li><li>谈软件开发原则。</li><li>软件开发设计模式。</li><li>谈对Linux系统认识。</li><li>谈谈Linux内核架构。</li><li>谈Linux系统调用流程。</li><li>操作系统调度的单位是？</li><li>谈面向对象和面向过程。</li><li>谈软件开发，如何优化呢？</li><li>谈如何使用各种数据结构。</li><li>调用时栈的情况，栈的毁坏。</li><li>为什么会出现NoSql，NewSql？</li><li>关系型数据库和NoSQL有什么区别？</li><li>设计一个图书馆系统，你如何设计？</li><li>设计一个调度系统，你考虑如何设计？</li><li>100亿文档数据存储，你如何存储处理？</li><li>1+2这样的计算，计算机的处理流程是？</li></ul><h2 id="面试官建议"><a href="#面试官建议" class="headerlink" title="面试官建议 "></a>面试官建议 </h2><ul><li>计算机技术飞速发展，但底层技术永不过时，需要学好。  </li><li>了解技术发展的历史沿革，要做到即有广度，更有深度。</li></ul><h2 id="三面-2020-08-13-19-06"><a href="#三面-2020-08-13-19-06" class="headerlink" title="三面 [2020.08.13 19:06]"></a>三面 [2020.08.13 19:06]</h2><ul><li>自我介绍 </li><li>对加班的看法？</li><li>你的职业规划？</li><li>竞赛中遇到的困难？</li><li>人生中遇到的最大困难？</li><li>令你很有成就感的事情？</li><li>你如何安排自己的日常事务？</li><li>如何看待华为被称为血汗工厂？</li></ul><h2 id="面试官建议-1"><a href="#面试官建议-1" class="headerlink" title="面试官建议 "></a>面试官建议 </h2><ul><li>分配到边缘存储岗位，涉及容器，AI等技术。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/04/a0F4bR.png&quot; alt=&quot;interview&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://www.shieber.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="IT" scheme="http://www.shieber.cn/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>21世纪计算机技术发展展望</title>
    <link href="http://www.shieber.cn/title/a1d4a508/"/>
    <id>http://www.shieber.cn/title/a1d4a508/</id>
    <published>2020-08-02T07:58:24.000Z</published>
    <updated>2020-08-08T01:42:03.915Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/02/aY6dW8.png" alt="21-new-tech"></p><a id="more"></a><p>学习计算机技术的过程中，不免发现问题，有时还能迸发些新的思想。本文就是这样的情况下诞生的，试着对本世纪计算机可能发展的趋势作预测，算是瞎猜吧！</p><p>对网络尤其是七层参考互联模型的研究使我相信，未来一定会有新的协议和技术出现。结合个人对技术的掌握和理解，下面两幅图整理了未来我眼中的计算机技术发展方向。</p><p><img src="https://s1.ax1x.com/2020/08/02/aY6jSO.png" alt="21-new-tech-part1"><br><img src="https://s1.ax1x.com/2020/08/02/aYcpmd.png" alt="21-new-tech-part2"></p><h2 id="对语言的看法"><a href="#对语言的看法" class="headerlink" title="对语言的看法"></a>对语言的看法</h2><p>  传统的语言，比如C/C++/Java/Python之类的语言都是在单机时代设计的，那时多CPU的机器没有，所以很多语言就没有考虑多CPU并行，更多的考虑是和机器硬件的交互，如指针，内存。虽然部分语言也支持并行，但程度不够。这类语言我称之为机器系语言。</p><p>  类似Go语言这样的语言，天生自带并发/并行机制，是网络时代需要的语言。Go对许多问题的处理都比较好，写出的代码也很规范。在网络大并发时代，Go必将大放异彩，我称Go这类语言为网络系语言。</p><p>  量子系语言，这是为量子计算机准备的。鄙人学过一点量子力学(知道名词)，知道这技术和传统IT技术的不同，所以在量子计算机上跑的语言必定需要专门设计，目前这类语言有Q#和Silq。</p><p>  最后是星际系语言，这是我本人的设想。设想人类在月球和火星上建立科研机构，甚至永久居住地。那么地球如何与之通信？现行的通信机制需要修改，语言核心特性也需要改。</p><p>  我的设想是，通过发射足够多的环日卫星和环球卫星，在火星，地球，月球周围形成通信卫星网。然后就可以利用环日卫星作中转站实现大规模跨空域信息传送。</p><p>  这样一种构建在太阳，地球，月球，火星等星体间的网络。我称之为银河网。据此网络，可提出银河网需要的通信协议和计算，存储等概念。</p><h2 id="对操作系统的看法"><a href="#对操作系统的看法" class="headerlink" title="对操作系统的看法"></a>对操作系统的看法</h2><p>  目前手机端是安卓和苹果，桌面是Linux/Mac OS/Windows，相信未来这些都会发生变化。比如谷歌正在推Fuchsia系统，计划用Dart/Flutter统一桌面和手机端。未来的趋势可能是手机和桌面统一，前端开发统一标准，一处编写，到处都可以用。</p><p>  工业用的系统，比如物联网系统要应对产业园，家用，医疗，交通等场景。这些场景对实时，性能的要求和传统的手机和电脑不同，所以应该会诞生适合物联网的系统。</p><p>  云时代，云产品商作为后台为开发者/企业服务。云产品很大程度上相当于运维，所以对存储，配置，管理，灾备要求高，反而通用系统的一些性能不用那么在意。所以云操作系统可以在传统系统上改进。目前已经有很多云系统了，阿里就有飞天系统。</p><p>  量子体系和传统PC不一样，所以也需要配套的操作系统。</p><p>  至于设想的银河网，设计星际通信，更需要专用系统，它应该会从传统的系统演进。</p><h2 id="对计算的看法"><a href="#对计算的看法" class="headerlink" title="对计算的看法"></a>对计算的看法</h2><p>  计算机，计算占了2/3，所以未来的计算也必定走出自己的发展道路。传统的计算，最快就是超级计算，代表了一个国家的科技实力。而云/雾/霾计算是过去几年提得比较多的，适应的是不同需求。边缘计算就是终端计算，比如手机和电脑端。量子计算是专业的，一直在搞的量子计算机就是为了作计算，这块是必然发展的。星际计算是传统计算的衍生，只是把计算放到星际环境考虑。</p><h2 id="对存储的看法"><a href="#对存储的看法" class="headerlink" title="对存储的看法"></a>对存储的看法</h2><p>硬盘，高速存储芯片这些我们都用过了，大型数据库也有了。今天来看似乎我们进入了大数据时代，好像数据就有多大似的。然而人的追求是无限的。比如，如何保存数据几十上百年？未来的数据，目前的数据库能不能处理得了？如何快速取出？量子信息如何保存？这些需求都需要相应的存储技术。分布式，超大规模的存储技术必然还要向前发展。对保存时间的追求诞生了玻璃存储，对数据量的追求诞生了DNA存储。这些新的存储形式如何运用到计算机系统中？还有，物联网实时数据会有多大呢？目前磁盘存储速度太慢了，无法满足高速率大数据持续写入。从目前的技术来看，未来相变(PCM)存储可能会成为主流，说不定还会替代DRAM内存。类似的还有赛道存储器、高速磁存储器。</p><h2 id="对协议的看法"><a href="#对协议的看法" class="headerlink" title="对协议的看法"></a>对协议的看法</h2><p>一流企业做协议(专利)，二流做产品，三流做服务。Unicode码不断发展，解决了地球人的文字保存问题。TCP/IP协议族给出了网际通信的标准。区块链协议给出了信任链。新的需求推动新的协议诞生。量子通信，必然有量子协议。星际通信则会有星际通信协议。</p><h2 id="对网络的看法"><a href="#对网络的看法" class="headerlink" title="对网络的看法"></a>对网络的看法</h2><p>局域网，互联网已蔚为大观。然而互联网也有问题：文件重复(不同地方重复)，文件易丢失(404)。如何解决冗余，如何避免404？以p2p技术为组成的IPFS正是为此而来。物联网，也有一张网，可能是家具，汽车，医院，工厂等大家伙构成的一张网，和人类用的互联网并行不悖。若是造出了量子计算机，是否可能重走传统计算机构成互联网的套路，再打造出一个量子网络？最后，以太阳，地球，月球，火星等星球组成一张银河网是否可能呢？</p><h2 id="对分布式的看法"><a href="#对分布式的看法" class="headerlink" title="对分布式的看法"></a>对分布式的看法</h2><p>云时代，大数据时代。数据多，繁杂。系统模块越来越多。如何拆分，如何优化？拆分后如何协调？传统的单体架构正不断拆解，专业化。分解后的模块要实现原有的功能，那么存储，一致性，通信，计算如何解决？</p><h2 id="对智能技术的看法"><a href="#对智能技术的看法" class="headerlink" title="对智能技术的看法"></a>对智能技术的看法</h2><p>AI火了，到处是谈AI的人。那么AI如何发展？目前对图像，语音，视频的处理算是可以用，但还可以优化，对自然语言的理解也还没有解决，多语言翻译如何像口译员一样？以AI技术为基础，能否得到智能机器人，智能的决策系统？最后，今天的AI还无法实现逻辑推理，也就是说它并不像人一样智能。今后如何实现逻辑推理，通过图灵测试？</p><h2 id="对安全的看法"><a href="#对安全的看法" class="headerlink" title="对安全的看法"></a>对安全的看法</h2><p>黑客的猖獗，计算能力的突破都使得安全问题日益突显。未来，某些今天(2020)还管用的加密技术可能就能被破解了。所以，加密技术会不断发展。前段时间IBM推出了全同态加密技术，这意味着安全又上了一个台阶，是否能破解这种技术呢？其他的安全技术，如量子加密，这技术有量子力学原理兜底，不可破。除了技术层面，个人层面，社会工程如何应对？目前的黑客攻击，问题多是出在人身上。如何保护个人隐私，如何划定员工权限？</p><h2 id="对应用软件的看法"><a href="#对应用软件的看法" class="headerlink" title="对应用软件的看法"></a>对应用软件的看法</h2><p>  其实一般人用的软件，大部分都有了。目前来看医疗和法律方面还比较欠缺。未来社会，一定是一个法治社会，个人对法律的需求会上升，此类应用或者服务定会多起来。对医疗的需求也差不多，没有人不需要医生和医药的。今天订外卖，以后可以订(线上预约)医生。还有是否未来人人会有一套私有云设备，这需要开发对应的产品和应用。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这些问题？其实对应着各高校/企业在计算机技术方面的研究方向。它们可能在大学就是一门学科，在企业就是一个岗位，正不断培养人才。今后怎样，实在难想。我个人的水平有限，只能开脑洞到此。瞎想一番，发现计算机技术还处于快速发展阶段，还有很多发展的方向可以研究嘛! 吾辈当不断前行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/02/aY6dW8.png&quot; alt=&quot;21-new-tech&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.shieber.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CS" scheme="http://www.shieber.cn/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>python下各种虚拟环境使用</title>
    <link href="http://www.shieber.cn/title/3f375b95/"/>
    <id>http://www.shieber.cn/title/3f375b95/</id>
    <published>2020-07-23T06:52:32.000Z</published>
    <updated>2020-07-23T08:18:06.312Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/23/UL2XtO.png" alt="virtualenv"></p><a id="more"></a><p>Python下存在多种虚拟环境构建方式，现做整理。</p><h2 id="为什么需要虚拟环境"><a href="#为什么需要虚拟环境" class="headerlink" title="为什么需要虚拟环境"></a>为什么需要虚拟环境</h2><p>传统的库安装方式，如pip install package，会将包安装到系统，不管你后面用不用都在。然而大部分人安装后就忘了卸载，导致占用内存。还有的时候，项目可能需要python2.7，有时又需要python3.5，甚至对同一个包的版本需求也不一样，既要1.1版又要1.4版，然而传统安装方式只可能保留一个版本，这该怎么办？</p><p>为了解决占用和多版本问题，python给出了虚拟环境。虚拟环境其实就是一个目录，项目需要的包不再安装到系统而是该目录。不同的目录可以放同一个包不同的版本。项目不要了，可直接删除该目录，节约内存。如下图，一个主目录下是各种虚拟环境。</p><p><img src="https://s1.ax1x.com/2020/07/23/ULRCnI.png" alt="virtualenv1"></p><p>python的虚拟环境方式主要有三种，分别是virtualenv，virtualenvwrapper，pipenv。三者的区别是管理依赖的方式和指令的复杂度，主体功能肯定都是一样的。</p><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>最早出现的就是virtualenv了，下面是其用法。</p><p><img src="https://s1.ax1x.com/2020/07/23/ULoaWV.png" alt="virtualenv-op"></p><h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p>virtualenvwrapper是virtualenv的升级版，管理各个环境，切换方便</p><p><img src="https://s1.ax1x.com/2020/07/23/ULofSK.png" alt="virtualenvwrapper-op"></p><h2 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h2><p>pipenv 是pip和virtualenv的结合，使用Pipfile和Pipfile.lock来管理依赖关系，更加方便，未来会是Python开虚拟环境的首选方法。下面是其用法。</p><p><img src="https://s1.ax1x.com/2020/07/23/ULT9Ts.png" alt="pipenv-op"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/23/UL2XtO.png&quot; alt=&quot;virtualenv&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="虚拟环境" scheme="http://www.shieber.cn/categories/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="virtualenv" scheme="http://www.shieber.cn/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>学习Scrapy源代码</title>
    <link href="http://www.shieber.cn/title/ae08e597/"/>
    <id>http://www.shieber.cn/title/ae08e597/</id>
    <published>2020-07-21T06:07:36.000Z</published>
    <updated>2020-07-21T08:01:32.555Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/21/UI6CX4.png" alt="scrapy-structure"></p><a id="more"></a><p>近期学习Scrapy源代码，稍作整理。</p><h2 id="Scrapy架构"><a href="#Scrapy架构" class="headerlink" title="Scrapy架构"></a>Scrapy架构</h2><p><img src="https://s1.ax1x.com/2020/07/21/UI6CX4.png" alt="scrapy-structure"></p><p>主体架构包含五大主体，两大中间件。</p><table><thead><tr><th align="left">主体/中间件</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">engine</td><td align="left">调动爬虫，使其运转起来</td></tr><tr><td align="left">scheduler</td><td align="left">接受新的url，并安排下载器下载Request</td></tr><tr><td align="left">downloader</td><td align="left">专注于下载，返回Response给spider</td></tr><tr><td align="left">spider</td><td align="left">爬虫，处理Response并返回url给scheduler，item给item pipeline</td></tr><tr><td align="left">item pipeline</td><td align="left">管道，保存下载的数据项item</td></tr><tr><td align="left">downloadermiddlewares</td><td align="left">下载器中间件，处理request中各种问题</td></tr><tr><td align="left">spidermiddlewares</td><td align="left">爬虫中间件，处理response中各种问题</td></tr></tbody></table><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>Scrapy爬虫的运行流程如上图红色圆圈标示。</p><table><thead><tr><th align="left">流程</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">引擎从初始化spider中获取start_urls</td></tr><tr><td align="left">2</td><td align="left">引擎将start_urls给调度器并请求下载任务</td></tr><tr><td align="left">3</td><td align="left">调度器取出url给引擎以驱动下载器</td></tr><tr><td align="left">4</td><td align="left">引擎分发url给下载器</td></tr><tr><td align="left">5</td><td align="left">下载器按url下载</td></tr><tr><td align="left">6</td><td align="left">下载器返回下载内容给spider</td></tr><tr><td align="left">7</td><td align="left">spider处理返回内容，提取新url和item</td></tr><tr><td align="left">8</td><td align="left">spider将新url给调度器，item给pipeline以保存</td></tr><tr><td align="left">9</td><td align="left">返回第三步，开启多线程调度，循环工作</td></tr></tbody></table><p>第一二步使用的是起始url，这是我们在项目spider/xxxspider.py中写好的，如下面的代码所示，这是起始时爬虫需要的，从第三步开始，爬虫自己有新爬取到的url，可以自行调度实现循环下载，直到任务结束。所以编写scrapy爬虫只需要很少的代码。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoSGad.png" alt="scrapy-code"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>如下是scrapy所有目录及外层代码。目录比较重，里面包含许多处理代码，而外层代码是scrapy实现的逻辑，这些外层代码调用目录中的代码完成整个爬取流程。所有目录及代码在/usr/local/lib/python3.6/dist-packages/scrapy/下。</p><table><thead><tr><th align="left">目录</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">commands</td><td align="left">命令行命令具体实现</td></tr><tr><td align="left">contracts</td><td align="left">爬虫可用性检测代码</td></tr><tr><td align="left">core</td><td align="left">核心类，包括downloader, engine, scheduler, scraper, spidermw</td></tr><tr><td align="left">downloadermiddlewares</td><td align="left">下载器中间件，包括ajax,cookie,http,agent,robots等</td></tr><tr><td align="left">extensions</td><td align="left">扩展类，包括logstats, spiderstates等</td></tr><tr><td align="left">http</td><td align="left">网络处理，包括Request和Response等</td></tr><tr><td align="left">linkextractors</td><td align="left">链接抽取类，包括html, lxml, regex, sgml</td></tr><tr><td align="left">loader</td><td align="left">Item加载器</td></tr><tr><td align="left">pipelines</td><td align="left">Item管道，包含file, image和media</td></tr><tr><td align="left">selector</td><td align="left">基于lxml的xpath选择器</td></tr><tr><td align="left">settings</td><td align="left">爬虫基本配置，十分多，可自定义</td></tr><tr><td align="left">spidermiddlewares</td><td align="left">爬虫中间件，包括深度优先深度设置，http错误处理等</td></tr><tr><td align="left">spiders</td><td align="left">爬虫类，实现xmlFeed, sitemap，crawl</td></tr><tr><td align="left">templates</td><td align="left">项目和爬虫模板，包括一个项目架构，基本爬虫，双向爬虫等</td></tr><tr><td align="left">utils</td><td align="left">各种工具类，用于实现各种处理功能</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>外层代码</strong></td><td align="left"><strong>作用</strong></td></tr><tr><td align="left">cmdline.py</td><td align="left">命令行参数处理</td></tr><tr><td align="left">crawler.py</td><td align="left">爬虫</td></tr><tr><td align="left">dupefilters.py</td><td align="left">去重</td></tr><tr><td align="left">exceptions.py</td><td align="left">错误处理</td></tr><tr><td align="left">exporters.py</td><td align="left">序列化保存文件</td></tr><tr><td align="left">extension.py</td><td align="left">扩展管理</td></tr><tr><td align="left">interfaces.py</td><td align="left">爬虫接口</td></tr><tr><td align="left">item.py</td><td align="left">数据流Item</td></tr><tr><td align="left">link.py</td><td align="left">链接对象结构</td></tr><tr><td align="left">logformatter.py</td><td align="left">日志生成</td></tr><tr><td align="left">mail.py</td><td align="left">邮件助手</td></tr><tr><td align="left">middleware.py</td><td align="left">中间件管理</td></tr><tr><td align="left">pqueues.py</td><td align="left">下载器先级队列</td></tr><tr><td align="left">resolver.py</td><td align="left">Twisted异步处理</td></tr><tr><td align="left">responsetypes.py</td><td align="left">请求响应数据</td></tr><tr><td align="left">robotstxt.py</td><td align="left">禁止爬取规则</td></tr><tr><td align="left">shell.py</td><td align="left">命令行工具</td></tr><tr><td align="left">signalmanager.py</td><td align="left">信号管理</td></tr><tr><td align="left">signals.py</td><td align="left">信号</td></tr><tr><td align="left">spiderloader.py</td><td align="left">爬虫加载</td></tr><tr><td align="left">squeues.py</td><td align="left">调度器队列</td></tr><tr><td align="left">statscollectors.py</td><td align="left">爬虫信息统计</td></tr><tr><td align="left">mime.types</td><td align="left">支持的文件类型</td></tr><tr><td align="left">VERSION</td><td align="left">版本信息</td></tr><tr><td align="left">_monkeypatches.py</td><td align="left">猴子补丁，处理Twisted</td></tr><tr><td align="left">__init__.py</td><td align="left">项目初始化</td></tr><tr><td align="left">__main__.py</td><td align="left">执行入口</td></tr></tbody></table><h2 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h2><p>__main__(或命令行的scrapy crawl xxx等) 调用cmdline.py，cmdline.py调用utils中文件处理配置，再调用crawler.py。crcrawler.py调用spider和core中引擎。引擎初始化scheduler，downloader，scraper等，开启下载流程。</p><p>重要文件：cmdline.py, crawler.py<br>重要目录：core, http, pipelines, utils, spider<br>其他的目录和文件都为重要文件和目录服务，主逻辑实现也在重要目录和文件中。  </p><h2 id="调用关系图"><a href="#调用关系图" class="headerlink" title="调用关系图"></a>调用关系图</h2><p>图一是从命令行开始的全过程，图二是核心架构运行流程，也即图一crawl下面那部分。当然，很多都省略了，比如日志，错误处理，这些不是主要的内容，加上反而让人看不懂。</p><p><img src="https://s1.ax1x.com/2020/07/21/UIIPGd.png" alt="whole"></p><p>我们自己写的代码只在start_request处执行一次，此后就是核心线程开启循环下载直到结束，可以看到scrapy为我们完成了大多数内容。由于scrapy整体架构高度解耦合，所以需要什么功能，我们可以自己去添加配置。每一个箭头就是一步，对这一步需要添加功能就编写好代码然后串在中间。比如觉得downloader和scraper中还需要处理，自己写好代码，将其放在downloader和scraper间，这样整个爬虫处理流程是不变的，但增加了自定义内容。</p><p><img src="https://s1.ax1x.com/2020/07/21/UIImdS.png" alt="core"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/21/UI6CX4.png&quot; alt=&quot;scrapy-structure&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://www.shieber.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Code" scheme="http://www.shieber.cn/tags/Code/"/>
    
      <category term="scrapy" scheme="http://www.shieber.cn/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>linux下软件安装方式</title>
    <link href="http://www.shieber.cn/title/d63ca381/"/>
    <id>http://www.shieber.cn/title/d63ca381/</id>
    <published>2020-07-11T02:33:13.000Z</published>
    <updated>2020-07-23T08:18:59.841Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/11/UQtLvT.png" alt="linux-software"></p><a id="more"></a><p>Windows下安装软件似乎只有一种方式，那就是下载.exe，然后执行安装。然而Linux系统中软件安装方式可谓五花八门，下面总结一番。</p><p>因为Linux系统发行版多，各家有各家的软件安装方式，这种种不同方式可称为专用安装方式。另外，有人开发的软件若是想要支持各大发行版，那么就需要一种通用的软件安装方式。</p><h2 id="A-Linux通用的跨发行版软件包安装方式"><a href="#A-Linux通用的跨发行版软件包安装方式" class="headerlink" title="A.Linux通用的跨发行版软件包安装方式"></a>A.Linux通用的跨发行版软件包安装方式</h2><p>1.snap<br>2.flatpak<br>3.AppImage<br>4.source-code  </p><p>1.snap是ubuntu搞的，但目前已经支持多种发行版的安装，可归类为通用安装方式。snap目前甚至可以安装微信到linux。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install xxx #用snap安装软件</span><br></pre></td></tr></table></figure><p>2.flatpak(前身为xdg-app) 是一种用于构建，分发，安装和运行应用程序的技术。通过在沙箱中隔离应用程序来提高Linux桌面的安全性，允许应用程序安装在任何Linux发行版上。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo flatpak install xxx #用flatpak安装软件</span><br></pre></td></tr></table></figure><p>3.AppImage是打包好的可执行镜像，赋予执行权限后直接运行就可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x AppImage</span><br><span class="line">./AppImage</span><br></pre></td></tr></table></figure><p>4.source-code，源代码安装，这是最基本的，最通用的安装方式。而源代码发布时，作者可能提供了不同安装选项给用户，有以下三种。  </p><blockquote><p>a. 只有configure文件，则按如下方式安装<br>    ./configure #为了生成makefile<br>    make<br>    make install<br>b. 已有makefile<br>    make<br>    make install<br>c. 只有Imake<br>    xmkmf<br>    make<br>    make install  </p></blockquote><p>说完通用的方式，接着看看专用的方式。</p><h2 id="B-Linux专用的软件包管理器"><a href="#B-Linux专用的软件包管理器" class="headerlink" title="B.Linux专用的软件包管理器"></a>B.Linux专用的软件包管理器</h2><ol><li>.deb</li><li>.rpm</li><li>etc…</li></ol><p>主要是两大类 </p><blockquote><p><strong>a</strong>.以Debian系列的dpkg安装deb包，和apt-get方式<br>sudo dpkg -i xxx.deb<br>sudo apt-get install xxx<br><strong>b</strong>.以Redhat系列的rpm安装rpm包，和yum方式<br>sudo rpm xxx.rpm<br>sudo yum install xxx<br><strong>c</strong>.其他的，比如Arch用pacman -S xxx 安装</p></blockquote><h2 id="rpm包转deb包"><a href="#rpm包转deb包" class="headerlink" title="rpm包转deb包"></a>rpm包转deb包</h2><p>rpm包还可以转换为deb包，以便安装到debian系linux系统。具体方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install alien</span><br><span class="line">sudo aline xxx.rpm     #当前目录生成xxx.deb</span><br><span class="line">sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure><p>这样，就能将rpm包转换为deb包，然后装到debian系系统，不过有的软件转换后未必能安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/11/UQtLvT.png&quot; alt=&quot;linux-software&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="http://www.shieber.cn/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="software" scheme="http://www.shieber.cn/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>理解递归和动态规划</title>
    <link href="http://www.shieber.cn/title/1e14846f/"/>
    <id>http://www.shieber.cn/title/1e14846f/</id>
    <published>2020-07-07T13:42:02.000Z</published>
    <updated>2020-07-21T08:24:26.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/08/UE1Wad.png" alt="recursion"></p><a id="more"></a><p>什么是递归，尾递归呢？动态规划和递归有什么关系，区别？什么时候用递归，什么时候用动态规划？<br>这些问题令人苦恼，有人长时间搞不清楚其中道理。</p><h2 id="先说结论，再逐个分析"><a href="#先说结论，再逐个分析" class="headerlink" title="先说结论，再逐个分析"></a>先说结论，再逐个分析</h2><blockquote><p>1.递归是一种调用自身，通过<strong>分解大问题成小问题</strong>以解决问题的技术。<br>2.尾递归解决了递归<strong>大量占用栈</strong>的缺点，是对递归的一种优化，节约了内存。<br>3.动态规划是一种利用<strong>小问题解决大问题</strong>的技术。<br>4.递归从大到小，自顶(大)向下(小)；动态规划从小到大，自底(小)向上(大)。<br>5.两者选取了不同角度解决问题，同时都各自<strong>带来了新问题</strong>。  </p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>第一条：递归是一种调用自身，通过<strong>分解大问题成小问题</strong>以解决问题的技术。大问题分解成小问题是重点，我们来看一例。</p><p>最著名的斐波那契数列问题。都知道斐波那契数列是一列数字，现在我问你第23个斐波那契数是多少？答不上来吧？这就叫大问题，因为你脑袋一下子算不出来，这问题就大了。计算机最不怕算了，它就是干计算的。要让计算机解决这个问题，就需要告诉他，<strong>a.该怎么开始，b.怎么结束，c.计算规则</strong>是什么，然后它就能算出来了。</p><p>现在的问题是，计算机不知道这个问题如何下手。这时人就想，我能不能先算第21和22个数，我知道第21个和22个数就能由规则计算出第23个了。此处<strong>规则</strong>，就是需要告诉机器的，这里是Fib(23) = Fib(22) + Fib(21)。现在问题是Fib(22)和Fib(21)还是不知道。聪明的人类又想，我再知道前面两个数不就能算了？所以问题演变成Fib(23) = Fib(21) + Fib(20) + Fib(20) + Fib(19)。可是这么还是不知道，还要算再前面的数，什么时候是个头啊？对，就是头，找到头，不就算出来了吗？头，就是停止，就是端，就是边界，就是约束。也就是该 <strong>b.怎么结束</strong>。而<strong>c.计算规则Fib(n) = Fib(n-1) + Fib(n-2)</strong>是人类定义的。如果你将Fib(23)展开，发现是一串加法，特别长。而计算机计算时也是这么干的，所以它特别耗费内存，就像你不能记住展开式一样，因为占用你的脑存。仔细一看，发现Fib(23)最后会变成由Fib(0)和Fib(1)组成的超长加法。而Fib(0)和Fib(1)也是人类定义的，这就是<strong>b.该怎么结束</strong>。Fib(0)和Fib(1)既然是人定义的，肯定对我们和计算机来说就是小问题了，too simple，sometimes naive。这就是<strong>分解大问题成小问题</strong>。所以利用递归，我们把Fib(23)变成了一堆Fib(1)和Fib(0)的加法运算，<strong>a.该怎么开始</strong>则指从23开始，这是需求。</p><p>所以看到一来就是一个超大的数，规模，尺度的问题，多半可以考虑递归手段。就是化大为小，化繁为简。这是该用递归的时候。</p><p>现在再去翻书，看递归定义：1.出口，2.转移条件。你发现就好懂了。因为解决大问题，需要必要的规则和起始条件(或终止条件)。其实，理科有什么科学规律不是这样呢？</p><p>比如描述宇宙规律，牛顿爵士提出理解和解决世界小问题的方案，加点约束，就可以解决宇宙的大问题了。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFFr6.png" alt="newtown-laws"></p><p>受力与否为起始条件(边界)，三大定律就是转移条件。有了力，宇宙就动起来了。</p><p>当然，你说既然力是起始条件(边界)，那力呢？牛顿发现不把起始原因找到，肯定不行，因为那套运动规则就没法动起来。所以牛逼的爵士，再来一律，万有引力定律。就是说，到处都是起始原因，万有嘛，大家都有，这下宇宙不就动了吗。</p><p>$$万有引力定律:  F = G\frac{M_{1}M_{2}}{R^{2}}$$</p><p>所以，牛，很牛！我看了觉得简单，自己要是不看，到死也想不出来。所以，牛顿牛逼。就这几句话，你我独自是整不出来的，所以要尊重数学家和物理学家嘛！</p><p>扯远了，但是这么个理解法。下面写出Fibnacci的算法。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFfQ1.png" alt="fibnacci1"></p><p>上面的代码，就可以用来计算了。但是，我们上面分析指出，它占内存，不断的压栈。所以是否能够优化一下，减少内存占用呢？当然可以，尾递归就是干这事的。</p><p>尾递归，字面意思，就是它是尾巴上的，最后一个调用的。所以，尾递归只能调用自身，不能乘除加减。下面就是斐波那契的尾递归版本。最后一行，不加减，无乘除，单是调用自身，这就是尾递归。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFbJH.png" alt="fibnacci2"></p><p>那它如何减少内存消耗呢？我们知道纯递归版中，栈主要用来记录中间状态了，而这些中间状态中我们需要的无非就是些加法罢了，因为依据规则Fib(n) = Fib(n-1) + Fib(n-2)，这里就只有加法。那么我们把加法保留到下次函数调用，不就可以只用一个栈了吗？所以我们就这么干了。下面的参数中y和x+y就是保留的值和加法状态。</p><p>现在回过头看第二条：尾递归解决了递归<strong>大量占用栈</strong>的缺点，是对递归的一种优化，节约了内存。可第五条又说，都各自<strong>带来了新问题</strong>。什么问题？</p><p>函数递归调用，参数入栈，栈上还有很多操作系统用得到的信息，尤其出Bug了，调试时，就需要栈上的信息。现在尾递归给优化了，全部信息都在一份参数里，而且还是多次相加后的值，找不出问题了。所以尾递归在操作系统层面，还有许多需要栈信息的应用上并没有得到太多应用。别看优化了，节约资源了，但是也引入了新问题。</p><p>全部最优，最后结果可能最糟，许多问题都是这样，工程问题要考虑全局，不要一来就优化，就凸优化。</p><blockquote><p>过早的优化是万恶之源，因为让正确的程序更快，要比让快速的程序正确容易得多。– Donald Knuth</p></blockquote><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>第三条：动态规划是一种利用<strong>小问题解决大问题</strong>的技术。刚才我们看了递归是把大问题分解成小问题，现在我们从小问题能不能推导些大问题出来呢？当然能，这就是动态规划。动态二字是说，新问题是热乎的，才得到的。比如还是用斐波那契数列说，我们用两个小问题Fib(0) + Fib(1)就得到Fib(2)了，看到没，没叫你算Fib(2)，但是由小问题构造出了大问题。而且Fib(3) = Fib(2) + Fib(1)，这里Fib(3)又是由刚生成的Fib(2)构成，和最开始的Fib(0)无关了，始终用这种规律动态生成下一个。是不是利用小问题解决大问题？</p><p>再看动态规划版的斐波那契数列计算代码。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFqWd.png" alt="fibnacci3"></p><p>此处是从2开始计算到n，由0和1两个基本条件构造大问题，这就是动态规划。递归的终止条件恰好就是动态规划的起始条件，所以不同的叫法，出口，边界，约束，其实都一样。</p><p>再看第五条，各自<strong>带来了新问题</strong>。 动态规划带来什么问题？动态规划不好找准转移规则和起始条件。而这两点又是必须的，所以动态规划好用，不好理解。比如爬楼梯问题，可以爬1阶，2阶，3阶。计算到n阶楼梯的爬法。<br>还有很多问题，乍一看是看不出能用动态规划的，甚至条件复杂得很。还有上面的dp数组也很费内存。</p><p>当然，费内存可以优化，用两个变量来存储信息。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFjyt.png" alt="fibnacci4"></p><p>这也是数学教材上的斐波那契算法定义。</p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>第四条：递归从大到小，自顶(大)向下(小)；动态规划从小到大，自底(小)向上(大)。现在应该好理解了。自顶向下和自底向上是另一种说法罢了。递归时，从一个大问题不断产生新的小问题，画成树，不就是顶上一个点，下面一堆点吗？所以从顶向下，最下面刚好是基本条件。而动态规划恰好就从基本条件开始，不断向上计算较大的问题。自然自底向上了。递归和动态规划两者联系就在于此，看从哪头开始。</p><p><img src="https://s1.ax1x.com/2020/07/08/UElmkR.png" alt="recursion_fibnacci"></p><h2 id="斐波那契数列算法合集"><a href="#斐波那契数列算法合集" class="headerlink" title="斐波那契数列算法合集"></a>斐波那契数列算法合集</h2><p>计算斐波那契数列的5种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line">#纯递归 最糟糕的算法</span><br><span class="line">def fibnacci(n):</span><br><span class="line">    if n &lt; 2: return n</span><br><span class="line"></span><br><span class="line">    return fibnacci(n-1) + fibnacci(n-2)</span><br><span class="line"></span><br><span class="line">#动态规划，迭代，不要数组</span><br><span class="line">def fibnacci0(n):</span><br><span class="line">    if n &lt; 2: return n</span><br><span class="line"></span><br><span class="line">    p, q, = 0, 1</span><br><span class="line">    for i in range(2, n+1):</span><br><span class="line">        p , q = q, p + q</span><br><span class="line"></span><br><span class="line">    return q</span><br><span class="line"></span><br><span class="line">#尾递归，x, y保存了递归的状态</span><br><span class="line">def fibnacci1(n, x=0, y=1):</span><br><span class="line">    if n &lt; 2:</span><br><span class="line">        return y</span><br><span class="line">    else:</span><br><span class="line">        return fibnacci0(n-1, y, x+y)</span><br><span class="line"></span><br><span class="line">#递归 + 自备缓存 (减少重复计算)</span><br><span class="line">res = []</span><br><span class="line">def fibnacci2(n):</span><br><span class="line">    if n &lt; 2:</span><br><span class="line">        val = n</span><br><span class="line">    else:</span><br><span class="line">        val = fibnacci2(n-1) + fibnacci2(n-2)</span><br><span class="line">    res.append(val)</span><br><span class="line"></span><br><span class="line">    return val</span><br><span class="line"></span><br><span class="line">#递归 + python官方提供缓存</span><br><span class="line">from functools import lru_cache</span><br><span class="line">@lru_cache(maxsize=1000)</span><br><span class="line">def fibnacci3(n):</span><br><span class="line">    if n &lt; 2: return n      #return后的值会放到lru_cache里</span><br><span class="line"></span><br><span class="line">    return fibnacci3(n-1) + fibnacci3(n-2)</span><br><span class="line"></span><br><span class="line">#面向线上笔试编程</span><br><span class="line">def fibnacci4(n):</span><br><span class="line">    offer =[  </span><br><span class="line">             0,</span><br><span class="line">           1,   1,</span><br><span class="line">         2,       3,</span><br><span class="line">        5,         8,</span><br><span class="line">       13,          21,</span><br><span class="line">      34,            55,</span><br><span class="line">      89,            144,</span><br><span class="line">     233,            377,</span><br><span class="line">     610,            987,</span><br><span class="line">     1597,           2584,</span><br><span class="line">     4181,         6765,</span><br><span class="line">      10946,      17711,</span><br><span class="line">        28657,   46368,</span><br><span class="line">             75025,</span><br><span class="line"></span><br><span class="line">        121393, 196418, 317811,</span><br><span class="line">        514229, 832040, 1346269,</span><br><span class="line">        2178309, 3524578, 5702887,</span><br><span class="line">        9227465, 4930352, 24157817,</span><br><span class="line">        39088169,</span><br><span class="line">        63245986,</span><br><span class="line">        102334155,</span><br><span class="line">        165580141,</span><br><span class="line">        267914296,</span><br><span class="line">        433494437,</span><br><span class="line">        701408733,</span><br><span class="line">        1134903170,</span><br><span class="line">        1836311903,</span><br><span class="line">        2971215073,</span><br><span class="line">        4807526976,</span><br><span class="line">        7778742049,</span><br><span class="line">        12586269025, 20365011074,32951280099,</span><br><span class="line">        53316291173, 86267571272, 139583862445,</span><br><span class="line">        225851433717, 365435296162, 591286729879,</span><br><span class="line">        956722026041, 1548008755920,2504730781961</span><br><span class="line">        4052739537881,</span><br><span class="line">        6557470319842,</span><br><span class="line">        10610209857723,</span><br><span class="line">        17167680177565,</span><br><span class="line">        27777890035288,</span><br><span class="line">        44945570212853,</span><br><span class="line">        72723460248141,</span><br><span class="line">        117669030460994,</span><br><span class="line">        190392490709135,</span><br><span class="line">        308061521170129,</span><br><span class="line">        498454011879264,</span><br><span class="line">        806515533049393,</span><br><span class="line">        1304969544928657,</span><br><span class="line">        2111485077978050,</span><br><span class="line">        3416454622906707,</span><br><span class="line">        5527939700884757,</span><br><span class="line">        8944394323791464,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        14472334024676221, 23416728348467685</span><br><span class="line">        37889062373143906, 61305790721611591,</span><br><span class="line">        99194853094755497, 160500643816367088,</span><br><span class="line">        259695496911122585, 420196140727489673,</span><br><span class="line">        679891637638612258, 1100087778366101931,</span><br><span class="line">        1779979416004714189,</span><br><span class="line">        2880067194370816120,</span><br><span class="line">        4660046610375530309,</span><br><span class="line">        7540113804746346429,</span><br><span class="line">        12200160415121876738,</span><br><span class="line">        19740274219868223167,</span><br><span class="line">        31940434634990099905,</span><br><span class="line">        51680708854858323072,</span><br><span class="line">        83621143489848422977,</span><br><span class="line">        135301852344706746049,</span><br><span class="line">        218922995834555169026,</span><br><span class="line">        354224848179261915075,</span><br><span class="line">        573147844013817084101,</span><br><span class="line">        927372692193078999176,</span><br><span class="line">        1500520536206896083277,2427893228399975082453, </span><br><span class="line">        3928413764606871165730, 6356306993006846248183,</span><br><span class="line">        10284720757613717413913,16641027750620563662096,</span><br><span class="line">        26925748508234281076009, 43566776258854844738105, </span><br><span class="line">        70492524767089125814114, 114059301025943970552219,</span><br><span class="line">        184551825793033096366333, 298611126818977066918552,</span><br><span class="line">        483162952612010163284885,</span><br><span class="line">        781774079430987230203437,</span><br><span class="line">        1264937032042997393488322,</span><br><span class="line">        2046711111473984623691759,</span><br><span class="line">        3311648143516982017180081,</span><br><span class="line">        5358359254990966640871840,</span><br><span class="line">        8670007398507948658051921,</span><br><span class="line">        14028366653498915298923761,</span><br><span class="line">        22698374052006863956975682,</span><br><span class="line">        36726740705505779255899443,</span><br><span class="line">        59425114757512643212875125,</span><br><span class="line">        96151855463018422468774568,</span><br><span class="line">        155576970220531065681649693,</span><br><span class="line">        251728825683549488150424261,</span><br><span class="line">        407305795904080553832073954,</span><br><span class="line">        659034621587630041982498215,</span><br><span class="line">        1066340417491710595814572169,</span><br><span class="line">        1725375039079340637797070384,</span><br><span class="line">                    </span><br><span class="line">                                 2791715456571051233611642553,</span><br><span class="line">                               4517090495650391871408712937,</span><br><span class="line">                     7308805952221443105020355490,  11825896447871834976429068427,</span><br><span class="line">             19134702400093278081449423917,               30960598847965113057878492344,</span><br><span class="line">      50095301248058391139327916261,                       81055900096023504197206408605,  </span><br><span class="line">    131151201344081895336534324866,                         212207101440105399533740733471, </span><br><span class="line">   343358302784187294870275058337,                           555565404224292694404015791808,</span><br><span class="line">   898923707008479989274290850145,                            1454489111232772683678306641953,</span><br><span class="line">   2353412818241252672952597492098,                           3807901929474025356630904134051,</span><br><span class="line">   6161314747715278029583501626149,                           9969216677189303386214405760200,</span><br><span class="line">   16130531424904581415797907386349,                         26099748102093884802012313146549,</span><br><span class="line">    42230279526998466217810220532898,                       68330027629092351019822533679447,</span><br><span class="line">    110560307156090817237632754212345,                     178890334785183168257455287891792,</span><br><span class="line">     89450641941273985495088042104137,                    468340976726457153752543329995929,</span><br><span class="line">      757791618667731139247631372100066,                 1226132595394188293000174702095995,</span><br><span class="line">        1983924214061919432247806074196061,            3210056809456107725247980776292056,</span><br><span class="line">          5193981023518027157495786850488117,        8404037832974134882743767626780173,</span><br><span class="line">              13598018856492162040239554477268290, 22002056689466296922983322104048463,</span><br><span class="line">                  35600075545958458963222876581316753,</span><br><span class="line">                    57602132235424755886206198685365216,</span><br><span class="line">                       93202207781383214849429075266681969,</span><br><span class="line">                         150804340016807970735635273952047185,</span><br><span class="line">                              244006547798191185585064349218729154,</span><br><span class="line">                                 394810887814999156320699623170776339,</span><br><span class="line">                                    638817435613190341905763972389505493,</span><br><span class="line">                                         1033628323428189498226463595560281832,</span><br><span class="line">                                           1672445759041379840132227567949787325,</span><br><span class="line">                                               2706074082469569338358691163510069157,</span><br><span class="line">                                                   4378519841510949178490918731459856482,</span><br><span class="line">                                                      7084593923980518516849609894969925639,</span><br><span class="line">                                                         11463113765491467695340528626429782121,</span><br><span class="line">                                                           18547707689471986212190138521399707760,</span><br><span class="line"></span><br><span class="line">        30010821454963453907530667147829489881,</span><br><span class="line">        48558529144435440119720805669229197641,</span><br><span class="line">        78569350599398894027251472817058687522,</span><br><span class="line">        127127879743834334146972278486287885163,</span><br><span class="line">        205697230343233228174223751303346572685,</span><br><span class="line">        332825110087067562321196029789634457848,</span><br><span class="line">        538522340430300790495419781092981030533,</span><br><span class="line">        871347450517368352816615810882615488381,</span><br><span class="line">        1409869790947669143312035591975596518914,</span><br><span class="line">        2281217241465037496128651402858212007295,</span><br><span class="line">        3691087032412706639440686994833808526209,          5972304273877744135569338397692020533504,</span><br><span class="line">        9663391306290450775010025392525829059713,         15635695580168194910579363790217849593217,</span><br><span class="line">        25299086886458645685589389182743678652930,       40934782466626840596168752972961528246147,</span><br><span class="line">        66233869353085486281758142155705206899077,      107168651819712326877926895128666735145224,</span><br><span class="line">        173402521172797813159685037284371942044301,    280571172992510140037611932413038677189525,</span><br><span class="line">        453973694165307953197296969697410619233826,   734544867157818093234908902110449296423351,</span><br><span class="line">        1188518561323126046432205871807859915657177, 1923063428480944139667114773918309212080528,</span><br><span class="line">        3111581989804070186099320645726169127737705,5034645418285014325766435419644478339818233,</span><br><span class="line">        8146227408089084511865756065370647467555938,13180872826374098837632191485015125807374171,</span><br><span class="line">        21327100234463183349497947550385773274930109,</span><br><span class="line">        34507973060837282187130139035400899082304280,</span><br><span class="line">        55835073295300465536628086585786672357234389,</span><br><span class="line">        90343046356137747723758225621187571439538669,</span><br><span class="line">        146178119651438213260386312206974243796773058,</span><br><span class="line">        236521166007575960984144537828161815236311727,</span><br><span class="line">        382699285659014174244530850035136059033084785,</span><br><span class="line">        619220451666590135228675387863297874269396512,</span><br><span class="line">        1001919737325604309473206237898433933302481297,</span><br><span class="line">        1621140188992194444701881625761731807571877809,</span><br><span class="line">        2623059926317798754175087863660165740874359106,</span><br><span class="line">        4244200115309993198876969489421897548446236915,</span><br><span class="line">        6867260041627791953052057353082063289320596021,</span><br><span class="line">        11111460156937785151929026842503960837766832936,</span><br><span class="line">        17978720198565577104981084195586024127087428957,</span><br><span class="line">        29090180355503362256910111038089984964854261893,</span><br><span class="line">        47068900554068939361891195233676009091941690850,</span><br><span class="line">        76159080909572301618801306271765994056795952743,</span><br><span class="line">        123227981463641240980692501505442003148737643593,</span><br><span class="line">        199387062373213542599493807777207997205533596336,</span><br><span class="line">        322615043836854783580186309282650000354271239929,</span><br><span class="line">        522002106210068326179680117059857997559804836265,</span><br><span class="line">        844617150046923109759866426342507997914076076194,</span><br><span class="line">        1366619256256991435939546543402365995473880912459,</span><br><span class="line">        2211236406303914545699412969744873993387956988653,</span><br><span class="line">        3577855662560905981638959513147239988861837901112,</span><br><span class="line">        5789092068864820527338372482892113982249794889765,</span><br><span class="line">        9366947731425726508977331996039353971111632790877,</span><br><span class="line">        15156039800290547036315704478931467953361427680642,</span><br><span class="line">        24522987531716273545293036474970821924473060471519,</span><br><span class="line">        39679027332006820581608740953902289877834488152161,</span><br><span class="line">        64202014863723094126901777428873111802307548623680,</span><br><span class="line">        103881042195729914708510518382775401680142036775841,</span><br><span class="line">        168083057059453008835412295811648513482449585399521,</span><br><span class="line">        271964099255182923543922814194423915162591622175362,</span><br><span class="line">        440047156314635932379335110006072428645041207574883,</span><br><span class="line">        712011255569818855923257924200496343807632829750245,</span><br><span class="line">        1152058411884454788302593034206568772452674037325128,</span><br><span class="line">        1864069667454273644225850958407065116260306867075373,</span><br><span class="line">        3016128079338728432528443992613633888712980904400501,</span><br><span class="line">        4880197746793002076754294951020699004973287771475874,</span><br><span class="line">        ]</span><br><span class="line">    return offer[n] #这个函数是没问题的，可以直接返回，共250位斐波那契数</span><br></pre></td></tr></table></figure><p>计算出来，用的时候直接返回是最快的，面试时n不超过30的。最后一种看起来傻，但实际用得多。计算机里实际运用的就是这么干的。一个定理，若是被证明了，直接计算出数保存，用的时候返回就是最好的，谁还拿机器去算呐，无法确定的需要机器算，确定的值直接用不就好了吗？比如第13个梅森素数是多少？是不是要CPU去跑？肯定不会啊，算出足够多的素数，保存成表，用的时候返回，多省事儿啊！傻了吧叽的算，别人孩子都两岁了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/08/UE1Wad.png&quot; alt=&quot;recursion&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.shieber.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Algorithm" scheme="http://www.shieber.cn/tags/Algorithm/"/>
    
  </entry>
  
</feed>
