<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shieber</title>
  
  <subtitle>友朋自远方来，不亦乐乎?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shieber.cn/"/>
  <updated>2020-11-06T12:27:37.816Z</updated>
  <id>http://www.shieber.cn/</id>
  
  <author>
    <name>Shieber</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c/python/go/rust/dart语言关键字总结</title>
    <link href="http://www.shieber.cn/title/909876b5/"/>
    <id>http://www.shieber.cn/title/909876b5/</id>
    <published>2020-11-06T05:40:01.000Z</published>
    <updated>2020-11-06T12:27:37.816Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/06/BfDL7t.png" alt="c-python-go-rust-dart"></p><a id="more"></a><p>最近学习Rust和Dart语言，发现难度挺大的，尤其是在自己会python/go/c这些语言的情况下，特别容易搞混。所以就想着对比学习，总结五种语言的特性，从它们的异同间发现知识点。</p><p>本文是对比学习的第一篇，主要统计关键字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                     <span class="function">C <span class="title">Keywords</span><span class="params">(<span class="number">34</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">auto</span>        <span class="keyword">double</span>       <span class="keyword">int</span>         struct       <span class="keyword">inline</span> </span></span><br><span class="line"><span class="function"><span class="keyword">break</span>       <span class="keyword">else</span>         <span class="keyword">long</span>        <span class="keyword">switch</span>       <span class="keyword">restrict</span></span></span><br><span class="line">case        enum         register    typedef      ...</span><br><span class="line"><span class="keyword">char</span>        <span class="keyword">extern</span>       <span class="keyword">return</span>      <span class="keyword">union</span></span><br><span class="line"><span class="keyword">const</span>       <span class="keyword">float</span>        <span class="keyword">short</span>       <span class="keyword">unsigned</span></span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span>          <span class="keyword">signed</span>      <span class="keyword">void</span></span><br><span class="line"><span class="keyword">default</span>     <span class="keyword">goto</span>         <span class="keyword">sizeof</span>      <span class="keyword">volatile</span></span><br><span class="line"><span class="keyword">do</span>          <span class="keyword">if</span>           <span class="keyword">static</span>      <span class="keyword">while</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                     Python Keywords(<span class="number">33</span>)</span><br><span class="line"><span class="keyword">and</span>         <span class="function"><span class="keyword">def</span>          <span class="title">for</span>         <span class="title">in</span>           <span class="title">or</span>        <span class="title">while</span></span></span><br><span class="line"><span class="function"><span class="title">as</span>          <span class="title">del</span>          <span class="title">from</span>        <span class="title">is</span>           <span class="title">pass</span>      <span class="title">with</span> </span></span><br><span class="line"><span class="function"><span class="title">assert</span>      <span class="title">elif</span>         <span class="title">False</span>       <span class="title">lambda</span>       <span class="title">raise</span>     <span class="title">yield</span></span></span><br><span class="line"><span class="function"><span class="title">break</span>       <span class="title">else</span>         <span class="title">global</span>      <span class="title">nonlocal</span>     <span class="title">return</span></span></span><br><span class="line"><span class="function"><span class="title">class</span>       <span class="title">except</span>       <span class="title">if</span>          <span class="title">not</span>          <span class="title">try</span>    </span></span><br><span class="line"><span class="function"><span class="title">continue</span>    <span class="title">finally</span>      <span class="title">import</span>      <span class="title">None</span>         <span class="title">True</span></span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                     Go Keywords(<span class="number">25</span>)     </span><br><span class="line"><span class="keyword">break</span>       <span class="keyword">default</span>      <span class="function"><span class="keyword">func</span>        <span class="title">interface</span>    <span class="title">select</span></span></span><br><span class="line"><span class="keyword">case</span>        <span class="keyword">defer</span>        <span class="keyword">go</span>          <span class="keyword">map</span>          <span class="keyword">struct</span></span><br><span class="line"><span class="keyword">chan</span>        <span class="keyword">else</span>         <span class="keyword">goto</span>        <span class="keyword">package</span>      <span class="keyword">switch</span></span><br><span class="line"><span class="keyword">const</span>       <span class="keyword">fallthrough</span>  <span class="keyword">if</span>          <span class="keyword">range</span>        <span class="keyword">type</span></span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span>          <span class="keyword">import</span>      <span class="keyword">return</span>       <span class="keyword">var</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                     Rust Keywords(<span class="number">39</span>)  </span><br><span class="line"><span class="keyword">as</span>          <span class="keyword">dyn</span>          <span class="keyword">if</span>          <span class="keyword">move</span>         <span class="class"><span class="keyword">struct</span>    <span class="title">use</span></span></span><br><span class="line"><span class="keyword">async</span>       <span class="keyword">else</span>         <span class="keyword">impl</span>        <span class="keyword">mut</span>          <span class="keyword">super</span>     <span class="keyword">where</span></span><br><span class="line"><span class="keyword">await</span>       <span class="class"><span class="keyword">enum</span>         <span class="title">in</span></span>          <span class="keyword">pub</span>          <span class="class"><span class="keyword">trait</span>     <span class="title">while</span></span></span><br><span class="line"><span class="keyword">break</span>       <span class="keyword">extern</span>       <span class="keyword">let</span>         <span class="keyword">ref</span>          <span class="literal">true</span>      <span class="keyword">Self</span></span><br><span class="line"><span class="keyword">const</span>       <span class="literal">false</span>        <span class="keyword">loop</span>        <span class="keyword">return</span>       <span class="class"><span class="keyword">type</span></span></span><br><span class="line"><span class="class"><span class="title">continue</span></span>    <span class="function"><span class="keyword">fn</span>           <span class="title">match</span>       <span class="title">self</span>         <span class="title">union</span></span></span><br><span class="line"><span class="function"><span class="title">crate</span>       <span class="title">for</span>          <span class="title">mod</span>         <span class="title">static</span>       <span class="title">unsafe</span></span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                     Dart Keywords(<span class="number">60</span>)</span><br><span class="line"><span class="keyword">abstract</span>    <span class="keyword">continue</span>     <span class="keyword">extends</span>     <span class="keyword">implements</span>   <span class="keyword">operator</span>  <span class="keyword">this</span></span><br><span class="line"><span class="keyword">as</span>          <span class="keyword">covariant</span>    <span class="keyword">factory</span>     <span class="keyword">import</span>       <span class="keyword">part</span>      <span class="keyword">throw</span></span><br><span class="line"><span class="keyword">assert</span>      <span class="keyword">default</span>      <span class="keyword">false</span>       <span class="keyword">in</span>           <span class="keyword">rethrow</span>   <span class="keyword">true</span></span><br><span class="line"><span class="keyword">async</span>       <span class="keyword">deferred</span>     <span class="keyword">final</span>       <span class="class"><span class="keyword">interface</span>    <span class="title">return</span>    <span class="title">try</span></span></span><br><span class="line"><span class="class"><span class="title">await</span>       <span class="title">do</span>           <span class="title">finally</span>     <span class="title">is</span>           <span class="title">set</span>       <span class="title">typedef</span></span></span><br><span class="line"><span class="class"><span class="title">break</span>       <span class="title">dynamic</span>      <span class="title">for</span>         <span class="title">library</span>      <span class="title">show</span>      <span class="title">var</span>       </span></span><br><span class="line"><span class="class"><span class="title">case</span>        <span class="title">else</span>         <span class="title">function</span>    <span class="title">mixin</span>        <span class="title">static</span>    <span class="title">void</span>      </span></span><br><span class="line"><span class="class"><span class="title">catch</span>       <span class="title">enum</span>         <span class="title">get</span>         <span class="title">new</span>          <span class="title">super</span>     <span class="title">while</span>     </span></span><br><span class="line"><span class="class"><span class="title">class</span>       <span class="title">export</span>       <span class="title">hide</span>        <span class="title">null</span>         <span class="title">switch</span>    <span class="title">with</span>      </span></span><br><span class="line"><span class="class"><span class="title">const</span>       <span class="title">external</span>     <span class="title">if</span>          <span class="title">on</span>           <span class="title">sync</span>      <span class="title">yield</span></span></span><br></pre></td></tr></table></figure><p>下面是所有语言的都有的关键字，可见各门语言还是有差异的，不同的关键字反应了实现不同语言编译器的考量不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>       <span class="literal">false</span></span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span></span><br><span class="line"><span class="keyword">else</span>        <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span>          <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Go是没有while的，要实现while功能得自己用for来构造。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;                            while condition &#123;</span><br><span class="line">    <span class="keyword">if</span> !condition &#123;     等于         do_works()</span><br><span class="line">        <span class="keyword">break</span>                    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    do_works()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可见，Go语言关键字最少，只25个，学习起来最轻松，Python则次之。C关键字实际不只34个，但常用就34个，C语言是计算机底层的核心语言，是现代互联网的基座。Rust是新出的一门底层语言，定位类似C语言，但强调安全，并发。Rust引入的生命周期，所有权/借用机制是学习的难点。最后，Dart关键字足足60个，看来学习难度较大，但因为它本身语法和Python，Go有类似的地方，所以难度会减少。但60个和Go的25个比起来，学习负担还是太重了。</p><p>为什么我只列出了这五种语言的关键字呢？C/Rust偏底层，C++存在的问题，Rust解决了，所以我学习的重点不再是C/C++，而是C/Rust，相信未来的主流学习也是C/Rust吧。当然，C++还不会被淘汰，但很多工作会被Rust替代。Go语言在云/分布式/微服务领域大放异彩，Python和Go可以作为中间层语言使用。Dart是谷歌新操作系统Fuchsia的Flutter平台默认语言，可通过Flutter编写上层应用，未来可能成为跨系统语言。其实Go和Dart都是谷歌公司开发的语言，未来预期不会太差吧？</p><p><img src="https://s1.ax1x.com/2020/11/06/Bfrs4f.png" alt="dart"></p><p><img src="https://s1.ax1x.com/2020/11/06/BfsWRO.jpg" alt="fuchsia"></p><p>底层C/Rust，中层Go/Python，上层Dart，我觉得这算是一个比较好的搭配。Java/C++这些早就火了的语言也值得学习，然而精力有限，就留给其他愿意折腾的人去学习吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/06/BfDL7t.png&quot; alt=&quot;c-python-go-rust-dart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>Go的各种数据结构底层表示</title>
    <link href="http://www.shieber.cn/title/e985015c/"/>
    <id>http://www.shieber.cn/title/e985015c/</id>
    <published>2020-10-21T02:55:08.000Z</published>
    <updated>2020-10-21T06:07:29.240Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/10/21/BCAWVS.png" alt="go-datastructure"></p><a id="more"></a><p>go语言内置数据类型包含数值，字符串和引用类型，这些不同类型的数据底层结构是不一样的。面试时问到部分的底层结构，下面对所有内容作一个总结。</p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>整数型</p><pre><code>按照数值范围，是否有负数和特殊用途，存在八种类型。类型     数值范围int8    [-128-127]int16   [-32768-32767]int32   [-2147483648-2147483647]int64   [-9223372036854775808-9223372036854775807]uint8   [0-255]uint16  [0-65535]uint32  [0-4294967295]uint64  [0-18446744073709551615]int     依机器为int32/int64位uint    依机器为uint32/uint64位byte    字节，值范围uint8rune    码点，值范围int32uintptr 保存指针的数值，值范围uint整数直接存储在存储器中，有符号数包含符号位s和尾数部分m。如32位十进制有符号数d = -11s = 1m = 00000000000000000000000000010111 0000000000000000000000000001011s   m 两部分组合得到dd = 10000000000000000000000000001011 (32位计算机存储的-11)若是64位十进制有符号数d = -11d = 1000000000000000000000000000000000000000000000000000000000001011 (64位计算机存储的-11)</code></pre><p>浮点数</p><pre><code>按照数值范围分为如下两种类型。float32float64浮点数涉及小数，必须将小数表示为二进制。浮点数底层结构包含符号位s，阶码e，尾数m。浮点数f表示规则如下1.首位s为符号位，s=0时，f为正数，s=1时，f为负数。2.接着8/11位为阶码，阶码为f二进制表示科学计数法的指数加127/1023的二进制数。3.最后23/52位为尾数，就是二进制表示的小数部分。其中/两侧的数分别对应32位和64位。如32位的十进制数f = 5.0 = 0b101.0 = 0b1.01x2^2s = 0e = 2+127=10000001 m = 01 0 10000001 01000000000000000000000 s   e            m 三部分组合得到ff = 01000000101000000000000000000000 (32位计算机存储的5.0)同理64位的十进制数f = 5.0 = 0b101.0 = 0b1.01x2^2s = 0e = 2+1023=10000000001m = 01 0 10000000001 0100000000000000000000000000000000000000000000000000 s   e            mf = 0100000000010100000000000000000000000000000000000000000000000000 (64位计算机存储的5.0)</code></pre><p>复数</p><pre><code>按照数值范围分为如下两种类型。complex64complex128复数存在实部和虚部，而且都为浮点数，所以底层为两个浮点数的组合，输出时虚部会添加上i</code></pre><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串底层结构</p><pre><code>type string struct {     str unsafe.Pointer //指针    len int            //长度}</code></pre><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>数组底层结构   </p><pre><code>type array struct {     array unsafe.Pointer //指针     len int              //长度}</code></pre><p>切片底层结构   </p><pre><code>type slice struct {     array unsafe.Pointer //指针    len int              //长度    cap int              //容量(切片基于数组) }</code></pre><p>映射底层结构   </p><pre><code>type hmap struct {    count     int       flags     uint8     B         uint8          //平衡因子    noverflow uint16     hash0     uint32     buckets   unsafe.Pointer //桶    bucket    unsafe.Pointer //旧桶    nevacuate uintptr    extra     *mapextra }</code></pre><p>安全映射底层结构 </p><pre><code>type Map struct {    mu Mutex   //锁(并发安全)    dirty map[interface{}]*entry    misses int}</code></pre><p>通道底层结构 </p><pre><code>type hchan struct {    qcount   uint           // 队列中元素个数    dataqsiz uint           // 队列中元素大小    buf      unsafe.Pointer // 指向缓冲区的指针    elemsize uint16    closed   uint32    elemtype *_type         // 元素类型    sendx    uint           // 发送下标    recvx    uint           // 接收下标    sendq    waitq          // 发送队列    recvq    waitq          // 接收队列    lock     mutex          // 锁(并发安全)}</code></pre><p>无方法的接口底层结构</p><pre><code>type eface struct {    _type *_type          //类型指针    data unsafe.Pointer   //数据指针}</code></pre><p>有方法的接口底层结构</p><pre><code>type ifcae struct {    tab *itab          data unsafe.Pointer}type itab struct {    inter *interfacetype    _type *_type    hash  uint32       // 类型转换时快速判断类型是否相等    _     [4]byte    fun   [1]uintptr   // 动态数组，存储函数指针}type _type struct { // go类型运行时表示，所有类新基础    size       uintptr // 内存占用    ptrdata    uintptr    hash       uint32  // 判断类型是否相等    tflag      tflag    align      uint8    fieldAlign uint8    kind       uint8    equal      func(unsafe.Pointer, unsafe.Pointer) bool    gcdata     *byte    str        nameOff    ptrToThis  typeOff}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/21/BCAWVS.png&quot; alt=&quot;go-datastructure&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://www.shieber.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>云原生技术栈</title>
    <link href="http://www.shieber.cn/title/83723c7e/"/>
    <id>http://www.shieber.cn/title/83723c7e/</id>
    <published>2020-10-07T10:20:41.000Z</published>
    <updated>2020-10-07T11:20:07.334Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/10/07/0dYPZ6.png" alt="cloud-native"></p><a id="more"></a><p>最近折腾云原生技术，然而学了半天，感觉知识越来越复杂，涉及的技术太多了，本文特此稍做总结。</p><h3 id="什么是云原生"><a href="#什么是云原生" class="headerlink" title="什么是云原生"></a>什么是云原生</h3><p>云原生是一种新的构建软件并提供服务的架构或模式，云是和本地相对的。从技术的角度，云原生架构是基于云原生技术的一组架构原则和设计模式的集合，旨在将云应用中的非业务代码部分进行最大化的剥离，从而让云设施接管应用中原有的大量非功能特性(如弹性、韧性、安全、可观测性、灰度等)，使业务不再有非功能性业务中断困扰的同时，具备轻量、敏捷、高度自动化的特点。</p><h3 id="为什么需要云原生"><a href="#为什么需要云原生" class="headerlink" title="为什么需要云原生"></a>为什么需要云原生</h3><p>对于企业的 CIO 或者 IT 主管而言，原来企业内部 IT 建设以“烟筒”模式比较多，每个部门甚至每<br>个应用都相对独立，如何管理与分配资源成了难题。大家都基于最底层 IDC 设施独自向上构建，都需要<br>单独分配硬件资源，这就造成资源被大量占用且难以被共享。但是上云之后，由于云厂商提供了统一的<br>IaaS 能力和云服务，大幅提升了企业 IaaS 层的复用程度，CIO 或者 IT 主管自然而然想到 IaaS 以上层的系统也需要被统一，使资源、产品可被不断复用，从而能够进一步降低企业运营成本。</p><p>所有这些问题都指向一个共同点，那就是云的时代需要新的技术架构，来帮助企业应用能够更好地利<br>用云计算优势，充分释放云计算的技术红利，让业务更敏捷、成本更低的同时又可伸缩性更灵活，而这<br>些正好就是云原生架构专注解决的技术点。</p><h3 id="云原生架构原则"><a href="#云原生架构原则" class="headerlink" title="云原生架构原则"></a>云原生架构原则</h3><p>云原生架构本身作为一种架构，也有若干架构原则作为应用架构的核心架构控制面，通过遵从这些架<br>构原则可以让技术主管和架构师在做技术选择时不会出现大的偏差。</p><ul><li>服务化原则</li><li>弹性原则</li><li>可观测原则</li><li>韧性原则</li><li>自动化原则</li><li>零信任原则</li><li>持续演进原则</li></ul><h3 id="云原生主要技术"><a href="#云原生主要技术" class="headerlink" title="云原生主要技术"></a>云原生主要技术</h3><ul><li>容器</li><li>微服务</li><li>DevOps</li><li>Serverless</li><li>Service Mesh</li><li>开放应用模型</li><li>云原生中间件</li></ul><h3 id="云原生技术栈"><a href="#云原生技术栈" class="headerlink" title="云原生技术栈"></a>云原生技术栈</h3><p>云原生涉及众多技术，这些技术按照作用可分为四层，每层涉及的工具如下(只列出部分代表性工具)。蓝色框中代表CNCF孵化项目，是重点工具。</p><p><img src="https://s1.ax1x.com/2020/10/07/0dYPZ6.png" alt="cloud-native"></p><p>1.基础层（Provisioning）</p><ul><li>自动化和配置 KubeEdge Ansible</li><li>容器注册 HARBOR Dragonfly</li><li>安全管理 TUF falco</li><li>密钥管理 spiffe SPIRE</li></ul><p>2.运行时层（Runtime）  </p><ul><li>云原生存储 ROOK Portworx ceph 盘古</li><li>容器运行时 Containerd rkt cri-o</li><li>云网络 CNI</li></ul><p>3.编排和管理层（Orchestration &amp; Management）  </p><ul><li>编排和调度 K8S K3S Mesos Swarm</li><li>服务发现 CoreDNS etcd Consul</li><li>远程调用 gRPC Thrift</li><li>服务代理 Envoy CONTOUR MSON</li><li>API网关 Kong</li><li>服务网格 Linkerd Istio </li></ul><p>4.应用程序定义和开发层（Application Definition &amp; Development）  </p><ul><li>数据库 TiKV/TiDB Vitess Redis MySQL MongoDB Neo4j</li><li>流和消息传递 NATS Cloudevents Flink Spark Kafka</li><li>应用定义和镜像构建 Helm </li><li>持续集成和持续交付 Orgo Jenkins Gitlab Github</li></ul><p>除了四层技术栈，还有些跨四层运行的工具</p><p>1.平台类  </p><ul><li>Kubernetes发行版 谷歌K8S Azure K8S  AWS K8S Rancher </li><li>Kubernetes托管平台 谷歌云 AWS Azure 阿里云 阿里云 腾讯云 </li><li>Kubernetes安装程序 Minikube Rancher</li><li>PaaS/容器服务 heroku </li></ul><p>2.可观察性与分析  </p><ul><li>监控 Prometheus cortex</li><li>日志 Elasticsearch Logstash Kibana</li><li>跟踪 JAEGER </li><li>混沌 Gremlin Chaos mesh</li></ul><h3 id="云原生技术栈中的中国产品"><a href="#云原生技术栈中的中国产品" class="headerlink" title="云原生技术栈中的中国产品"></a>云原生技术栈中的中国产品</h3><ul><li>PingCAP 贡献给CNCF的有TiKV/TiDB， Chaos mesh</li><li>阿里自研了盘古，MSON，Dubbo-go</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>技术栈涉及很多工具，像Kubernetes，Elasticsearch等都是重型工具，学习难，但光是使用它们就能干不少事。这些工具，要想都精通不太可能，基本学习使用就只用挑核心产品如Kubernetes，Docker，Etcd，Prometheus，Elasticsearch等学习，把流程搞熟悉。</p><p>工作流程能跑通后接着就是再深入某个技术点，比如  </p><ul><li>对容器编排有需求就研究Kubernetes，Mesos，Swarm </li><li>对分布式事务有需求就研究MySQL，TiDB/TiKV数据库</li><li>对实时搜索有需求就研究Elasticsearch涉及的ELK技术</li><li>对微服务有需求就研究Istio，Dubbo-go等</li><li>对容器有需求就研究Containerd，RunC，Docker等</li><li>对实时大数据处理有需求就研究Spark，Flink，MapReduce等</li></ul><p>这些技术都很复杂，而且这些技术还在随着时代发展而不断变化，不知未来以Kubernetes为代表的云原生技术又会变成什么样？精通某一个领域我认为都非常不容易，但技术人，再复杂也得学呀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/07/0dYPZ6.png&quot; alt=&quot;cloud-native&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Unix时间戳</title>
    <link href="http://www.shieber.cn/title/f7591bd4/"/>
    <id>http://www.shieber.cn/title/f7591bd4/</id>
    <published>2020-09-13T12:26:40.000Z</published>
    <updated>2020-09-16T01:52:07.458Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/09/13/w0Hp2n.png" alt="unixtimestamp"></p><a id="more"></a><h2 id="Unix进入16亿秒计时"><a href="#Unix进入16亿秒计时" class="headerlink" title="Unix进入16亿秒计时"></a>Unix进入16亿秒计时</h2><p>中国时间2020-09-13 20:26:40, Unix时间戳进入16亿秒计时了。回顾Unix计时以来计算机及互联网连同人类社会的发展，可以看到每亿秒人类都取得了巨大进步，每亿秒都有每亿秒的故事。科技进步的速度不断加快，每亿秒中发生的事情也多了起来。前9亿秒基本是美国人在发展，从9亿秒开始，中国人开始入场。期待中国在接下来的每亿秒中创造出更好的技术和产品。</p><p><strong>说明</strong>:部分时间无法查到具体时间，所以用00:00:00代替。查到月份而无日期的用该月1日代替。总的来说，时间戳数量级不会错，因为一个月的时间戳2592000秒，影响不大。</p><table><thead><tr><th align="center">Unix系统时间(UTC+8)</th><th align="right">时间戳</th><th align="left">大事件</th><th align="left">地点/创立者</th></tr></thead><tbody><tr><td align="center">1970-01-01 08:00:00</td><td align="right">0.00秒</td><td align="left">Unix纪元开始</td><td align="left">美国贝尔实验室-肯·汤普森/丹尼斯·里奇</td></tr><tr><td align="center">1971-01-01 00:00:00</td><td align="right">0.31亿秒</td><td align="left">硅谷命名首次提出</td><td align="left">美国-唐·赫夫勒</td></tr><tr><td align="center">1972-01-01 00:00:00</td><td align="right">0.63亿秒</td><td align="left">C语言诞生</td><td align="left">美国贝尔实验室-丹尼斯·里奇/肯·汤普森</td></tr><tr><td align="center">1973-03-03 17:46:40</td><td align="right">1.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1973-05-22 00:00:00</td><td align="right">1.06亿秒</td><td align="left">以太网诞生</td><td align="left">美国-施乐公司鲍伯·梅特卡夫</td></tr><tr><td align="center">1974-12-01 00:00:00</td><td align="right">1.55亿秒</td><td align="left">互联网TCP协议发布</td><td align="left">美国-温顿·瑟夫/罗伯特·卡恩</td></tr><tr><td align="center">1975-04-04 00:00:00</td><td align="right">1.65亿秒</td><td align="left">微软公司成立</td><td align="left">美国-比尔·盖茨</td></tr><tr><td align="center">1976-04-01 00:00:00</td><td align="right">1.97亿秒</td><td align="left">苹果公司成立</td><td align="left">美国-史蒂芬·乔布斯</td></tr><tr><td align="center">1976-05-04 03:33:20</td><td align="right">2.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1977-06-01 00:00:00</td><td align="right">2.33亿秒</td><td align="left">甲骨文公司成立</td><td align="left">美国-拉里·埃里森</td></tr><tr><td align="center">1979-07-05 13:20:00</td><td align="right">3.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1980-01-01 00:00:00</td><td align="right">3.15亿秒</td><td align="left">计算机实现TCP协议</td><td align="left">美国-Bill Joy</td></tr><tr><td align="center">1981-08-12 00:00:00</td><td align="right">3.66亿秒</td><td align="left">第一款PC电脑发布</td><td align="left">美国-IBM公司</td></tr><tr><td align="center">1982-09-04 23:06:40</td><td align="right">4.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1983-12-01 00:00:00</td><td align="right">4.39亿秒</td><td align="left">C++语言诞生</td><td align="left">美国贝尔实验室-Bjarne Stroustrup</td></tr><tr><td align="center">1984-01-01 00:00:00</td><td align="right">4.41亿秒</td><td align="left">Matlab语言诞生</td><td align="left">美国-Cleve Moler</td></tr><tr><td align="center">1985-07-01 00:00:00</td><td align="right">4.88亿秒</td><td align="left">高通公司成立</td><td align="left">美国-雅各布斯</td></tr><tr><td align="center">1985-10-17 00:00:00</td><td align="right">4.98亿秒</td><td align="left">80386处理器发布</td><td align="left">美国-英特尔公司</td></tr><tr><td align="center">1985-11-05 08:53:20</td><td align="right">5.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1985-11-20 00:00:00</td><td align="right">5.01亿秒</td><td align="left">Windows 1.0发布</td><td align="left">美国-微软公司</td></tr><tr><td align="center">1987-09-14 21:07:00</td><td align="right">5.58亿秒</td><td align="left">互联网进入中国</td><td align="left">中国-钱天白发出第一封邮件</td></tr><tr><td align="center">1987-09-15 00:00:00</td><td align="right">5.58亿秒</td><td align="left">华为公司成立</td><td align="left">中国-任正非</td></tr><tr><td align="center">1987-10-25 00:00:00</td><td align="right">5.62亿秒</td><td align="left">台积电公司成立</td><td align="left">中国·台湾-张忠谋</td></tr><tr><td align="center">1988-08-01 00:00:00</td><td align="right">5.86亿秒</td><td align="left">微软发布首款Office</td><td align="left">美国-微软公司</td></tr><tr><td align="center">1989-01-05 18:40:00</td><td align="right">6.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1989-12-25 00:00:00</td><td align="right">6.30亿秒</td><td align="left">Python语言诞生</td><td align="left">荷兰-Guido von Rossum</td></tr><tr><td align="center">1990-11-27 00:00:00</td><td align="right">6.59亿秒</td><td align="left">ARM公司成立</td><td align="left">英国-赫尔曼·豪泽</td></tr><tr><td align="center">1990-12-25 00:00:00</td><td align="right">6.62亿秒</td><td align="left">万维网(WWW)诞生</td><td align="left">欧洲核子研究中心-蒂姆·伯纳斯-李</td></tr><tr><td align="center">1991-01-01 00:00:00</td><td align="right">6.63亿秒</td><td align="left">物联网概念提出</td><td align="left">美国麻省理工大学-Kevin Ashton</td></tr><tr><td align="center">1991-08-25 00:00:00</td><td align="right">6.80亿秒</td><td align="left">Linux系统诞生</td><td align="left">芬兰赫尔辛基大学-林纳斯·托瓦兹</td></tr><tr><td align="center">1992-03-08 04:26:40</td><td align="right">7.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1993-08-22 00:00:00</td><td align="right">7.45亿秒</td><td align="left">英伟达公司成立</td><td align="left">美国-黄仁勋</td></tr><tr><td align="center">1994-10-13 00:00:00</td><td align="right">7.80亿秒</td><td align="left">第一个浏览器诞生</td><td align="left">美国-网景公司(Mozilla前身)</td></tr><tr><td align="center">1995-03-01 00:00:00</td><td align="right">7.93亿秒</td><td align="left">雅虎公司成立</td><td align="left">美国-杨致远</td></tr><tr><td align="center">1995-05-09 14:13:20</td><td align="right">8.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1995-05-23 00:00:00</td><td align="right">8.01亿秒</td><td align="left">Java语言诞生</td><td align="left">美国-詹姆斯·高斯林</td></tr><tr><td align="center">1995-07-16 00:00:00</td><td align="right">8.05亿秒</td><td align="left">亚马逊公司成立</td><td align="left">美国-杰夫·贝佐斯</td></tr><tr><td align="center">1995-09-01 00:00:00</td><td align="right">8.09亿秒</td><td align="left">JavaScript语言诞生</td><td align="left">美国-网景公司·Brendan Eich</td></tr><tr><td align="center">1996-01-01 00:00:00</td><td align="right">8.20亿秒</td><td align="left">WiFI技术诞生</td><td align="left">澳大利亚-约翰·沙利文团队</td></tr><tr><td align="center">1997-05-11 00:00:00</td><td align="right">8.63亿秒</td><td align="left">深蓝击败象棋冠军</td><td align="left">美国-IBM公司</td></tr><tr><td align="center">1997-06-01 00:00:00</td><td align="right">8.65亿秒</td><td align="left">网易公司成立</td><td align="left">中国-丁磊</td></tr><tr><td align="center">1998-07-10 00:00:00</td><td align="right">9.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1998-09-04 00:00:00</td><td align="right">9.04亿秒</td><td align="left">谷歌公司成立</td><td align="left">美国-拉里·佩奇/谢尔盖·布林</td></tr><tr><td align="center">1998-09-22 00:00:00</td><td align="right">9.06亿秒</td><td align="left">GFW前身开启</td><td align="left">中国-公安部</td></tr><tr><td align="center">1998-11-11 00:00:00</td><td align="right">9.10亿秒</td><td align="left">腾讯公司成立</td><td align="left">中国-马化腾</td></tr><tr><td align="center">1999-07-06 00:00:00</td><td align="right">9.30亿秒</td><td align="left">超链专利发表</td><td align="left">美国-李彦宏</td></tr><tr><td align="center">1999-09-09 00:00:00</td><td align="right">9.36亿秒</td><td align="left">阿里巴巴公司成立</td><td align="left">中国-马云</td></tr><tr><td align="center">2000-01-01 00:00:00</td><td align="right">9.40亿秒</td><td align="left">百度公司成立</td><td align="left">中国-李彦宏</td></tr><tr><td align="center">2001-09-04 00:00:00</td><td align="right">9.90亿秒</td><td align="left">佩奇超链专利发表</td><td align="left">美国-拉里·佩奇</td></tr><tr><td align="center">2001-09-09 09:46:40</td><td align="right">10.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2003-10-01 00:00:00</td><td align="right">10.64亿秒</td><td align="left">安卓公司成立</td><td align="left">美国-安迪·罗宾</td></tr><tr><td align="center">2003-10-15 00:00:00</td><td align="right">10.66亿秒</td><td align="left">支付宝诞生</td><td align="left">中国-阿里巴巴·淘宝</td></tr><tr><td align="center">2004-02-04 00:00:00</td><td align="right">10.75亿秒</td><td align="left">Facebook公司成立</td><td align="left">美国-扎克伯格</td></tr><tr><td align="center">2004-11-09 19:33:20</td><td align="right">11.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2005-01-01 00:00:00</td><td align="right">11.04亿秒</td><td align="left">大数据概念提出</td><td align="left">美国-Roger Mougalas</td></tr><tr><td align="center">2005-04-07 00:00:00</td><td align="right">11.12亿秒</td><td align="left">Git工具诞生</td><td align="left">美国-林纳斯·托瓦兹</td></tr><tr><td align="center">2006-07-28 00:00:00</td><td align="right">11.54亿秒</td><td align="left">人工神经网络诞生</td><td align="left">加拿大-杰弗瑞·辛顿</td></tr><tr><td align="center">2006-08-09 00:00:00</td><td align="right">11.55亿秒</td><td align="left">云计算概念提出</td><td align="left">美国-谷歌CEO埃里克·施密特</td></tr><tr><td align="center">2007-05-25 00:00:00</td><td align="right">11.80亿秒</td><td align="left">Pornhub上线</td><td align="left">加拿大-Pornhub公司</td></tr><tr><td align="center">2007-01-09 00:00:00</td><td align="right">11.68亿秒</td><td align="left">iPhone首款发布</td><td align="left">美国-苹果公司</td></tr><tr><td align="center">2007-11-05 00:00:00</td><td align="right">11.68亿秒</td><td align="left">安卓系统首次发布</td><td align="left">美国-谷歌公司</td></tr><tr><td align="center">2008-01-01 00:00:00</td><td align="right">11.99亿秒</td><td align="left">5G概念提出</td><td align="left">美国-美国航空航天管理局</td></tr><tr><td align="center">2008-01-11 05:20:00</td><td align="right">12.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2008-04-10 00:00:00</td><td align="right">12.07亿秒</td><td align="left">Github上线</td><td align="left">美国-汤姆·普雷斯顿</td></tr><tr><td align="center">2009-01-03 00:00:00</td><td align="right">12.30亿秒</td><td align="left">比特币创世区块诞生</td><td align="left">日本-中本聪</td></tr><tr><td align="center">2009-08-14 00:00:00</td><td align="right">12.50亿秒</td><td align="left">新浪微博诞生</td><td align="left">中国-新浪公司</td></tr><tr><td align="center">2009-09-21 00:00:00</td><td align="right">12.53亿秒</td><td align="left">Go语言诞生</td><td align="left">美国-谷歌-原贝尔实验室成员肯.汤普森等</td></tr><tr><td align="center">2009-11-11 00:00:00</td><td align="right">12.57亿秒</td><td align="left">双十一活动诞生</td><td align="left">中国-阿里巴巴·淘宝</td></tr><tr><td align="center">2010-03-04 00:00:00</td><td align="right">12.67亿秒</td><td align="left">美团公司成立</td><td align="left">中国-王兴</td></tr><tr><td align="center">2010-04-06 00:00:00</td><td align="right">12.70亿秒</td><td align="left">小米公司成立</td><td align="left">中国-雷军</td></tr><tr><td align="center">2011-01-21 00:00:00</td><td align="right">12.95亿秒</td><td align="left">微信诞生</td><td align="left">中国-腾讯·张小龙团队</td></tr><tr><td align="center">2011-03-13 15:06:40</td><td align="right">13.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2012-03-09 00:00:00</td><td align="right">13.31亿秒</td><td align="left">字节跳动成立</td><td align="left">中国-张一鸣</td></tr><tr><td align="center">2012-06-01 00:00:00</td><td align="right">13.38亿秒</td><td align="left">滴滴公司成立</td><td align="left">中国-程维</td></tr><tr><td align="center">2013-01-01 00:00:00</td><td align="right">13.56亿秒</td><td align="left">边缘计算概念提出</td><td align="left">美国-Ryan LaMothe</td></tr><tr><td align="center">2014-04-01 00:00:00</td><td align="right">13.96亿秒</td><td align="left">ofo小黄车公司成立</td><td align="left">中国-戴威</td></tr><tr><td align="center">2014-05-14 00:53:20</td><td align="right">14.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2014-06-02 00:00:00</td><td align="right">14.01亿秒</td><td align="left">Swift语言发布</td><td align="left">美国-苹果公司</td></tr><tr><td align="center">2015-01-01 00:00:00</td><td align="right">14.20亿秒</td><td align="left">云原生推出</td><td align="left">美国-CNCF</td></tr><tr><td align="center">2015-02-27 00:00:00</td><td align="right">14.24亿秒</td><td align="left">星际文件系统发布</td><td align="left">美国-协议实验室</td></tr><tr><td align="center">2015-05-15 00:00:00</td><td align="right">14.31亿秒</td><td align="left">Rust语言发布</td><td align="left">美国-Mozilla公司</td></tr><tr><td align="center">2016-03-15 17:02:00</td><td align="right">14.58亿秒</td><td align="left">Alpha-Go大败李世石</td><td align="left">韩国-Alpha-Go VS 李世石</td></tr><tr><td align="center">2016-08-16 01:40:00</td><td align="right">14.71亿秒</td><td align="left">墨子号量子卫星发射</td><td align="left">中国-中科大·潘建伟团队</td></tr><tr><td align="center">2016-09-20 00:00:00</td><td align="right">14.74亿秒</td><td align="left">抖音上线</td><td align="left">中国-字节跳动公司</td></tr><tr><td align="center">2017-07-14 10:40:00</td><td align="right">15.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2017-09-25 00:00:00</td><td align="right">15.06亿秒</td><td align="left">量子编程语言Q#发布</td><td align="left">美国-微软公司</td></tr><tr><td align="center">2017-11-16 00:00:00</td><td align="right">15.10亿秒</td><td align="left">6G概念提出</td><td align="left">英国-Neil McRae</td></tr><tr><td align="center">2019-05-23 00:00:00</td><td align="right">15.58亿秒</td><td align="left">SpaceX星链卫星发射</td><td align="left">美国-SpaceX公司</td></tr><tr><td align="center">2019-09-20 00:00:00</td><td align="right">15.68亿秒</td><td align="left">谷歌量子霸权</td><td align="left">美国-谷歌公司</td></tr><tr><td align="center">2019-11-01 00:00:00</td><td align="right">15.72亿秒</td><td align="left">5G正式商用</td><td align="left">中国-三大运营商/华为公司</td></tr><tr><td align="center">2020-01-01 08:00:00</td><td align="right">15.77亿秒</td><td align="left">Unix纪元50周年</td><td align="left"></td></tr><tr><td align="center">2020-06-18 06:55:37</td><td align="right">15.92亿秒</td><td align="left">量子编程语言Silq发布</td><td align="left">瑞士-苏黎世联邦理工学院Martin Vechev</td></tr><tr><td align="center">2020-09-13 20:26:40</td><td align="right">16.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2023-11-15 06:13:20</td><td align="right">17.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2027-01-15 16:00:00</td><td align="right">18.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2030-03-18 01:46:40</td><td align="right">19.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2033-05-18 11:33:20</td><td align="right">20.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2036-07-18 21:20:00</td><td align="right">21.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2038-01-19 11:14:08</td><td align="right">21.47亿秒</td><td align="left">所有32位操作系统报废</td><td align="left"></td></tr><tr><td align="center">2039-09-19 07:06:40</td><td align="right">22.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2042-11-19 16:53:20</td><td align="right">23.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2046-01-20 02:40:00</td><td align="right">24.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2049-03-22 12:26:40</td><td align="right">25.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2052-05-22 22:13:20</td><td align="right">26.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2055-07-24 08:00:00</td><td align="right">27.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2058-09-23 17:46:40</td><td align="right">28.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2061-11-24 03:33:20</td><td align="right">29.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2065-01-24 13:20:00</td><td align="right">30.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2068-03-26 23:06:40</td><td align="right">31.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2070-01-01 08:00:00</td><td align="right">31.50亿秒</td><td align="left">Unix纪元100周年</td><td align="left"></td></tr><tr><td align="center">2071-05-28 08:53:20</td><td align="right">32.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2074-07-28 18:40:00</td><td align="right">33.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2077-09-28 04:26:40</td><td align="right">34.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2080-11-28 14:13:20</td><td align="right">35.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2084-01-30 00:00:00</td><td align="right">36.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2087-04-01 09:46:40</td><td align="right">37.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2090-06-01 19:33:20</td><td align="right">38.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2093-08-02 05:20:00</td><td align="right">39.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2096-10-02 15:06:40</td><td align="right">40.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2099-12-04 00:53:20</td><td align="right">41.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2100-01-01 00:00:00</td><td align="right">41.02亿秒</td><td align="left">Unix纪元进入22世纪</td><td align="left"></td></tr><tr><td align="center">2103-02-04 10:40:00</td><td align="right">42.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2106-04-06 20:26:40</td><td align="right">43.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2109-06-07 06:13:20</td><td align="right">44.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2110-01-02 06:28:16</td><td align="right">44.18亿秒</td><td align="left">比特币时间戳溢出</td><td align="left"></td></tr><tr><td align="center">2112-08-07 16:00:00</td><td align="right">45.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2115-10-09 01:46:40</td><td align="right">46.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2118-l2-09 11:33:20</td><td align="right">47.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2122-02-08 21:20:00</td><td align="right">48.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2125-04-11 07:06:40</td><td align="right">49.00亿秒</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">2128-06-11 16:53:20</td><td align="right">50.00亿秒</td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/13/w0Hp2n.png&quot; alt=&quot;unixtimestamp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="互联网" scheme="http://www.shieber.cn/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="unix" scheme="http://www.shieber.cn/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>如何制作deb包</title>
    <link href="http://www.shieber.cn/title/583751c1/"/>
    <id>http://www.shieber.cn/title/583751c1/</id>
    <published>2020-09-07T10:17:18.000Z</published>
    <updated>2020-09-10T10:50:59.171Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/09/10/wJoQ4U.png" alt="deb"></p><a id="more"></a><p>平时安装软件有可能用到deb包，那么它是如何制作的呢？</p><h2 id="学会包命名"><a href="#学会包命名" class="headerlink" title="学会包命名"></a>学会包命名</h2><p>包名格式：软件名_上游版本号.主版本号.次版本号-修订号_平台</p><p>如: gim_bash_0.0.4-1_amd64</p><h2 id="安排deb包内部结构"><a href="#安排deb包内部结构" class="headerlink" title="安排deb包内部结构"></a>安排deb包内部结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└── gim_bash_0.0.4-1_amd64</span><br><span class="line">    ├── DEBIAN</span><br><span class="line">    │   └── control</span><br><span class="line">    └── usr</span><br><span class="line">        └── local</span><br><span class="line">            └── bin</span><br><span class="line">                └── gim</span><br></pre></td></tr></table></figure><p>上面是一个deb包打包前的结构，DEBIAN/control为控制文件，里面写了各种软件包信息。gim为代码，<br>usr/local/bin/是gim最终安装位置，也可以安装到/usr/bin，则结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└── gim_bash_0.0.4-1_amd64</span><br><span class="line">    ├── DEBIAN</span><br><span class="line">    │   └── control</span><br><span class="line">    └── usr</span><br><span class="line">        └── bin</span><br><span class="line">            └── gim</span><br></pre></td></tr></table></figure><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><ul><li>写好代码，(编译)，修改最终文件属性<blockquote><p>sudo chown root gim<br>sudo chgrp root gim</p></blockquote></li><li>准备好deb包结构</li><li>修改control文件</li><li>打包为deb</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">drwxrwxr-x 4 shieber shieber 4.0K 9月   8 13:55 gim_bash_0.0.4-1_amd64</span><br><span class="line"><span class="meta">$</span><span class="bash"> dpkg-deb --build gim_bash_0.0.4-1_amd64/</span></span><br><span class="line">dpkg-deb: 正在 'gim_bash_0.0.4-1_amd64.deb' 中构建软件包 'gim'。</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls </span></span><br><span class="line">drwxrwxr-x 4 shieber shieber 4.0K 9月   8 13:55 gim_bash_0.0.4-1_amd64</span><br><span class="line">-rw-r--r-- 1 shieber shieber 1.9K 9月  10 18:42 gim_bash_0.0.4-1_amd64.deb</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i gim_bash_0.0.4-1_amd64.deb</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/10/wJoQ4U.png&quot; alt=&quot;deb&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件包" scheme="http://www.shieber.cn/categories/%E8%BD%AF%E4%BB%B6%E5%8C%85/"/>
    
    
      <category term="deb" scheme="http://www.shieber.cn/tags/deb/"/>
    
  </entry>
  
  <entry>
    <title>编程语言的七夕</title>
    <link href="http://www.shieber.cn/title/b4d27a1f/"/>
    <id>http://www.shieber.cn/title/b4d27a1f/</id>
    <published>2020-08-25T15:25:07.000Z</published>
    <updated>2020-08-30T02:39:36.047Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/25/d2lbbn.png" alt="valentine"></p><a id="more"></a><p>有Hello world项目，七夕节，今天就来个I love you。看看计算机各种编程语言如何输出I love you。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">英特尔64位机器语言(16进制，大量删节)</span><br><span class="line"></span><br><span class="line">7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............</span><br><span class="line">0300 3e00 0100 0000 3005 0000 0000 0000  ..&gt;.....0.......</span><br><span class="line">4000 0000 0000 0000 2819 0000 0000 0000  @.......(.......</span><br><span class="line">0000 0000 4000 3800 0900 4000 1d00 1c00  ....@.8...@.....</span><br><span class="line">0000 0000 4000 3800 0900 4000 1d00 1c00  .... . .........</span><br><span class="line">0000 0000 4000 3800 0900 4000 1d00 1c00  .......... .....</span><br><span class="line">4802 0000 0000 0000 4802 0000 0000 0000  H.......H.......</span><br><span class="line">0100 0000 0000 0000 2f6c 6962 3634 2f6c  ......../lib64/l</span><br><span class="line">642d 6c69 6e75 782d 7838 362d 3634 2e73  d-linux-x86-64.s</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  o.2.............</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  ....... ........</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  ..... ..........</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  ................</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  .. .............</span><br><span class="line">474e 5500 0000 0000 0300 0000 0200 0000  GNU.............</span><br><span class="line">474e 5500 62ac 36a4 3ad7 9006 fbe2 d107  GNU.b.6.:.......</span><br><span class="line">d9c9 dd6f ce89 2222 0100 0000 0100 0000  ...o..&quot;&quot;........</span><br><span class="line">006c 6962 632e 736f 2e36 0070 7574 7300  .libc.so.6.puts.</span><br><span class="line">5f5f 6378 615f 6669 6e61 6c69 7a65 005f  __cxa_finalize._</span><br><span class="line">5f6c 6962 635f 7374 6172 745f 6d61 696e  _libc_start_main</span><br><span class="line">0047 4c49 4243 5f32 2e32 2e35 005f 4954  .GLIBC_2.2.5._IT</span><br><span class="line">415e 415f c390 662e 0f1f 8400 0000 0000  A^A_..f.........</span><br><span class="line">f3c3 0000 4883 ec08 4883 c408 c300 0000  ....H...H.......</span><br><span class="line">0100 0200 4920 6c6f 7665 2079 6f75 0000  ....I love you..</span><br><span class="line">011b 033b 3c00 0000 0600 0000 10fe ffff  ...;&lt;...........</span><br><span class="line">8800 0000 30fe ffff b000 0000 40fe ffff  ....0.......@...</span><br><span class="line">4743 433a 2028 5562 756e 7475 2037 2e35  GCC: (Ubuntu 7.5</span><br><span class="line">2e30 2d33 7562 756e 7475 317e 3138 2e30  .0-3ubuntu1~18.0</span><br><span class="line">3429 2037 2e35 2e30 0000 0000 0000 0000  4) 7.5.0........</span><br><span class="line">006d 6169 6e00 5f5f 544d 435f 454e 445f  .main.__TMC_END_</span><br><span class="line">5f00 5f49 544d 5f72 6567 6973 7465 7254  _._ITM_registerT</span><br><span class="line">4d43 6c6f 6e65 5461 626c 6500 5f5f 6378  MCloneTable.__cx</span><br><span class="line">4d43 6c6f 6e65 5461 626c 6500 5f5f 6378  ...... .. ......</span><br><span class="line">615f 6669 6e61 6c69 7a65 4040 474c 4942  a_finalize@@GLIB</span><br><span class="line">435f 322e 322e 3500 002e 7379 6d74 6162  C_2.2.5...symtab</span><br><span class="line">0200 0000 0000 0000 3802 0000 0000 0000  ........8.......</span><br><span class="line">3802 0000 0000 0000 1c00 0000 0000 0000  8...............</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">汇编语言(1949年)</span><br><span class="line">section .data            </span><br><span class="line">        msg db &quot;I love you&quot;, 0xA</span><br><span class="line">        len equ $ - msg</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line">_start:</span><br><span class="line">        mov eax, 4</span><br><span class="line">        mov ebx, 1 </span><br><span class="line">        mov ecx, msg</span><br><span class="line">        mov edx, len</span><br><span class="line">        int 0x80 </span><br><span class="line">                 </span><br><span class="line">        mov eax, 1</span><br><span class="line">        mov ebx, 0</span><br><span class="line">        int 0x80</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```Fortran</span><br><span class="line">Fortran语言(1957年诞生，上古四大语言之一，世界上第一门高级语言)</span><br><span class="line">program love</span><br><span class="line">write (*.*) &quot;I love you&quot;</span><br><span class="line">end program love</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lisp语言(1958年诞生，上古四大语言之一，人工智能语言)</span><br><span class="line"></span><br><span class="line">(<span class="name">print</span> <span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">COBOL语言(1959年诞生，上古四大语言之一，目前用于银行系统)</span><br><span class="line">IDENTIFICATION   DIVISION.</span><br><span class="line">PROGRAM-ID.      &apos;七夕快乐&apos;.</span><br><span class="line">ENVIRONMENT      DIVISION.</span><br><span class="line">DATA             DIVISION.</span><br><span class="line">FILE             SECTION.</span><br><span class="line">WORKING-STORAGE  SECTION.</span><br><span class="line">PROCEDURE        DIVISION.</span><br><span class="line">MAIN-PROCEDURE.</span><br><span class="line">DISPLAY &quot;I love you&quot;.</span><br><span class="line">STOP RUN.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALGOL语言(1960年诞生，上古四大语言之一，代数语言，C语言祖宗)</span><br><span class="line">(print((&quot;I love you&quot;,newline)))</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Basic语言(1964年诞生，比尔盖茨发家语言)</span><br><span class="line">PRINT "I love you"</span><br><span class="line">END</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">B语言(1969年诞生，C语言前身，C语言又叫NewB)</span><br><span class="line">main() &#123;</span><br><span class="line">    extern a, b, c;</span><br><span class="line">    putchar (a); putchar (b); putchar (c);</span><br><span class="line">&#125;</span><br><span class="line">a &apos;hell&apos;;</span><br><span class="line">b &apos;o, w&apos;;</span><br><span class="line">c &apos;orld&apos;;</span><br></pre></td></tr></table></figure><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Pascal</span>语言(<span class="number">1970</span>年诞生，用于教学)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">writeln("I love you")</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C语言(<span class="number">1972</span>年诞生，和Unix同生，共同催生了Linux，众多编程语言以及互联网)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I love you!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```Smalltalk</span><br><span class="line">Smalltalk语言(<span class="number">1972</span>年诞生，第一门面向对象的语言)</span><br><span class="line">Transcript show: <span class="string">"I love you"</span>; cr.</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scheme语言(1975年诞生，Lisp变种之一)</span><br><span class="line">(<span class="name"><span class="builtin-name">display</span></span> <span class="string">"I love you"</span>)(<span class="name"><span class="builtin-name">newline</span></span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bash语言(1977年诞生，Linux系统默认工具语言)</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "I love you"</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C++语言(<span class="number">1980</span>年诞生，C的扩展版，支持面向对象)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"I love you"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">R语言(<span class="number">1980</span>年诞生，用于统计)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Matlab语言(<span class="number">1984</span>年诞生，数值计算，仿真，底层基于C语言)</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Objective-C语言(1986年诞生，C语言的一种扩展，用于开发IOS和Mac系统等)</span><br><span class="line">#import &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#import &lt;objc/Object.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;I love you\n&quot;);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Perl语言(<span class="number">1987</span>年诞生，借鉴C，Shell)</span><br><span class="line"><span class="comment">#!/usr/bin/env perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"I love you\n"</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Html标记语言(1990年诞生，网页语言，由互联网之父蒂姆.伯纳斯.李发明)</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>七夕快乐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>I love you<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python2语言(1991年诞生，底层基于C语言)</span><br><span class="line">#!/usr/bin/env python2</span><br><span class="line">#-*- coding: utf-8</span><br><span class="line">print &quot;I love you&quot;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Lua语言(<span class="number">1993</span>年诞生，大量用于游戏和数据库事务)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java语言(<span class="number">1995</span>年诞生，类C/C++语言，目前属于甲骨文公司)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 7<span class="title">x</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I love you"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaScript语言(<span class="number">1995</span>年诞生，网页交互)</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">"I love you"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ruby语言(<span class="number">1995</span>年诞生，日本人松本行弘发明)</span><br><span class="line">print <span class="string">"I love you\n"</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PHP语言(<span class="number">1995</span>年诞生，又名拍黄片，网站建设LAMP中的P)</span><br><span class="line">&lt;!DOCTYPE html&gt;  </span><br><span class="line">    &lt;body&gt;  </span><br><span class="line">    <span class="meta">&lt;?php</span>  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I love you"</span>;</span><br><span class="line">    <span class="meta">?&gt;</span>  </span><br><span class="line">    &lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">C<span class="meta">#语言(1999年诞生，微软公司开发)</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">namespace 7x</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">love</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"I love you"</span>);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```D</span><br><span class="line">D语言(<span class="number">1999</span>年诞生)</span><br><span class="line">import std.stdio</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    writeln(<span class="string">"I love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Python3语言(2008年诞生，Python2的下一代)</span><br><span class="line">#!/usr/bin/env python3</span><br><span class="line">#-*- coding: utf-8</span><br><span class="line"></span><br><span class="line">print(&quot;I love you&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Go语言(<span class="number">2009</span>年诞生，云时代语言，谷歌公司开发)</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"I love you"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rust语言(<span class="number">2010</span>年诞生，Mozilla公司开发，高效安全的语言，目标是替代C/C++语言)</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WebAssembly语言文本格式(2010年诞生，Mozilla公司开发)</span><br><span class="line">(module</span><br><span class="line">    (func (result i32)</span><br><span class="line">        (i32.const 0)</span><br><span class="line">    )</span><br><span class="line">    (export &quot;I love you&quot; (func 0))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dart语言(<span class="number">2011</span>年诞生，谷歌公司开发，支持其下一代操作系统fuchsia和flutter网页开发框架)</span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Kotlin语言(<span class="number">2011</span>年诞生，谷歌官方指定安卓系统开发语言)</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"I love you"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TypeScript语言(<span class="number">2012</span>年诞生，JavaScript超集，微软公司开发)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I love you"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Julia语言(<span class="number">2012</span>年诞生，用于高性能计算)</span><br><span class="line">println(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Swift</span>语言(<span class="number">2014</span>年诞生，苹果公司开发，用于开发<span class="type">IOS</span>和<span class="type">Mac</span>系统等)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/25/d2lbbn.png&quot; alt=&quot;valentine&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.shieber.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="CS" scheme="http://www.shieber.cn/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核代码结构</title>
    <link href="http://www.shieber.cn/title/71001b59/"/>
    <id>http://www.shieber.cn/title/71001b59/</id>
    <published>2020-08-07T08:58:13.000Z</published>
    <updated>2020-08-19T08:51:56.532Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/07/afOPyT.png" alt="linus-tux"></p><a id="more"></a><h1 id="Linux系统结构"><a href="#Linux系统结构" class="headerlink" title="Linux系统结构"></a>Linux系统结构</h1><p>大二时阅读过linus在1991年写的kernel-0.01版，现在发现和今天的内核比起来结构超级简单。下图是Linux系统架构图，中线间就是内核。</p><p><img src="https://s1.ax1x.com/2020/08/07/afL3in.png" alt="kernel-arch"></p><h3 id="1991年0-01版内核目录及文件"><a href="#1991年0-01版内核目录及文件" class="headerlink" title="1991年0.01版内核目录及文件"></a>1991年0.01版内核目录及文件</h3><table><thead><tr><th align="left">num</th><th align="left">dir</th><th align="left">note</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">boot</td><td align="left">启动文件</td></tr><tr><td align="left">2</td><td align="left">init</td><td align="left">初始化/主进程</td></tr><tr><td align="left">2</td><td align="left">fs</td><td align="left">文件系统</td></tr><tr><td align="left">7</td><td align="left">mm</td><td align="left">内存管理</td></tr><tr><td align="left">5</td><td align="left">kernel</td><td align="left">内核文件</td></tr><tr><td align="left">3</td><td align="left">include</td><td align="left">头文件</td></tr><tr><td align="left">6</td><td align="left">lib</td><td align="left">函数库</td></tr><tr><td align="left">8</td><td align="left">tools</td><td align="left">工具</td></tr><tr><td align="left">9</td><td align="left">Makefile</td><td align="left">编译脚本</td></tr></tbody></table><p>启动文件中boot.s先运行，接着是head.s运行，最后切换到init中的main.c开启init线程。其他文件是kernel用来管理的各类必备文件。</p><h3 id="2020年5-8版本内核目录及文件"><a href="#2020年5-8版本内核目录及文件" class="headerlink" title="2020年5.8版本内核目录及文件"></a>2020年5.8版本内核目录及文件</h3><table><thead><tr><th align="left">num</th><th align="left">item</th><th align="left">item</th><th align="left">item</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">arch</td><td align="left">init</td><td align="left">net</td></tr><tr><td align="left">2</td><td align="left">block</td><td align="left">ipc</td><td align="left">README</td></tr><tr><td align="left">3</td><td align="left">certs</td><td align="left">Kbuild</td><td align="left">samples</td></tr><tr><td align="left">4</td><td align="left">COPYING</td><td align="left">Kconfig</td><td align="left">scripts</td></tr><tr><td align="left">5</td><td align="left">CREDITS</td><td align="left">kernel</td><td align="left">security</td></tr><tr><td align="left">6</td><td align="left">crypto</td><td align="left">lib</td><td align="left">sound</td></tr><tr><td align="left">7</td><td align="left">Documentation</td><td align="left">Makefile</td><td align="left">tools</td></tr><tr><td align="left">8</td><td align="left">drivers</td><td align="left">mm</td><td align="left">usr</td></tr><tr><td align="left">9</td><td align="left">fs</td><td align="left">LICENSES</td><td align="left">virt</td></tr><tr><td align="left">10</td><td align="left">include</td><td align="left">MAINTAINERS</td><td align="left"></td></tr></tbody></table><p>可以看到，2020年的内核和1991年的内核相比，变化非常大。具体代码行数变化如下图所示。  </p><p><img src="https://s1.ax1x.com/2020/08/07/afjNsf.png" alt="code-0.01"></p><p><img src="https://s1.ax1x.com/2020/08/07/afjgyV.png" alt="code-5.80"></p><p>30年间，从89个文件变成了69319个文件。代码行数从8326行到1950万行，这就是开源的奇迹。</p><h3 id="0-01版代码树"><a href="#0-01版代码树" class="headerlink" title="0.01版代码树"></a>0.01版代码树</h3><p>.<br>├── boot 启动文件<br>│   ├── boot.s<br>│   └── head.s<br>├── fs  文件系统<br>│   ├── bitmap.c<br>│   ├── block_dev.c<br>│   ├── buffer.c<br>│   ├── char_dev.c<br>│   ├── exec.c<br>│   ├── fcntl.c<br>│   ├── file_dev.c<br>│   ├── file_table.c<br>│   ├── inode.c<br>│   ├── ioctl.c<br>│   ├── Makefile<br>│   ├── namei.c<br>│   ├── open.c<br>│   ├── pipe.c<br>│   ├── read_write.c<br>│   ├── stat.c<br>│   ├── super.c<br>│   ├── truncate.c<br>│   └── tty_ioctl.c<br>├── include 头文件<br>│   ├── a.out.h<br>│   ├── asm<br>│   │   ├── io.h<br>│   │   ├── memory.h<br>│   │   ├── segment.h<br>│   │   └── system.h<br>│   ├── const.h<br>│   ├── ctype.h<br>│   ├── errno.h<br>│   ├── fcntl.h<br>│   ├── linux<br>│   │   ├── config.h<br>│   │   ├── fs.h<br>│   │   ├── hdreg.h<br>│   │   ├── head.h<br>│   │   ├── kernel.h<br>│   │   ├── mm.h<br>│   │   ├── sched.h<br>│   │   ├── sys.h<br>│   │   └── tty.h<br>│   ├── signal.h<br>│   ├── stdarg.h<br>│   ├── stddef.h<br>│   ├── string.h<br>│   ├── sys<br>│   │   ├── stat.h<br>│   │   ├── times.h<br>│   │   ├── types.h<br>│   │   ├── utsname.h<br>│   │   └── wait.h<br>│   ├── termios.h<br>│   ├── time.h<br>│   ├── unistd.h<br>│   └── utime.h<br>├── init 初始化/主进程0<br>│   └── main.c<br>├── kernel 内核文件<br>│   ├── asm.s<br>│   ├── console.c<br>│   ├── exit.c<br>│   ├── fork.c<br>│   ├── hd.c<br>│   ├── keyboard.s<br>│   ├── Makefile<br>│   ├── mktime.c<br>│   ├── panic.c<br>│   ├── printk.c<br>│   ├── rs_io.s<br>│   ├── sched.c<br>│   ├── serial.c<br>│   ├── sys.c<br>│   ├── system_call.s<br>│   ├── traps.c<br>│   ├── tty_io.c<br>│   └── vsprintf.c<br>├── lib  函数库<br>│   ├── close.c<br>│   ├── ctype.c<br>│   ├── dup.c<br>│   ├── errno.c<br>│   ├── execve.c<br>│   ├── _exit.c<br>│   ├── Makefile<br>│   ├── open.c<br>│   ├── setsid.c<br>│   ├── string.c<br>│   ├── wait.c<br>│   └── write.c<br>├── Makefile<br>├── mm  内存管理<br>│   ├── Makefile<br>│   ├── memory.c<br>│   └── page.s<br>└── tools 工具<br>│   └── build.c  </p><p>11 directories, 88 files  </p><p>里面的代码不难，但细节多。看了人家大佬的代码，再反思自己的代码，差距很大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/07/afOPyT.png&quot; alt=&quot;linus-tux&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="内核" scheme="http://www.shieber.cn/categories/%E5%86%85%E6%A0%B8/"/>
    
    
      <category term="Linux" scheme="http://www.shieber.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>华为面试</title>
    <link href="http://www.shieber.cn/title/f822c036/"/>
    <id>http://www.shieber.cn/title/f822c036/</id>
    <published>2020-08-04T04:52:39.000Z</published>
    <updated>2020-08-14T00:31:45.861Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/04/a0F4bR.png" alt="interview"></p><a id="more"></a><p>最近参加华为面试，感觉问的问题很有价值，总结了下面试的题目。</p><h2 id="一面-2020-08-03-10-05"><a href="#一面-2020-08-03-10-05" class="headerlink" title="一面 [2020.08.03 10:05]"></a>一面 [2020.08.03 10:05]</h2><ul><li>谈谈分布式。  </li><li>谈谈数据结构。  </li><li>哈希碰撞如何解决？  </li><li>手撕代码：集合合并。  </li><li>谈Python，Rust语言。  </li><li>四层B+树，查找需要次数？  </li><li>B+树的查找过程是怎么样？  </li><li>B+树适合的情况，B+树节点分裂的条件。  </li><li>存储10万左右的中国地名数据，自己设计数据模型来存储，要求实现快速访问。  </li></ul><h2 id="二面-2020-08-04-10-01"><a href="#二面-2020-08-04-10-01" class="headerlink" title="二面 [2020.08.04 10:01]"></a>二面 [2020.08.04 10:01]</h2><ul><li>谈汇编语言。</li><li>谈编程语言发展。</li><li>谈微服务和集群。</li><li>谈软件开发原则。</li><li>软件开发设计模式。</li><li>谈对Linux系统认识。</li><li>谈谈Linux内核架构。</li><li>谈Linux系统调用流程。</li><li>操作系统调度的单位是？</li><li>谈面向对象和面向过程。</li><li>谈软件开发，如何优化呢？</li><li>谈如何使用各种数据结构。</li><li>调用时栈的情况，栈的毁坏。</li><li>为什么会出现NoSql，NewSql？</li><li>关系型数据库和NoSQL有什么区别？</li><li>设计一个图书馆系统，你如何设计？</li><li>设计一个调度系统，你考虑如何设计？</li><li>100亿文档数据存储，你如何存储处理？</li><li>1+2这样的计算，计算机的处理流程是？</li></ul><h2 id="面试官建议"><a href="#面试官建议" class="headerlink" title="面试官建议 "></a>面试官建议 </h2><ul><li>计算机技术飞速发展，但底层技术永不过时，需要学好。  </li><li>了解技术发展的历史沿革，要做到即有广度，更有深度。</li></ul><h2 id="三面-2020-08-13-19-06"><a href="#三面-2020-08-13-19-06" class="headerlink" title="三面 [2020.08.13 19:06]"></a>三面 [2020.08.13 19:06]</h2><ul><li>自我介绍 </li><li>对加班的看法？</li><li>你的职业规划？</li><li>竞赛中遇到的困难？</li><li>人生中遇到的最大困难？</li><li>令你很有成就感的事情？</li><li>你如何安排自己的日常事务？</li><li>如何看待华为被称为血汗工厂？</li></ul><h2 id="面试官建议-1"><a href="#面试官建议-1" class="headerlink" title="面试官建议 "></a>面试官建议 </h2><ul><li>分配到边缘存储岗位，涉及容器，AI等技术。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/04/a0F4bR.png&quot; alt=&quot;interview&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://www.shieber.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="IT" scheme="http://www.shieber.cn/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>21世纪计算机技术发展展望</title>
    <link href="http://www.shieber.cn/title/a1d4a508/"/>
    <id>http://www.shieber.cn/title/a1d4a508/</id>
    <published>2020-08-02T07:58:24.000Z</published>
    <updated>2020-08-08T01:42:03.915Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/02/aY6dW8.png" alt="21-new-tech"></p><a id="more"></a><p>学习计算机技术的过程中，不免发现问题，有时还能迸发些新的思想。本文就是这样的情况下诞生的，试着对本世纪计算机可能发展的趋势作预测，算是瞎猜吧！</p><p>对网络尤其是七层参考互联模型的研究使我相信，未来一定会有新的协议和技术出现。结合个人对技术的掌握和理解，下面两幅图整理了未来我眼中的计算机技术发展方向。</p><p><img src="https://s1.ax1x.com/2020/08/02/aY6jSO.png" alt="21-new-tech-part1"><br><img src="https://s1.ax1x.com/2020/08/02/aYcpmd.png" alt="21-new-tech-part2"></p><h2 id="对语言的看法"><a href="#对语言的看法" class="headerlink" title="对语言的看法"></a>对语言的看法</h2><p>  传统的语言，比如C/C++/Java/Python之类的语言都是在单机时代设计的，那时多CPU的机器没有，所以很多语言就没有考虑多CPU并行，更多的考虑是和机器硬件的交互，如指针，内存。虽然部分语言也支持并行，但程度不够。这类语言我称之为机器系语言。</p><p>  类似Go语言这样的语言，天生自带并发/并行机制，是网络时代需要的语言。Go对许多问题的处理都比较好，写出的代码也很规范。在网络大并发时代，Go必将大放异彩，我称Go这类语言为网络系语言。</p><p>  量子系语言，这是为量子计算机准备的。鄙人学过一点量子力学(知道名词)，知道这技术和传统IT技术的不同，所以在量子计算机上跑的语言必定需要专门设计，目前这类语言有Q#和Silq。</p><p>  最后是星际系语言，这是我本人的设想。设想人类在月球和火星上建立科研机构，甚至永久居住地。那么地球如何与之通信？现行的通信机制需要修改，语言核心特性也需要改。</p><p>  我的设想是，通过发射足够多的环日卫星和环球卫星，在火星，地球，月球周围形成通信卫星网。然后就可以利用环日卫星作中转站实现大规模跨空域信息传送。</p><p>  这样一种构建在太阳，地球，月球，火星等星体间的网络。我称之为银河网。据此网络，可提出银河网需要的通信协议和计算，存储等概念。</p><h2 id="对操作系统的看法"><a href="#对操作系统的看法" class="headerlink" title="对操作系统的看法"></a>对操作系统的看法</h2><p>  目前手机端是安卓和苹果，桌面是Linux/Mac OS/Windows，相信未来这些都会发生变化。比如谷歌正在推Fuchsia系统，计划用Dart/Flutter统一桌面和手机端。未来的趋势可能是手机和桌面统一，前端开发统一标准，一处编写，到处都可以用。</p><p>  工业用的系统，比如物联网系统要应对产业园，家用，医疗，交通等场景。这些场景对实时，性能的要求和传统的手机和电脑不同，所以应该会诞生适合物联网的系统。</p><p>  云时代，云产品商作为后台为开发者/企业服务。云产品很大程度上相当于运维，所以对存储，配置，管理，灾备要求高，反而通用系统的一些性能不用那么在意。所以云操作系统可以在传统系统上改进。目前已经有很多云系统了，阿里就有飞天系统。</p><p>  量子体系和传统PC不一样，所以也需要配套的操作系统。</p><p>  至于设想的银河网，设计星际通信，更需要专用系统，它应该会从传统的系统演进。</p><h2 id="对计算的看法"><a href="#对计算的看法" class="headerlink" title="对计算的看法"></a>对计算的看法</h2><p>  计算机，计算占了2/3，所以未来的计算也必定走出自己的发展道路。传统的计算，最快就是超级计算，代表了一个国家的科技实力。而云/雾/霾计算是过去几年提得比较多的，适应的是不同需求。边缘计算就是终端计算，比如手机和电脑端。量子计算是专业的，一直在搞的量子计算机就是为了作计算，这块是必然发展的。星际计算是传统计算的衍生，只是把计算放到星际环境考虑。</p><h2 id="对存储的看法"><a href="#对存储的看法" class="headerlink" title="对存储的看法"></a>对存储的看法</h2><p>硬盘，高速存储芯片这些我们都用过了，大型数据库也有了。今天来看似乎我们进入了大数据时代，好像数据就有多大似的。然而人的追求是无限的。比如，如何保存数据几十上百年？未来的数据，目前的数据库能不能处理得了？如何快速取出？量子信息如何保存？这些需求都需要相应的存储技术。分布式，超大规模的存储技术必然还要向前发展。对保存时间的追求诞生了玻璃存储，对数据量的追求诞生了DNA存储。这些新的存储形式如何运用到计算机系统中？还有，物联网实时数据会有多大呢？目前磁盘存储速度太慢了，无法满足高速率大数据持续写入。从目前的技术来看，未来相变(PCM)存储可能会成为主流，说不定还会替代DRAM内存。类似的还有赛道存储器、高速磁存储器。</p><h2 id="对协议的看法"><a href="#对协议的看法" class="headerlink" title="对协议的看法"></a>对协议的看法</h2><p>一流企业做协议(专利)，二流做产品，三流做服务。Unicode码不断发展，解决了地球人的文字保存问题。TCP/IP协议族给出了网际通信的标准。区块链协议给出了信任链。新的需求推动新的协议诞生。量子通信，必然有量子协议。星际通信则会有星际通信协议。</p><h2 id="对网络的看法"><a href="#对网络的看法" class="headerlink" title="对网络的看法"></a>对网络的看法</h2><p>局域网，互联网已蔚为大观。然而互联网也有问题：文件重复(不同地方重复)，文件易丢失(404)。如何解决冗余，如何避免404？以p2p技术为组成的IPFS正是为此而来。物联网，也有一张网，可能是家具，汽车，医院，工厂等大家伙构成的一张网，和人类用的互联网并行不悖。若是造出了量子计算机，是否可能重走传统计算机构成互联网的套路，再打造出一个量子网络？最后，以太阳，地球，月球，火星等星球组成一张银河网是否可能呢？</p><h2 id="对分布式的看法"><a href="#对分布式的看法" class="headerlink" title="对分布式的看法"></a>对分布式的看法</h2><p>云时代，大数据时代。数据多，繁杂。系统模块越来越多。如何拆分，如何优化？拆分后如何协调？传统的单体架构正不断拆解，专业化。分解后的模块要实现原有的功能，那么存储，一致性，通信，计算如何解决？</p><h2 id="对智能技术的看法"><a href="#对智能技术的看法" class="headerlink" title="对智能技术的看法"></a>对智能技术的看法</h2><p>AI火了，到处是谈AI的人。那么AI如何发展？目前对图像，语音，视频的处理算是可以用，但还可以优化，对自然语言的理解也还没有解决，多语言翻译如何像口译员一样？以AI技术为基础，能否得到智能机器人，智能的决策系统？最后，今天的AI还无法实现逻辑推理，也就是说它并不像人一样智能。今后如何实现逻辑推理，通过图灵测试？</p><h2 id="对安全的看法"><a href="#对安全的看法" class="headerlink" title="对安全的看法"></a>对安全的看法</h2><p>黑客的猖獗，计算能力的突破都使得安全问题日益突显。未来，某些今天(2020)还管用的加密技术可能就能被破解了。所以，加密技术会不断发展。前段时间IBM推出了全同态加密技术，这意味着安全又上了一个台阶，是否能破解这种技术呢？其他的安全技术，如量子加密，这技术有量子力学原理兜底，不可破。除了技术层面，个人层面，社会工程如何应对？目前的黑客攻击，问题多是出在人身上。如何保护个人隐私，如何划定员工权限？</p><h2 id="对应用软件的看法"><a href="#对应用软件的看法" class="headerlink" title="对应用软件的看法"></a>对应用软件的看法</h2><p>  其实一般人用的软件，大部分都有了。目前来看医疗和法律方面还比较欠缺。未来社会，一定是一个法治社会，个人对法律的需求会上升，此类应用或者服务定会多起来。对医疗的需求也差不多，没有人不需要医生和医药的。今天订外卖，以后可以订(线上预约)医生。还有是否未来人人会有一套私有云设备，这需要开发对应的产品和应用。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这些问题？其实对应着各高校/企业在计算机技术方面的研究方向。它们可能在大学就是一门学科，在企业就是一个岗位，正不断培养人才。今后怎样，实在难想。我个人的水平有限，只能开脑洞到此。瞎想一番，发现计算机技术还处于快速发展阶段，还有很多发展的方向可以研究嘛! 吾辈当不断前行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/02/aY6dW8.png&quot; alt=&quot;21-new-tech&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.shieber.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CS" scheme="http://www.shieber.cn/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>python下各种虚拟环境使用</title>
    <link href="http://www.shieber.cn/title/3f375b95/"/>
    <id>http://www.shieber.cn/title/3f375b95/</id>
    <published>2020-07-23T06:52:32.000Z</published>
    <updated>2020-07-23T08:18:06.312Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/23/UL2XtO.png" alt="virtualenv"></p><a id="more"></a><p>Python下存在多种虚拟环境构建方式，现做整理。</p><h2 id="为什么需要虚拟环境"><a href="#为什么需要虚拟环境" class="headerlink" title="为什么需要虚拟环境"></a>为什么需要虚拟环境</h2><p>传统的库安装方式，如pip install package，会将包安装到系统，不管你后面用不用都在。然而大部分人安装后就忘了卸载，导致占用内存。还有的时候，项目可能需要python2.7，有时又需要python3.5，甚至对同一个包的版本需求也不一样，既要1.1版又要1.4版，然而传统安装方式只可能保留一个版本，这该怎么办？</p><p>为了解决占用和多版本问题，python给出了虚拟环境。虚拟环境其实就是一个目录，项目需要的包不再安装到系统而是该目录。不同的目录可以放同一个包不同的版本。项目不要了，可直接删除该目录，节约内存。如下图，一个主目录下是各种虚拟环境。</p><p><img src="https://s1.ax1x.com/2020/07/23/ULRCnI.png" alt="virtualenv1"></p><p>python的虚拟环境方式主要有三种，分别是virtualenv，virtualenvwrapper，pipenv。三者的区别是管理依赖的方式和指令的复杂度，主体功能肯定都是一样的。</p><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>最早出现的就是virtualenv了，下面是其用法。</p><p><img src="https://s1.ax1x.com/2020/07/23/ULoaWV.png" alt="virtualenv-op"></p><h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p>virtualenvwrapper是virtualenv的升级版，管理各个环境，切换方便</p><p><img src="https://s1.ax1x.com/2020/07/23/ULofSK.png" alt="virtualenvwrapper-op"></p><h2 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h2><p>pipenv 是pip和virtualenv的结合，使用Pipfile和Pipfile.lock来管理依赖关系，更加方便，未来会是Python开虚拟环境的首选方法。下面是其用法。</p><p><img src="https://s1.ax1x.com/2020/07/23/ULT9Ts.png" alt="pipenv-op"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/23/UL2XtO.png&quot; alt=&quot;virtualenv&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="虚拟环境" scheme="http://www.shieber.cn/categories/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="virtualenv" scheme="http://www.shieber.cn/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>学习Scrapy源代码</title>
    <link href="http://www.shieber.cn/title/ae08e597/"/>
    <id>http://www.shieber.cn/title/ae08e597/</id>
    <published>2020-07-21T06:07:36.000Z</published>
    <updated>2020-07-21T08:01:32.555Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/21/UI6CX4.png" alt="scrapy-structure"></p><a id="more"></a><p>近期学习Scrapy源代码，稍作整理。</p><h2 id="Scrapy架构"><a href="#Scrapy架构" class="headerlink" title="Scrapy架构"></a>Scrapy架构</h2><p><img src="https://s1.ax1x.com/2020/07/21/UI6CX4.png" alt="scrapy-structure"></p><p>主体架构包含五大主体，两大中间件。</p><table><thead><tr><th align="left">主体/中间件</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">engine</td><td align="left">调动爬虫，使其运转起来</td></tr><tr><td align="left">scheduler</td><td align="left">接受新的url，并安排下载器下载Request</td></tr><tr><td align="left">downloader</td><td align="left">专注于下载，返回Response给spider</td></tr><tr><td align="left">spider</td><td align="left">爬虫，处理Response并返回url给scheduler，item给item pipeline</td></tr><tr><td align="left">item pipeline</td><td align="left">管道，保存下载的数据项item</td></tr><tr><td align="left">downloadermiddlewares</td><td align="left">下载器中间件，处理request中各种问题</td></tr><tr><td align="left">spidermiddlewares</td><td align="left">爬虫中间件，处理response中各种问题</td></tr></tbody></table><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>Scrapy爬虫的运行流程如上图红色圆圈标示。</p><table><thead><tr><th align="left">流程</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">引擎从初始化spider中获取start_urls</td></tr><tr><td align="left">2</td><td align="left">引擎将start_urls给调度器并请求下载任务</td></tr><tr><td align="left">3</td><td align="left">调度器取出url给引擎以驱动下载器</td></tr><tr><td align="left">4</td><td align="left">引擎分发url给下载器</td></tr><tr><td align="left">5</td><td align="left">下载器按url下载</td></tr><tr><td align="left">6</td><td align="left">下载器返回下载内容给spider</td></tr><tr><td align="left">7</td><td align="left">spider处理返回内容，提取新url和item</td></tr><tr><td align="left">8</td><td align="left">spider将新url给调度器，item给pipeline以保存</td></tr><tr><td align="left">9</td><td align="left">返回第三步，开启多线程调度，循环工作</td></tr></tbody></table><p>第一二步使用的是起始url，这是我们在项目spider/xxxspider.py中写好的，如下面的代码所示，这是起始时爬虫需要的，从第三步开始，爬虫自己有新爬取到的url，可以自行调度实现循环下载，直到任务结束。所以编写scrapy爬虫只需要很少的代码。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoSGad.png" alt="scrapy-code"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>如下是scrapy所有目录及外层代码。目录比较重，里面包含许多处理代码，而外层代码是scrapy实现的逻辑，这些外层代码调用目录中的代码完成整个爬取流程。所有目录及代码在/usr/local/lib/python3.6/dist-packages/scrapy/下。</p><table><thead><tr><th align="left">目录</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">commands</td><td align="left">命令行命令具体实现</td></tr><tr><td align="left">contracts</td><td align="left">爬虫可用性检测代码</td></tr><tr><td align="left">core</td><td align="left">核心类，包括downloader, engine, scheduler, scraper, spidermw</td></tr><tr><td align="left">downloadermiddlewares</td><td align="left">下载器中间件，包括ajax,cookie,http,agent,robots等</td></tr><tr><td align="left">extensions</td><td align="left">扩展类，包括logstats, spiderstates等</td></tr><tr><td align="left">http</td><td align="left">网络处理，包括Request和Response等</td></tr><tr><td align="left">linkextractors</td><td align="left">链接抽取类，包括html, lxml, regex, sgml</td></tr><tr><td align="left">loader</td><td align="left">Item加载器</td></tr><tr><td align="left">pipelines</td><td align="left">Item管道，包含file, image和media</td></tr><tr><td align="left">selector</td><td align="left">基于lxml的xpath选择器</td></tr><tr><td align="left">settings</td><td align="left">爬虫基本配置，十分多，可自定义</td></tr><tr><td align="left">spidermiddlewares</td><td align="left">爬虫中间件，包括深度优先深度设置，http错误处理等</td></tr><tr><td align="left">spiders</td><td align="left">爬虫类，实现xmlFeed, sitemap，crawl</td></tr><tr><td align="left">templates</td><td align="left">项目和爬虫模板，包括一个项目架构，基本爬虫，双向爬虫等</td></tr><tr><td align="left">utils</td><td align="left">各种工具类，用于实现各种处理功能</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>外层代码</strong></td><td align="left"><strong>作用</strong></td></tr><tr><td align="left">cmdline.py</td><td align="left">命令行参数处理</td></tr><tr><td align="left">crawler.py</td><td align="left">爬虫</td></tr><tr><td align="left">dupefilters.py</td><td align="left">去重</td></tr><tr><td align="left">exceptions.py</td><td align="left">错误处理</td></tr><tr><td align="left">exporters.py</td><td align="left">序列化保存文件</td></tr><tr><td align="left">extension.py</td><td align="left">扩展管理</td></tr><tr><td align="left">interfaces.py</td><td align="left">爬虫接口</td></tr><tr><td align="left">item.py</td><td align="left">数据流Item</td></tr><tr><td align="left">link.py</td><td align="left">链接对象结构</td></tr><tr><td align="left">logformatter.py</td><td align="left">日志生成</td></tr><tr><td align="left">mail.py</td><td align="left">邮件助手</td></tr><tr><td align="left">middleware.py</td><td align="left">中间件管理</td></tr><tr><td align="left">pqueues.py</td><td align="left">下载器先级队列</td></tr><tr><td align="left">resolver.py</td><td align="left">Twisted异步处理</td></tr><tr><td align="left">responsetypes.py</td><td align="left">请求响应数据</td></tr><tr><td align="left">robotstxt.py</td><td align="left">禁止爬取规则</td></tr><tr><td align="left">shell.py</td><td align="left">命令行工具</td></tr><tr><td align="left">signalmanager.py</td><td align="left">信号管理</td></tr><tr><td align="left">signals.py</td><td align="left">信号</td></tr><tr><td align="left">spiderloader.py</td><td align="left">爬虫加载</td></tr><tr><td align="left">squeues.py</td><td align="left">调度器队列</td></tr><tr><td align="left">statscollectors.py</td><td align="left">爬虫信息统计</td></tr><tr><td align="left">mime.types</td><td align="left">支持的文件类型</td></tr><tr><td align="left">VERSION</td><td align="left">版本信息</td></tr><tr><td align="left">_monkeypatches.py</td><td align="left">猴子补丁，处理Twisted</td></tr><tr><td align="left">__init__.py</td><td align="left">项目初始化</td></tr><tr><td align="left">__main__.py</td><td align="left">执行入口</td></tr></tbody></table><h2 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h2><p>__main__(或命令行的scrapy crawl xxx等) 调用cmdline.py，cmdline.py调用utils中文件处理配置，再调用crawler.py。crcrawler.py调用spider和core中引擎。引擎初始化scheduler，downloader，scraper等，开启下载流程。</p><p>重要文件：cmdline.py, crawler.py<br>重要目录：core, http, pipelines, utils, spider<br>其他的目录和文件都为重要文件和目录服务，主逻辑实现也在重要目录和文件中。  </p><h2 id="调用关系图"><a href="#调用关系图" class="headerlink" title="调用关系图"></a>调用关系图</h2><p>图一是从命令行开始的全过程，图二是核心架构运行流程，也即图一crawl下面那部分。当然，很多都省略了，比如日志，错误处理，这些不是主要的内容，加上反而让人看不懂。</p><p><img src="https://s1.ax1x.com/2020/07/21/UIIPGd.png" alt="whole"></p><p>我们自己写的代码只在start_request处执行一次，此后就是核心线程开启循环下载直到结束，可以看到scrapy为我们完成了大多数内容。由于scrapy整体架构高度解耦合，所以需要什么功能，我们可以自己去添加配置。每一个箭头就是一步，对这一步需要添加功能就编写好代码然后串在中间。比如觉得downloader和scraper中还需要处理，自己写好代码，将其放在downloader和scraper间，这样整个爬虫处理流程是不变的，但增加了自定义内容。</p><p><img src="https://s1.ax1x.com/2020/07/21/UIImdS.png" alt="core"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/21/UI6CX4.png&quot; alt=&quot;scrapy-structure&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://www.shieber.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Code" scheme="http://www.shieber.cn/tags/Code/"/>
    
      <category term="scrapy" scheme="http://www.shieber.cn/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>linux下软件安装方式</title>
    <link href="http://www.shieber.cn/title/d63ca381/"/>
    <id>http://www.shieber.cn/title/d63ca381/</id>
    <published>2020-07-11T02:33:13.000Z</published>
    <updated>2020-07-23T08:18:59.841Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/11/UQtLvT.png" alt="linux-software"></p><a id="more"></a><p>Windows下安装软件似乎只有一种方式，那就是下载.exe，然后执行安装。然而Linux系统中软件安装方式可谓五花八门，下面总结一番。</p><p>因为Linux系统发行版多，各家有各家的软件安装方式，这种种不同方式可称为专用安装方式。另外，有人开发的软件若是想要支持各大发行版，那么就需要一种通用的软件安装方式。</p><h2 id="A-Linux通用的跨发行版软件包安装方式"><a href="#A-Linux通用的跨发行版软件包安装方式" class="headerlink" title="A.Linux通用的跨发行版软件包安装方式"></a>A.Linux通用的跨发行版软件包安装方式</h2><p>1.snap<br>2.flatpak<br>3.AppImage<br>4.source-code  </p><p>1.snap是ubuntu搞的，但目前已经支持多种发行版的安装，可归类为通用安装方式。snap目前甚至可以安装微信到linux。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install xxx #用snap安装软件</span><br></pre></td></tr></table></figure><p>2.flatpak(前身为xdg-app) 是一种用于构建，分发，安装和运行应用程序的技术。通过在沙箱中隔离应用程序来提高Linux桌面的安全性，允许应用程序安装在任何Linux发行版上。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo flatpak install xxx #用flatpak安装软件</span><br></pre></td></tr></table></figure><p>3.AppImage是打包好的可执行镜像，赋予执行权限后直接运行就可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x AppImage</span><br><span class="line">./AppImage</span><br></pre></td></tr></table></figure><p>4.source-code，源代码安装，这是最基本的，最通用的安装方式。而源代码发布时，作者可能提供了不同安装选项给用户，有以下三种。  </p><blockquote><p>a. 只有configure文件，则按如下方式安装<br>    ./configure #为了生成makefile<br>    make<br>    make install<br>b. 已有makefile<br>    make<br>    make install<br>c. 只有Imake<br>    xmkmf<br>    make<br>    make install  </p></blockquote><p>说完通用的方式，接着看看专用的方式。</p><h2 id="B-Linux专用的软件包管理器"><a href="#B-Linux专用的软件包管理器" class="headerlink" title="B.Linux专用的软件包管理器"></a>B.Linux专用的软件包管理器</h2><ol><li>.deb</li><li>.rpm</li><li>etc…</li></ol><p>主要是两大类 </p><blockquote><p><strong>a</strong>.以Debian系列的dpkg安装deb包，和apt-get方式<br>sudo dpkg -i xxx.deb<br>sudo apt-get install xxx<br><strong>b</strong>.以Redhat系列的rpm安装rpm包，和yum方式<br>sudo rpm xxx.rpm<br>sudo yum install xxx<br><strong>c</strong>.其他的，比如Arch用pacman -S xxx 安装</p></blockquote><h2 id="rpm包转deb包"><a href="#rpm包转deb包" class="headerlink" title="rpm包转deb包"></a>rpm包转deb包</h2><p>rpm包还可以转换为deb包，以便安装到debian系linux系统。具体方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install alien</span><br><span class="line">sudo aline xxx.rpm     #当前目录生成xxx.deb</span><br><span class="line">sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure><p>这样，就能将rpm包转换为deb包，然后装到debian系系统，不过有的软件转换后未必能安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/11/UQtLvT.png&quot; alt=&quot;linux-software&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="http://www.shieber.cn/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="software" scheme="http://www.shieber.cn/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>理解递归和动态规划</title>
    <link href="http://www.shieber.cn/title/1e14846f/"/>
    <id>http://www.shieber.cn/title/1e14846f/</id>
    <published>2020-07-07T13:42:02.000Z</published>
    <updated>2020-07-21T08:24:26.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/08/UE1Wad.png" alt="recursion"></p><a id="more"></a><p>什么是递归，尾递归呢？动态规划和递归有什么关系，区别？什么时候用递归，什么时候用动态规划？<br>这些问题令人苦恼，有人长时间搞不清楚其中道理。</p><h2 id="先说结论，再逐个分析"><a href="#先说结论，再逐个分析" class="headerlink" title="先说结论，再逐个分析"></a>先说结论，再逐个分析</h2><blockquote><p>1.递归是一种调用自身，通过<strong>分解大问题成小问题</strong>以解决问题的技术。<br>2.尾递归解决了递归<strong>大量占用栈</strong>的缺点，是对递归的一种优化，节约了内存。<br>3.动态规划是一种利用<strong>小问题解决大问题</strong>的技术。<br>4.递归从大到小，自顶(大)向下(小)；动态规划从小到大，自底(小)向上(大)。<br>5.两者选取了不同角度解决问题，同时都各自<strong>带来了新问题</strong>。  </p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>第一条：递归是一种调用自身，通过<strong>分解大问题成小问题</strong>以解决问题的技术。大问题分解成小问题是重点，我们来看一例。</p><p>最著名的斐波那契数列问题。都知道斐波那契数列是一列数字，现在我问你第23个斐波那契数是多少？答不上来吧？这就叫大问题，因为你脑袋一下子算不出来，这问题就大了。计算机最不怕算了，它就是干计算的。要让计算机解决这个问题，就需要告诉他，<strong>a.该怎么开始，b.怎么结束，c.计算规则</strong>是什么，然后它就能算出来了。</p><p>现在的问题是，计算机不知道这个问题如何下手。这时人就想，我能不能先算第21和22个数，我知道第21个和22个数就能由规则计算出第23个了。此处<strong>规则</strong>，就是需要告诉机器的，这里是Fib(23) = Fib(22) + Fib(21)。现在问题是Fib(22)和Fib(21)还是不知道。聪明的人类又想，我再知道前面两个数不就能算了？所以问题演变成Fib(23) = Fib(21) + Fib(20) + Fib(20) + Fib(19)。可是这么还是不知道，还要算再前面的数，什么时候是个头啊？对，就是头，找到头，不就算出来了吗？头，就是停止，就是端，就是边界，就是约束。也就是该 <strong>b.怎么结束</strong>。而<strong>c.计算规则Fib(n) = Fib(n-1) + Fib(n-2)</strong>是人类定义的。如果你将Fib(23)展开，发现是一串加法，特别长。而计算机计算时也是这么干的，所以它特别耗费内存，就像你不能记住展开式一样，因为占用你的脑存。仔细一看，发现Fib(23)最后会变成由Fib(0)和Fib(1)组成的超长加法。而Fib(0)和Fib(1)也是人类定义的，这就是<strong>b.该怎么结束</strong>。Fib(0)和Fib(1)既然是人定义的，肯定对我们和计算机来说就是小问题了，too simple，sometimes naive。这就是<strong>分解大问题成小问题</strong>。所以利用递归，我们把Fib(23)变成了一堆Fib(1)和Fib(0)的加法运算，<strong>a.该怎么开始</strong>则指从23开始，这是需求。</p><p>所以看到一来就是一个超大的数，规模，尺度的问题，多半可以考虑递归手段。就是化大为小，化繁为简。这是该用递归的时候。</p><p>现在再去翻书，看递归定义：1.出口，2.转移条件。你发现就好懂了。因为解决大问题，需要必要的规则和起始条件(或终止条件)。其实，理科有什么科学规律不是这样呢？</p><p>比如描述宇宙规律，牛顿爵士提出理解和解决世界小问题的方案，加点约束，就可以解决宇宙的大问题了。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFFr6.png" alt="newtown-laws"></p><p>受力与否为起始条件(边界)，三大定律就是转移条件。有了力，宇宙就动起来了。</p><p>当然，你说既然力是起始条件(边界)，那力呢？牛顿发现不把起始原因找到，肯定不行，因为那套运动规则就没法动起来。所以牛逼的爵士，再来一律，万有引力定律。就是说，到处都是起始原因，万有嘛，大家都有，这下宇宙不就动了吗。</p><p>$$万有引力定律:  F = G\frac{M_{1}M_{2}}{R^{2}}$$</p><p>所以，牛，很牛！我看了觉得简单，自己要是不看，到死也想不出来。所以，牛顿牛逼。就这几句话，你我独自是整不出来的，所以要尊重数学家和物理学家嘛！</p><p>扯远了，但是这么个理解法。下面写出Fibnacci的算法。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFfQ1.png" alt="fibnacci1"></p><p>上面的代码，就可以用来计算了。但是，我们上面分析指出，它占内存，不断的压栈。所以是否能够优化一下，减少内存占用呢？当然可以，尾递归就是干这事的。</p><p>尾递归，字面意思，就是它是尾巴上的，最后一个调用的。所以，尾递归只能调用自身，不能乘除加减。下面就是斐波那契的尾递归版本。最后一行，不加减，无乘除，单是调用自身，这就是尾递归。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFbJH.png" alt="fibnacci2"></p><p>那它如何减少内存消耗呢？我们知道纯递归版中，栈主要用来记录中间状态了，而这些中间状态中我们需要的无非就是些加法罢了，因为依据规则Fib(n) = Fib(n-1) + Fib(n-2)，这里就只有加法。那么我们把加法保留到下次函数调用，不就可以只用一个栈了吗？所以我们就这么干了。下面的参数中y和x+y就是保留的值和加法状态。</p><p>现在回过头看第二条：尾递归解决了递归<strong>大量占用栈</strong>的缺点，是对递归的一种优化，节约了内存。可第五条又说，都各自<strong>带来了新问题</strong>。什么问题？</p><p>函数递归调用，参数入栈，栈上还有很多操作系统用得到的信息，尤其出Bug了，调试时，就需要栈上的信息。现在尾递归给优化了，全部信息都在一份参数里，而且还是多次相加后的值，找不出问题了。所以尾递归在操作系统层面，还有许多需要栈信息的应用上并没有得到太多应用。别看优化了，节约资源了，但是也引入了新问题。</p><p>全部最优，最后结果可能最糟，许多问题都是这样，工程问题要考虑全局，不要一来就优化，就凸优化。</p><blockquote><p>过早的优化是万恶之源，因为让正确的程序更快，要比让快速的程序正确容易得多。– Donald Knuth</p></blockquote><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>第三条：动态规划是一种利用<strong>小问题解决大问题</strong>的技术。刚才我们看了递归是把大问题分解成小问题，现在我们从小问题能不能推导些大问题出来呢？当然能，这就是动态规划。动态二字是说，新问题是热乎的，才得到的。比如还是用斐波那契数列说，我们用两个小问题Fib(0) + Fib(1)就得到Fib(2)了，看到没，没叫你算Fib(2)，但是由小问题构造出了大问题。而且Fib(3) = Fib(2) + Fib(1)，这里Fib(3)又是由刚生成的Fib(2)构成，和最开始的Fib(0)无关了，始终用这种规律动态生成下一个。是不是利用小问题解决大问题？</p><p>再看动态规划版的斐波那契数列计算代码。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFqWd.png" alt="fibnacci3"></p><p>此处是从2开始计算到n，由0和1两个基本条件构造大问题，这就是动态规划。递归的终止条件恰好就是动态规划的起始条件，所以不同的叫法，出口，边界，约束，其实都一样。</p><p>再看第五条，各自<strong>带来了新问题</strong>。 动态规划带来什么问题？动态规划不好找准转移规则和起始条件。而这两点又是必须的，所以动态规划好用，不好理解。比如爬楼梯问题，可以爬1阶，2阶，3阶。计算到n阶楼梯的爬法。<br>还有很多问题，乍一看是看不出能用动态规划的，甚至条件复杂得很。还有上面的dp数组也很费内存。</p><p>当然，费内存可以优化，用两个变量来存储信息。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFjyt.png" alt="fibnacci4"></p><p>这也是数学教材上的斐波那契算法定义。</p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>第四条：递归从大到小，自顶(大)向下(小)；动态规划从小到大，自底(小)向上(大)。现在应该好理解了。自顶向下和自底向上是另一种说法罢了。递归时，从一个大问题不断产生新的小问题，画成树，不就是顶上一个点，下面一堆点吗？所以从顶向下，最下面刚好是基本条件。而动态规划恰好就从基本条件开始，不断向上计算较大的问题。自然自底向上了。递归和动态规划两者联系就在于此，看从哪头开始。</p><p><img src="https://s1.ax1x.com/2020/07/08/UElmkR.png" alt="recursion_fibnacci"></p><h2 id="斐波那契数列算法合集"><a href="#斐波那契数列算法合集" class="headerlink" title="斐波那契数列算法合集"></a>斐波那契数列算法合集</h2><p>计算斐波那契数列的5种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line">#纯递归 最糟糕的算法</span><br><span class="line">def fibnacci(n):</span><br><span class="line">    if n &lt; 2: return n</span><br><span class="line"></span><br><span class="line">    return fibnacci(n-1) + fibnacci(n-2)</span><br><span class="line"></span><br><span class="line">#动态规划，迭代，不要数组</span><br><span class="line">def fibnacci0(n):</span><br><span class="line">    if n &lt; 2: return n</span><br><span class="line"></span><br><span class="line">    p, q, = 0, 1</span><br><span class="line">    for i in range(2, n+1):</span><br><span class="line">        p , q = q, p + q</span><br><span class="line"></span><br><span class="line">    return q</span><br><span class="line"></span><br><span class="line">#尾递归，x, y保存了递归的状态</span><br><span class="line">def fibnacci1(n, x=0, y=1):</span><br><span class="line">    if n &lt; 2:</span><br><span class="line">        return y</span><br><span class="line">    else:</span><br><span class="line">        return fibnacci0(n-1, y, x+y)</span><br><span class="line"></span><br><span class="line">#递归 + 自备缓存 (减少重复计算)</span><br><span class="line">res = []</span><br><span class="line">def fibnacci2(n):</span><br><span class="line">    if n &lt; 2:</span><br><span class="line">        val = n</span><br><span class="line">    else:</span><br><span class="line">        val = fibnacci2(n-1) + fibnacci2(n-2)</span><br><span class="line">    res.append(val)</span><br><span class="line"></span><br><span class="line">    return val</span><br><span class="line"></span><br><span class="line">#递归 + python官方提供缓存</span><br><span class="line">from functools import lru_cache</span><br><span class="line">@lru_cache(maxsize=1000)</span><br><span class="line">def fibnacci3(n):</span><br><span class="line">    if n &lt; 2: return n      #return后的值会放到lru_cache里</span><br><span class="line"></span><br><span class="line">    return fibnacci3(n-1) + fibnacci3(n-2)</span><br><span class="line"></span><br><span class="line">#面向线上笔试编程</span><br><span class="line">def fibnacci4(n):</span><br><span class="line">    offer =[  </span><br><span class="line">             0,</span><br><span class="line">           1,   1,</span><br><span class="line">         2,       3,</span><br><span class="line">        5,         8,</span><br><span class="line">       13,          21,</span><br><span class="line">      34,            55,</span><br><span class="line">      89,            144,</span><br><span class="line">     233,            377,</span><br><span class="line">     610,            987,</span><br><span class="line">     1597,           2584,</span><br><span class="line">     4181,         6765,</span><br><span class="line">      10946,      17711,</span><br><span class="line">        28657,   46368,</span><br><span class="line">             75025,</span><br><span class="line"></span><br><span class="line">        121393, 196418, 317811,</span><br><span class="line">        514229, 832040, 1346269,</span><br><span class="line">        2178309, 3524578, 5702887,</span><br><span class="line">        9227465, 4930352, 24157817,</span><br><span class="line">        39088169,</span><br><span class="line">        63245986,</span><br><span class="line">        102334155,</span><br><span class="line">        165580141,</span><br><span class="line">        267914296,</span><br><span class="line">        433494437,</span><br><span class="line">        701408733,</span><br><span class="line">        1134903170,</span><br><span class="line">        1836311903,</span><br><span class="line">        2971215073,</span><br><span class="line">        4807526976,</span><br><span class="line">        7778742049,</span><br><span class="line">        12586269025, 20365011074,32951280099,</span><br><span class="line">        53316291173, 86267571272, 139583862445,</span><br><span class="line">        225851433717, 365435296162, 591286729879,</span><br><span class="line">        956722026041, 1548008755920,2504730781961</span><br><span class="line">        4052739537881,</span><br><span class="line">        6557470319842,</span><br><span class="line">        10610209857723,</span><br><span class="line">        17167680177565,</span><br><span class="line">        27777890035288,</span><br><span class="line">        44945570212853,</span><br><span class="line">        72723460248141,</span><br><span class="line">        117669030460994,</span><br><span class="line">        190392490709135,</span><br><span class="line">        308061521170129,</span><br><span class="line">        498454011879264,</span><br><span class="line">        806515533049393,</span><br><span class="line">        1304969544928657,</span><br><span class="line">        2111485077978050,</span><br><span class="line">        3416454622906707,</span><br><span class="line">        5527939700884757,</span><br><span class="line">        8944394323791464,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        14472334024676221, 23416728348467685</span><br><span class="line">        37889062373143906, 61305790721611591,</span><br><span class="line">        99194853094755497, 160500643816367088,</span><br><span class="line">        259695496911122585, 420196140727489673,</span><br><span class="line">        679891637638612258, 1100087778366101931,</span><br><span class="line">        1779979416004714189,</span><br><span class="line">        2880067194370816120,</span><br><span class="line">        4660046610375530309,</span><br><span class="line">        7540113804746346429,</span><br><span class="line">        12200160415121876738,</span><br><span class="line">        19740274219868223167,</span><br><span class="line">        31940434634990099905,</span><br><span class="line">        51680708854858323072,</span><br><span class="line">        83621143489848422977,</span><br><span class="line">        135301852344706746049,</span><br><span class="line">        218922995834555169026,</span><br><span class="line">        354224848179261915075,</span><br><span class="line">        573147844013817084101,</span><br><span class="line">        927372692193078999176,</span><br><span class="line">        1500520536206896083277,2427893228399975082453, </span><br><span class="line">        3928413764606871165730, 6356306993006846248183,</span><br><span class="line">        10284720757613717413913,16641027750620563662096,</span><br><span class="line">        26925748508234281076009, 43566776258854844738105, </span><br><span class="line">        70492524767089125814114, 114059301025943970552219,</span><br><span class="line">        184551825793033096366333, 298611126818977066918552,</span><br><span class="line">        483162952612010163284885,</span><br><span class="line">        781774079430987230203437,</span><br><span class="line">        1264937032042997393488322,</span><br><span class="line">        2046711111473984623691759,</span><br><span class="line">        3311648143516982017180081,</span><br><span class="line">        5358359254990966640871840,</span><br><span class="line">        8670007398507948658051921,</span><br><span class="line">        14028366653498915298923761,</span><br><span class="line">        22698374052006863956975682,</span><br><span class="line">        36726740705505779255899443,</span><br><span class="line">        59425114757512643212875125,</span><br><span class="line">        96151855463018422468774568,</span><br><span class="line">        155576970220531065681649693,</span><br><span class="line">        251728825683549488150424261,</span><br><span class="line">        407305795904080553832073954,</span><br><span class="line">        659034621587630041982498215,</span><br><span class="line">        1066340417491710595814572169,</span><br><span class="line">        1725375039079340637797070384,</span><br><span class="line">                    </span><br><span class="line">                                 2791715456571051233611642553,</span><br><span class="line">                               4517090495650391871408712937,</span><br><span class="line">                     7308805952221443105020355490,  11825896447871834976429068427,</span><br><span class="line">             19134702400093278081449423917,               30960598847965113057878492344,</span><br><span class="line">      50095301248058391139327916261,                       81055900096023504197206408605,  </span><br><span class="line">    131151201344081895336534324866,                         212207101440105399533740733471, </span><br><span class="line">   343358302784187294870275058337,                           555565404224292694404015791808,</span><br><span class="line">   898923707008479989274290850145,                            1454489111232772683678306641953,</span><br><span class="line">   2353412818241252672952597492098,                           3807901929474025356630904134051,</span><br><span class="line">   6161314747715278029583501626149,                           9969216677189303386214405760200,</span><br><span class="line">   16130531424904581415797907386349,                         26099748102093884802012313146549,</span><br><span class="line">    42230279526998466217810220532898,                       68330027629092351019822533679447,</span><br><span class="line">    110560307156090817237632754212345,                     178890334785183168257455287891792,</span><br><span class="line">     89450641941273985495088042104137,                    468340976726457153752543329995929,</span><br><span class="line">      757791618667731139247631372100066,                 1226132595394188293000174702095995,</span><br><span class="line">        1983924214061919432247806074196061,            3210056809456107725247980776292056,</span><br><span class="line">          5193981023518027157495786850488117,        8404037832974134882743767626780173,</span><br><span class="line">              13598018856492162040239554477268290, 22002056689466296922983322104048463,</span><br><span class="line">                  35600075545958458963222876581316753,</span><br><span class="line">                    57602132235424755886206198685365216,</span><br><span class="line">                       93202207781383214849429075266681969,</span><br><span class="line">                         150804340016807970735635273952047185,</span><br><span class="line">                              244006547798191185585064349218729154,</span><br><span class="line">                                 394810887814999156320699623170776339,</span><br><span class="line">                                    638817435613190341905763972389505493,</span><br><span class="line">                                         1033628323428189498226463595560281832,</span><br><span class="line">                                           1672445759041379840132227567949787325,</span><br><span class="line">                                               2706074082469569338358691163510069157,</span><br><span class="line">                                                   4378519841510949178490918731459856482,</span><br><span class="line">                                                      7084593923980518516849609894969925639,</span><br><span class="line">                                                         11463113765491467695340528626429782121,</span><br><span class="line">                                                           18547707689471986212190138521399707760,</span><br><span class="line"></span><br><span class="line">        30010821454963453907530667147829489881,</span><br><span class="line">        48558529144435440119720805669229197641,</span><br><span class="line">        78569350599398894027251472817058687522,</span><br><span class="line">        127127879743834334146972278486287885163,</span><br><span class="line">        205697230343233228174223751303346572685,</span><br><span class="line">        332825110087067562321196029789634457848,</span><br><span class="line">        538522340430300790495419781092981030533,</span><br><span class="line">        871347450517368352816615810882615488381,</span><br><span class="line">        1409869790947669143312035591975596518914,</span><br><span class="line">        2281217241465037496128651402858212007295,</span><br><span class="line">        3691087032412706639440686994833808526209,          5972304273877744135569338397692020533504,</span><br><span class="line">        9663391306290450775010025392525829059713,         15635695580168194910579363790217849593217,</span><br><span class="line">        25299086886458645685589389182743678652930,       40934782466626840596168752972961528246147,</span><br><span class="line">        66233869353085486281758142155705206899077,      107168651819712326877926895128666735145224,</span><br><span class="line">        173402521172797813159685037284371942044301,    280571172992510140037611932413038677189525,</span><br><span class="line">        453973694165307953197296969697410619233826,   734544867157818093234908902110449296423351,</span><br><span class="line">        1188518561323126046432205871807859915657177, 1923063428480944139667114773918309212080528,</span><br><span class="line">        3111581989804070186099320645726169127737705,5034645418285014325766435419644478339818233,</span><br><span class="line">        8146227408089084511865756065370647467555938,13180872826374098837632191485015125807374171,</span><br><span class="line">        21327100234463183349497947550385773274930109,</span><br><span class="line">        34507973060837282187130139035400899082304280,</span><br><span class="line">        55835073295300465536628086585786672357234389,</span><br><span class="line">        90343046356137747723758225621187571439538669,</span><br><span class="line">        146178119651438213260386312206974243796773058,</span><br><span class="line">        236521166007575960984144537828161815236311727,</span><br><span class="line">        382699285659014174244530850035136059033084785,</span><br><span class="line">        619220451666590135228675387863297874269396512,</span><br><span class="line">        1001919737325604309473206237898433933302481297,</span><br><span class="line">        1621140188992194444701881625761731807571877809,</span><br><span class="line">        2623059926317798754175087863660165740874359106,</span><br><span class="line">        4244200115309993198876969489421897548446236915,</span><br><span class="line">        6867260041627791953052057353082063289320596021,</span><br><span class="line">        11111460156937785151929026842503960837766832936,</span><br><span class="line">        17978720198565577104981084195586024127087428957,</span><br><span class="line">        29090180355503362256910111038089984964854261893,</span><br><span class="line">        47068900554068939361891195233676009091941690850,</span><br><span class="line">        76159080909572301618801306271765994056795952743,</span><br><span class="line">        123227981463641240980692501505442003148737643593,</span><br><span class="line">        199387062373213542599493807777207997205533596336,</span><br><span class="line">        322615043836854783580186309282650000354271239929,</span><br><span class="line">        522002106210068326179680117059857997559804836265,</span><br><span class="line">        844617150046923109759866426342507997914076076194,</span><br><span class="line">        1366619256256991435939546543402365995473880912459,</span><br><span class="line">        2211236406303914545699412969744873993387956988653,</span><br><span class="line">        3577855662560905981638959513147239988861837901112,</span><br><span class="line">        5789092068864820527338372482892113982249794889765,</span><br><span class="line">        9366947731425726508977331996039353971111632790877,</span><br><span class="line">        15156039800290547036315704478931467953361427680642,</span><br><span class="line">        24522987531716273545293036474970821924473060471519,</span><br><span class="line">        39679027332006820581608740953902289877834488152161,</span><br><span class="line">        64202014863723094126901777428873111802307548623680,</span><br><span class="line">        103881042195729914708510518382775401680142036775841,</span><br><span class="line">        168083057059453008835412295811648513482449585399521,</span><br><span class="line">        271964099255182923543922814194423915162591622175362,</span><br><span class="line">        440047156314635932379335110006072428645041207574883,</span><br><span class="line">        712011255569818855923257924200496343807632829750245,</span><br><span class="line">        1152058411884454788302593034206568772452674037325128,</span><br><span class="line">        1864069667454273644225850958407065116260306867075373,</span><br><span class="line">        3016128079338728432528443992613633888712980904400501,</span><br><span class="line">        4880197746793002076754294951020699004973287771475874,</span><br><span class="line">        ]</span><br><span class="line">    return offer[n] #这个函数是没问题的，可以直接返回，共250位斐波那契数</span><br></pre></td></tr></table></figure><p>计算出来，用的时候直接返回是最快的，面试时n不超过30的。最后一种看起来傻，但实际用得多。计算机里实际运用的就是这么干的。一个定理，若是被证明了，直接计算出数保存，用的时候返回就是最好的，谁还拿机器去算呐，无法确定的需要机器算，确定的值直接用不就好了吗？比如第13个梅森素数是多少？是不是要CPU去跑？肯定不会啊，算出足够多的素数，保存成表，用的时候返回，多省事儿啊！傻了吧叽的算，别人孩子都两岁了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/08/UE1Wad.png&quot; alt=&quot;recursion&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.shieber.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Algorithm" scheme="http://www.shieber.cn/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s Go</title>
    <link href="http://www.shieber.cn/title/23e3bd3/"/>
    <id>http://www.shieber.cn/title/23e3bd3/</id>
    <published>2020-07-01T13:29:05.000Z</published>
    <updated>2020-08-19T09:01:17.837Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/01/NHF7on.png" alt="gopher"></p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Go这门语言，感觉有很多特性和Python一样，但又有很多特性和C一样。Go语言借鉴了许多其他语言的优秀用法。</p><p>Go由Google推出，主要开发者是贝尔实验室的大佬们(Rob Pike, Robert Griesemer, Ken Thompson)。</p><p>开发的目的主要是解决C++编译时间长的问题。Go于2009年11月正式推出第一个版本，到如今快11年了。而这十余年来，Go也逐渐火了起来。</p><h2 id="Go的几大优点"><a href="#Go的几大优点" class="headerlink" title="Go的几大优点"></a>Go的几大优点</h2><blockquote><p>1.简洁<br>2.速度接近C<br>3.原生并发非常好<br>4.对网络支持很好<br>5.文档支持也不错   </p></blockquote><h2 id="Go的几大特性"><a href="#Go的几大特性" class="headerlink" title="Go的几大特性"></a>Go的几大特性</h2><blockquote><p>1.反射<br>2.defer<br>3.工程化<br>4.错误处理<br>5.通道概念<br>6.goroutine<br>7.垃圾收集器GC<br>8.包机制(类似python)</p></blockquote><h2 id="Go的重要数据类型"><a href="#Go的重要数据类型" class="headerlink" title="Go的重要数据类型"></a>Go的重要数据类型</h2><blockquote><p>1.complex<br>2.string<br>3.slice<br>4.map<br>5.chan<br>6.interface  </p></blockquote><h2 id="Go的应用领域"><a href="#Go的应用领域" class="headerlink" title="Go的应用领域"></a>Go的应用领域</h2><blockquote><p>1.Web<br>2.分布式<br>3.中间件<br>4.服务器<br>5.数据库<br>6.网络编程<br>7.图像处理<br>8.游戏引擎  </p></blockquote><p>Go的重要产品Docker和Kubernetes，基本上大的互联网公司都在使用Go和Docker，微服务的实践因Docker和Kubernetes而火了起来。</p><p>目前云是热点，而Go天生的网络能力，使得Go成了云上的C语言。感觉未来的物联网时代，Go还会大放异彩。Go再许多方面超过了Java，又能接下许多C/C++的工作，能力是毋庸置疑的。</p><p>现在学习Go正是时候，Let’s Go!</p><p><img src="https://s1.ax1x.com/2020/07/01/NHuPxI.png" alt="golearn"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/01/NHF7on.png&quot; alt=&quot;gopher&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>国内软件源</title>
    <link href="http://www.shieber.cn/title/39893abb/"/>
    <id>http://www.shieber.cn/title/39893abb/</id>
    <published>2020-06-29T02:37:53.000Z</published>
    <updated>2020-07-23T08:18:27.224Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/29/NWW8LF.png" alt="sources-list"></p><a id="more"></a><p>Linux系统安装软件，尤其是国外软件特别麻烦，因为GFW的封锁，很多软件下载安装速度简直是龟速。好在国内各大公司，机构还备有软件源，我们可以利用国内源加快下载速度。</p><h2 id="常见的国内源"><a href="#常见的国内源" class="headerlink" title="常见的国内源"></a>常见的国内源</h2><table><thead><tr><th align="left">机构</th><th align="left">源主地址</th></tr></thead><tbody><tr><td align="left">阿里云</td><td align="left"><a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></td></tr><tr><td align="left">网易</td><td align="left"><a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a></td></tr><tr><td align="left">华为</td><td align="left"><a href="http://mirrors.huaweicloud.com/" target="_blank" rel="noopener">http://mirrors.huaweicloud.com/</a></td></tr><tr><td align="left">搜狐</td><td align="left"><a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a></td></tr><tr><td align="left">清华</td><td align="left"><a href="http://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/</a></td></tr><tr><td align="left">中科大</td><td align="left"><a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/</a></td></tr></tbody></table><h2 id="如何设置呢"><a href="#如何设置呢" class="headerlink" title="如何设置呢?"></a>如何设置呢?</h2><p>找到软件更新器，点击进去是如下界面。</p><p><img src="https://s1.ax1x.com/2020/06/29/NWWxyT.png" alt="sources-list"></p><p>在<strong>下载自</strong>处点击，进去找China或者中国，点开下面就是国内可用的源了，选择一个，然后确认，接着会显示过期了，点更新。</p><p><img src="https://s1.ax1x.com/2020/06/29/NWW8LF.png" alt="sources-list"></p><p>接着是处理/etc/apt/sources.list内容。</p><p>首先备份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.back</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>加入如下内容</p><p>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-security universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-security multiverse  </p><p>最后更新    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update   </span><br><span class="line">$ sudo apt upgrade</span><br></pre></td></tr></table></figure><p>现在安装软件速度就快了，可以试试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install xxx</span><br></pre></td></tr></table></figure><h2 id="加入其他源"><a href="#加入其他源" class="headerlink" title="加入其他源"></a>加入其他源</h2><p>若要安装其他软件，可以自行添加对应源，比如要安装docker<br>deb [arch=amd64] <a href="http://download.docker.com/linux/ubuntu" target="_blank" rel="noopener">http://download.docker.com/linux/ubuntu</a> bionic stable  </p><p><strong>注意：</strong>bionic是ubuntu18.04的代号，若是16.04和20.04就需要更换为对应的xenial及focal。上面的阿里云源的bionic也对应更换。比如20.04是如下</p><p>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-updates main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-updates universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-updates multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-security main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-security universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-security multiverse  </p><h2 id="若软件不在源-ubuntu下，如何处理？"><a href="#若软件不在源-ubuntu下，如何处理？" class="headerlink" title="若软件不在源/ubuntu下，如何处理？"></a>若软件不在源/ubuntu下，如何处理？</h2><p>用阿里云的源，比如deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a>  结尾是/ubuntu/，那么只有ubuntu加入了官方软件仓库的软件才能命令行一行代码下载，可有的是没有加入/ubuntu仓库的，如何解决？</p><p>其实也很间单，没加入/ubuntu/，说不定阿里云源或者其他源单独准备了。比如安装Rust可用中科大的源<br><a href="http://mirrors.ustc.edu.cn/rust-static/rustup" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/rust-static/rustup</a> 这个源是可以用的。</p><h2 id="若各个源都没有，只能安装外网的软件怎么办？"><a href="#若各个源都没有，只能安装外网的软件怎么办？" class="headerlink" title="若各个源都没有，只能安装外网的软件怎么办？"></a>若各个源都没有，只能安装外网的软件怎么办？</h2><p>这种情况我遇到过一次，而且是被封的软件。解决办法很间单：翻墙。</p><p>如果能找到代理ip，就可以用代理ip在命令行翻墙下载。</p><p>具体操作<br>1.网上(或自己的)找一个代理Ip<br>2.按照如下格式下载安装xxx软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install xxx -o Acquire::http::proxy=&quot;http://190.103.178.14:8080&quot;   #http协议</span><br><span class="line">$ sudo apt install xxx -o Acquire::https::proxy=&quot;https://190.103.178.14:8080&quot; #https协议</span><br></pre></td></tr></table></figure><p>注意端口不一定是8080，协议也不一定是https，上面Ip是随意写的，你需要自己找一个可用的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/06/29/NWW8LF.png&quot; alt=&quot;sources-list&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="http://www.shieber.cn/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="software" scheme="http://www.shieber.cn/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>100本西方元典书籍(metabook)</title>
    <link href="http://www.shieber.cn/title/7ba15624/"/>
    <id>http://www.shieber.cn/title/7ba15624/</id>
    <published>2020-06-29T02:17:57.000Z</published>
    <updated>2020-07-24T04:14:22.062Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/29/NWagmV.png" alt="metabook"></p><a id="more"></a><h1 id="100本值得读的西方元典书籍-metabook"><a href="#100本值得读的西方元典书籍-metabook" class="headerlink" title="100本值得读的西方元典书籍(metabook)"></a>100本值得读的西方元典书籍(metabook)</h1><p>前段时间整理了<a href="https://blog.csdn.net/Shieber/article/details/89295299" target="_blank" rel="noopener">一百本中华元典书籍</a>，今日顺便把值得读的100本西方元典书籍补上。还是那个观点，先读基本书籍，才能对西方的文明有深入了解，我自己也得按照这份书单来学习，西方元典大概也是按照朝代列出。</p><p><a id="download" href="https://github.com/QMHTMY/Ebooks/blob/master/%E5%85%83%E5%85%B8%E4%B9%A6%E7%B1%8D.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>100本元典书籍PDF文件下载</span></a></p><table><thead><tr><th align="left">书名</th><th align="left">作者</th></tr></thead><tbody><tr><td align="left">《圣经和合本》</td><td align="left">众信徒</td></tr><tr><td align="left">《古兰经》</td><td align="left">奥托曼</td></tr><tr><td align="left">《奥德赛》</td><td align="left">荷马</td></tr><tr><td align="left">《伊利亚特》</td><td align="left">荷马</td></tr><tr><td align="left">《伯罗奔尼撒战争史》</td><td align="left">修昔底德</td></tr><tr><td align="left">《对话录》</td><td align="left">柏拉图</td></tr><tr><td align="left">《申辩篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《克力同篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《政治家篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《法律篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《会饮篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《理想国》</td><td align="left">柏拉图</td></tr><tr><td align="left">《诗学》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《论灵魂》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《修辞学》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《物理学》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《工具论》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《形而上学》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《论世界》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《论人》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《方法论》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《几何学》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《哲学原理》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《乌托邦》</td><td align="left">托马斯·莫尔</td></tr><tr><td align="left">《自然哲学的数学原理》</td><td align="left">牛顿</td></tr><tr><td align="left">《拉摩的侄儿》</td><td align="left">狄德罗</td></tr><tr><td align="left">《修女》</td><td align="left">狄德罗</td></tr><tr><td align="left">《定命论者雅克和他的主人》</td><td align="left">狄德罗</td></tr><tr><td align="left">《狄德罗哲学选集》</td><td align="left">狄德罗</td></tr><tr><td align="left">《政府论》</td><td align="left">洛克</td></tr><tr><td align="left">《人生论》</td><td align="left">培根</td></tr><tr><td align="left">《新工具》</td><td align="left">培根</td></tr><tr><td align="left">《培根随笔集》</td><td align="left">培根</td></tr><tr><td align="left">《人类知识原理》</td><td align="left">貝克萊</td></tr><tr><td align="left">《西利斯》</td><td align="left">貝克萊</td></tr><tr><td align="left">《海拉斯与斐洛斯对话三篇》</td><td align="left">貝克萊</td></tr><tr><td align="left">《哈姆雷特》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《罗密欧与朱丽叶》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《仲夏夜之梦》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《威尼斯商人》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《李尔王》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《麦克白》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《纯粹理性批评》</td><td align="left">康德</td></tr><tr><td align="left">《实践理性批评》</td><td align="left">康德</td></tr><tr><td align="left">《判断力批判》</td><td align="left">康德</td></tr><tr><td align="left">《逻辑学讲义》</td><td align="left">康德</td></tr><tr><td align="left">《论美感和崇高感》</td><td align="left">康德</td></tr><tr><td align="left">《历史理性批判文集》</td><td align="left">康德</td></tr><tr><td align="left">《法的形而上学原理》</td><td align="left">康德</td></tr><tr><td align="left">《小逻辑》</td><td align="left">黑格尔</td></tr><tr><td align="left">《精神现象学》</td><td align="left">黑格尔</td></tr><tr><td align="left">《逻辑学》</td><td align="left">黑格尔</td></tr><tr><td align="left">《历史哲学》</td><td align="left">黑格尔</td></tr><tr><td align="left">《美学》</td><td align="left">黑格尔</td></tr><tr><td align="left">《法哲学原理》</td><td align="left">黑格尔</td></tr><tr><td align="left">《哲学史演讲录》</td><td align="left">黑格尔</td></tr><tr><td align="left">《少年威特的烦恼》</td><td align="left">歌德</td></tr><tr><td align="left">《浮士德》</td><td align="left">歌德</td></tr><tr><td align="left">《葛朗台》</td><td align="left">巴尔扎克</td></tr><tr><td align="left">《高老头》</td><td align="left">巴尔扎克</td></tr><tr><td align="left">《人间喜剧幻灭》</td><td align="left">巴尔扎克</td></tr><tr><td align="left">《 驴皮记》</td><td align="left">巴尔扎克</td></tr><tr><td align="left">《安娜·卡列尼娜》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《战争与和平》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《复活》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《伊凡·伊里奇之死》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《托尔斯泰忏悔录》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《童年》</td><td align="left">高尔基</td></tr><tr><td align="left">《在人间》</td><td align="left">高尔基</td></tr><tr><td align="left">《我的大学》</td><td align="left">高尔基</td></tr><tr><td align="left">《母亲》</td><td align="left">高尔基</td></tr><tr><td align="left">《巴黎圣母院》</td><td align="left">雨果</td></tr><tr><td align="left">《悲惨世界》</td><td align="left">雨果</td></tr><tr><td align="left">《笑面人》</td><td align="left">雨果</td></tr><tr><td align="left">《九三年》</td><td align="left">雨果</td></tr><tr><td align="left">《论人类不平等的起源和基础》</td><td align="left">卢梭</td></tr><tr><td align="left">《社会契约论》</td><td align="left">卢梭</td></tr><tr><td align="left">《致希罗多德信》</td><td align="left">伊壁鸠鲁</td></tr><tr><td align="left">《神曲》</td><td align="left">但丁</td></tr><tr><td align="left">《君主论》</td><td align="left">马基雅弗利</td></tr><tr><td align="left">《牧歌》</td><td align="left">维吉尔</td></tr><tr><td align="left">《罗马史》</td><td align="left">李维</td></tr><tr><td align="left">《达芬奇笔记》</td><td align="left">达芬奇</td></tr><tr><td align="left">《随笔集》</td><td align="left">蒙田</td></tr><tr><td align="left">《堂吉诃德》</td><td align="left">塞万提斯</td></tr><tr><td align="left">《莎士比亚全集》</td><td align="left">莎士比亚</td></tr><tr><td align="left">《关于两门新科学的对话》</td><td align="left">伽利略</td></tr><tr><td align="left">《利维坦》</td><td align="left">托马斯·霍布斯</td></tr><tr><td align="left">《国富论》</td><td align="left">亚当·斯密</td></tr><tr><td align="left">《道德情操论》</td><td align="left">亚当·斯密</td></tr><tr><td align="left">《罗马帝国的衰亡》</td><td align="left">爱德华·吉本</td></tr><tr><td align="left">《傲慢与偏见》</td><td align="left">奥斯汀</td></tr><tr><td align="left">《红与黑》</td><td align="left">司汤达</td></tr><tr><td align="left">《意志和表象的世界》</td><td align="left">叔本华</td></tr><tr><td align="left">《卡拉马佐夫兄弟》</td><td align="left">陀思妥耶夫斯基</td></tr><tr><td align="left">《包法利夫人》</td><td align="left">福楼拜</td></tr><tr><td align="left">《战争与和平》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《安娜·卡列尼娜》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《梦的解析》</td><td align="left">弗洛伊德</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献            "></a>参考文献            </h2><p>《如何阅读一本书》–莫提默</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/06/29/NWagmV.png&quot; alt=&quot;metabook&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://www.shieber.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="book" scheme="http://www.shieber.cn/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>100本中国元典书籍(metabook)</title>
    <link href="http://www.shieber.cn/title/53658772/"/>
    <id>http://www.shieber.cn/title/53658772/</id>
    <published>2020-06-29T01:54:33.000Z</published>
    <updated>2020-06-29T02:13:00.513Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/29/NWNXDK.png" alt="metabook"></p><a id="more"></a><h1 id="100本中国元典书籍-metabook"><a href="#100本中国元典书籍-metabook" class="headerlink" title="100本中国元典书籍(metabook) "></a>100本中国元典书籍(metabook) </h1><p>任何的书籍都是建立在一定的基础之上，而有些书籍却属于开宗立派，故而它们的价值极为的重大，这些书籍我称之为元典书籍(metabook)。metabook这个单词是我造的，依据是形而上学这个单词metaphysics。metaphysics原指亚里士多德的哲学著作被放在其自然科学著作后面，有之后的意思，引申为更基本，在之上的意思，哲学就是形而上的。形而上学这个中文词汇来自于《易经》：形而上者谓之道，形而下者谓之器 —《易经・系辞》[1]。元，意味着其独一无二，不可替代。有的时候读书，常看到别人引用一段古文或是圣经词句，但是我们自己是不知道的，只有看作者如何解释，而作者的理解不一定对。所以读书先读元典书籍，再看今天的人写的书，就会感到通透彻底，读起来才能体会作者的真正意图。金克木老先生在其《书读完了》一书中提倡的正是此法：先读基本书籍，也就是元典书籍，花个三冬的时间，人文历史就基本够了。</p><p>写到这里，我突然想起北京大学通识教育经典名著阅读计划中将文艺复兴以降的科学经典著作称为科学元典，以和经典相区别。我这里说的元典和科学元典不同，科学元典只是为了区别科学和人文，而metabook是为了表明书的特殊地位，价值，并不分科学人文。我希望这个单词和中文词汇能得到广泛使用，进而推动百姓读书，学知识，长见识，扬文化，做真人。本文只按朝代列出了中国元典。</p><p><a id="download" href="https://github.com/QMHTMY/Ebooks/blob/master/%E5%85%83%E5%85%B8%E4%B9%A6%E7%B1%8D.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>100本元典书籍PDF文件下载</span></a></p><table><thead><tr><th align="left">书名</th><th align="center">年代</th><th align="center">作者</th><th align="left">评价</th></tr></thead><tbody><tr><td align="left">《周易》</td><td align="center">殷商</td><td align="center">佚名</td><td align="left">中华文化之本源</td></tr><tr><td align="left">《道德经》</td><td align="center">春秋</td><td align="center">老子</td><td align="left">道学之精髓哲学之先本</td></tr><tr><td align="left">《论语》</td><td align="center">春秋</td><td align="center">孔子</td><td align="left">儒家文化之起源</td></tr><tr><td align="left">《左转》</td><td align="center">春秋</td><td align="center">左丘明</td><td align="left">中国史学叙事传统的奠基之作</td></tr><tr><td align="left">《诗经》</td><td align="center">春秋</td><td align="center">佚名</td><td align="left">中国最早的诗歌总集</td></tr><tr><td align="left">《尚书》</td><td align="center">春秋</td><td align="center">佚名</td><td align="left">中国现存最早的散文总集</td></tr><tr><td align="left">《孙子兵法》</td><td align="center">春秋</td><td align="center">孙武</td><td align="left">世界现存最早的兵家圣典</td></tr><tr><td align="left">《鬼谷子》</td><td align="center">春秋</td><td align="center">鬼谷子</td><td align="left">研究纵横捭阖之术的千古奇书</td></tr><tr><td align="left">《夏小正》</td><td align="center">春秋</td><td align="center">佚名</td><td align="left">中国现存最早的农事历书</td></tr><tr><td align="left">《黄帝内经》</td><td align="center">春秋</td><td align="center">佚名</td><td align="left">中国现存最早的医学典籍</td></tr><tr><td align="left">《墨子》</td><td align="center">战国</td><td align="center">墨子</td><td align="left">古代劳动者的哲学圣经</td></tr><tr><td align="left">《孟子》</td><td align="center">战国</td><td align="center">孟子</td><td align="left">剖析仁爱精髓的亚圣之书</td></tr><tr><td align="left">《庄子》</td><td align="center">战国</td><td align="center">庄子</td><td align="left">彰显道家浪漫主义思想的巨著</td></tr><tr><td align="left">《荀子》</td><td align="center">战国</td><td align="center">荀子</td><td align="left">以儒家为本，兼采百家之长</td></tr><tr><td align="left">《韩非子》</td><td align="center">战国</td><td align="center">韩非</td><td align="left">先秦法家学说集大成之作</td></tr><tr><td align="left">《吕氏春秋》</td><td align="center">战国</td><td align="center">吕不韦</td><td align="left">兼容并蓄的杂家经典</td></tr><tr><td align="left">《国语》</td><td align="center">战国</td><td align="center">佚名</td><td align="left">中国现存最早的国别体专著</td></tr><tr><td align="left">《孙膑兵法》</td><td align="center">战国</td><td align="center">孙膑</td><td align="left">战国兵书之杰</td></tr><tr><td align="left">《商君书》</td><td align="center">战国</td><td align="center">商鞅</td><td align="left">集中体现法家军政思想的专著</td></tr><tr><td align="left">《六韬》</td><td align="center">战国</td><td align="center">佚名</td><td align="left">开兵家权谋之先河</td></tr><tr><td align="left">《山海经》</td><td align="center">先秦</td><td align="center">佚名</td><td align="left">中国古代神话小说的本源</td></tr><tr><td align="left">《战国策》</td><td align="center">西汉</td><td align="center">刘向</td><td align="left">战国政治斗争最完整的文献记录</td></tr><tr><td align="left">《三略》</td><td align="center">西汉</td><td align="center">佚名</td><td align="left">中国第一部专述战略的兵书</td></tr><tr><td align="left">《九章算术》</td><td align="center">西汉</td><td align="center">佚名</td><td align="left">中国古代数学形成完整体系的标志</td></tr><tr><td align="left">《周髀算经》</td><td align="center">西汉</td><td align="center">佚名</td><td align="left">中国现存最早的天文算法类专著</td></tr><tr><td align="left">《淮南子》</td><td align="center">西汉</td><td align="center">刘安</td><td align="left">以道学为基，兼合百家之长</td></tr><tr><td align="left">《史记》</td><td align="center">西汉</td><td align="center">司马迁</td><td align="left">中国历史上第一部纪传体通史</td></tr><tr><td align="left">《楚辞》</td><td align="center">西汉</td><td align="center">刘向</td><td align="left">中国第一部浪漫主义诗歌总集</td></tr><tr><td align="left">《论衡》</td><td align="center">东汉</td><td align="center">王充</td><td align="left">中国历史上不朽的无神论著作</td></tr><tr><td align="left">《汉书》</td><td align="center">东汉</td><td align="center">班固</td><td align="left">中国历史上第一部纪传断代史</td></tr><tr><td align="left">《说文解字》</td><td align="center">东汉</td><td align="center">许慎</td><td align="left">中国首部以部首编排的字典</td></tr><tr><td align="left">《伤寒杂病论》</td><td align="center">东汉</td><td align="center">张仲景</td><td align="left">中医学方书鼻祖</td></tr><tr><td align="left">《三国志》</td><td align="center">西晋</td><td align="center">陈寿</td><td align="left">三国并叙的断代专著</td></tr><tr><td align="left">《后汉书》</td><td align="center">西晋</td><td align="center">范晔</td><td align="left">专注于东汉史的纪传体著作</td></tr><tr><td align="left">《抱朴子》</td><td align="center">东晋</td><td align="center">葛洪</td><td align="left">构建道教神仙理论体系的巨著</td></tr><tr><td align="left">《搜神记》</td><td align="center">东晋</td><td align="center">干宝</td><td align="left">中国笔记体志怪小说之鼻祖</td></tr><tr><td align="left">《华阳国志》</td><td align="center">东晋</td><td align="center">常璩</td><td align="left">中国现存最早的地方志专著</td></tr><tr><td align="left">《陶渊明集》</td><td align="center">东晋</td><td align="center">陶渊明</td><td align="left">开田园风光先河的诗文总集</td></tr><tr><td align="left">《文心雕龙》</td><td align="center">南朝</td><td align="center">刘勰</td><td align="left">中国古代最系统的文学理论专著</td></tr><tr><td align="left">《文选》</td><td align="center">南朝</td><td align="center">萧统</td><td align="left">中国现存最早的诗文选集</td></tr><tr><td align="left">《世说新语》</td><td align="center">南朝</td><td align="center">刘义庆</td><td align="left">南北朝志人小说代表作</td></tr><tr><td align="left">《洛阳伽蓝记》</td><td align="center">北朝</td><td align="center">杨炫之</td><td align="left">中国历史上唯一一部记述城市寺院的专著</td></tr><tr><td align="left">《水经注》</td><td align="center">北朝</td><td align="center">郦道元</td><td align="left">集六朝地志之大成</td></tr><tr><td align="left">《齐民要术》</td><td align="center">北朝</td><td align="center">贾思勰</td><td align="left">世界最早最系统的农业科学专著</td></tr><tr><td align="left">《史通》</td><td align="center">唐代</td><td align="center">刘知几</td><td align="left">中国现存最早的史学理论专著</td></tr><tr><td align="left">《大唐西域记》</td><td align="center">唐代</td><td align="center">玄奘</td><td align="left">中世纪中南亚地区最权威的史地文献</td></tr><tr><td align="left">《李太白集》</td><td align="center">唐代</td><td align="center">李白</td><td align="left">将浪漫主义推向极致的诗歌集</td></tr><tr><td align="left">《杜工部集》</td><td align="center">唐代</td><td align="center">杜甫</td><td align="left">中国古典诗歌现实主义高峰</td></tr><tr><td align="left">《昌黎先生集》</td><td align="center">唐代</td><td align="center">韩愈</td><td align="left">文起八代之衰的典范之作</td></tr><tr><td align="left">《河东先生集》</td><td align="center">唐代</td><td align="center">柳宗元</td><td align="left">寄意山水的古代散文经典</td></tr><tr><td align="left">《贞观政要》</td><td align="center">唐代</td><td align="center">吴兢</td><td align="left">反映贞观之治的政论专著</td></tr><tr><td align="left">《唐律疏议》</td><td align="center">唐代</td><td align="center">长孙无忌</td><td align="left">中国最早最完整的刑事法典</td></tr><tr><td align="left">《千金方》</td><td align="center">唐代</td><td align="center">孙思邈</td><td align="left">确立中医学分科的百代之师</td></tr><tr><td align="left">《开元占经》</td><td align="center">唐代</td><td align="center">瞿昙悉达</td><td align="left">中国古代占星术大全</td></tr><tr><td align="left">《茶经》</td><td align="center">唐代</td><td align="center">陆羽</td><td align="left">世界上第一部茶文化专著</td></tr><tr><td align="left">《虬髯客传》</td><td align="center">五代</td><td align="center">杜光庭</td><td align="left">开创古典武侠小说之先河</td></tr><tr><td align="left">《资治通鉴》</td><td align="center">北宋</td><td align="center">司马光</td><td align="left">中国历史上第一部编年体通史</td></tr><tr><td align="left">《欧阳文忠公集》</td><td align="center">北宋</td><td align="center">欧阳修</td><td align="left">北宋文坛的奠基之作</td></tr><tr><td align="left">《苏轼集》</td><td align="center">北宋</td><td align="center">苏轼</td><td align="left">豪放派诗词的巅峰之作</td></tr><tr><td align="left">《乐府诗集》</td><td align="center">北宋</td><td align="center">郭茂倩</td><td align="left">中国现存最早的最完备的乐府诗总集</td></tr><tr><td align="left">《乐章集》</td><td align="center">北宋</td><td align="center">柳永</td><td align="left">雅俗并收、尽显才情风流</td></tr><tr><td align="left">《太平广记》</td><td align="center">北宋</td><td align="center">李昉</td><td align="left">中国现存卷帙最长的古典小说集</td></tr><tr><td align="left">《梦溪笔谈》</td><td align="center">北宋</td><td align="center">沈括</td><td align="left">中国古代笔记体百科全书</td></tr><tr><td align="left">《漱玉词》</td><td align="center">南宋</td><td align="center">李清照</td><td align="left">清丽婉约、辞情相称的词中上品</td></tr><tr><td align="left">《稼轩长短句》</td><td align="center">南宋</td><td align="center">辛弃疾</td><td align="left">豪迈不失细腻，词收两宋之冠</td></tr><tr><td align="left">《洗冤集录》</td><td align="center">南宋</td><td align="center">宋慈</td><td align="left">世界上最早的法医学专著</td></tr><tr><td align="left">《窦娥冤》</td><td align="center">元代</td><td align="center">关汉卿</td><td align="left">中国古代悲剧的代表作</td></tr><tr><td align="left">《西厢记》</td><td align="center">元代</td><td align="center">王实甫</td><td align="left">中国古代戏剧的现实主义杰作</td></tr><tr><td align="left">《墙头马上》</td><td align="center">元代</td><td align="center">白朴</td><td align="left">中国古代经典爱情喜剧</td></tr><tr><td align="left">《汉宫秋》</td><td align="center">元代</td><td align="center">马致远</td><td align="left">颠覆历史的现实主义悲剧杰作</td></tr><tr><td align="left">《唐才子传》</td><td align="center">元代</td><td align="center">辛文房</td><td align="left">唐五代诗人评传汇集</td></tr><tr><td align="left">《三国演义》</td><td align="center">明初</td><td align="center">罗贯中</td><td align="left">中国章回体历史小说的开山之作</td></tr><tr><td align="left">《水浒传》</td><td align="center">明初</td><td align="center">施耐庵</td><td align="left">中国古代英雄英雄传奇小说之典范</td></tr><tr><td align="left">《传习录》</td><td align="center">明代</td><td align="center">王阳明</td><td align="left">宋明心学集大成之作</td></tr><tr><td align="left">《徐霞客游记》</td><td align="center">明代</td><td align="center">徐霞客</td><td align="left">中国最早的日记体游记专著</td></tr><tr><td align="left">《西游记》</td><td align="center">明代</td><td align="center">吴承恩</td><td align="left">色彩纷呈的浪漫主义神</td></tr><tr><td align="left">《牡丹亭》</td><td align="center">明代</td><td align="center">汤显祖</td><td align="left">中国戏曲史上浪漫主义杰作</td></tr><tr><td align="left">《封神演义》</td><td align="center">明代</td><td align="center">陈仲琳</td><td align="left">幻想奇特的神魔小说</td></tr><tr><td align="left">《三言》</td><td align="center">明代</td><td align="center">冯梦龙</td><td align="left">中国白话短篇小说的杰出代表</td></tr><tr><td align="left">《二拍》</td><td align="center">明代</td><td align="center">凌濛初</td><td align="left">中国首部文人独立创作的短篇小说集</td></tr><tr><td align="left">《本草纲目》</td><td align="center">明代</td><td align="center">李时珍</td><td align="left">东方中医药学百科巨典</td></tr><tr><td align="left">《农政全书》</td><td align="center">明代</td><td align="center">徐光启</td><td align="left">采集百家之长的农业百科全书</td></tr><tr><td align="left">《天工开物》</td><td align="center">明代</td><td align="center">宋应星</td><td align="left">世界上第一部工农业综合性著作</td></tr><tr><td align="left">《三十六计》</td><td align="center">清初</td><td align="center">佚名</td><td align="left">汇集兵家奇谋方略之杰作</td></tr><tr><td align="left">《明夷待访录》</td><td align="center">清初</td><td align="center">黄宗羲</td><td align="left">呼唤民主政体的思想启蒙专著</td></tr><tr><td align="left">《日知录》</td><td align="center">清初</td><td align="center">顾炎武</td><td align="left">中国近代思想启蒙的基石</td></tr><tr><td align="left">《海国图志》</td><td align="center">清代</td><td align="center">魏源</td><td align="left">中国近代史上第一部系统的世界地理著作</td></tr><tr><td align="left">《古文观止》</td><td align="center">清代</td><td align="center">吴楚才</td><td align="left">中国古文选本之最</td></tr><tr><td align="left">《纳兰词》</td><td align="center">清代</td><td align="center">纳兰性德</td><td align="left">哀感顽艳，颇有南唐后主遗风</td></tr><tr><td align="left">《长生殿》</td><td align="center">清代</td><td align="center">洪升</td><td align="left">震惊清初剧坛的传奇之作</td></tr><tr><td align="left">《聊斋志异》</td><td align="center">清代</td><td align="center">蒲松龄</td><td align="left">刺贪刺虐入木三分</td></tr><tr><td align="left">《桃花扇》</td><td align="center">清代</td><td align="center">孔尚任</td><td align="left">中国首部反映南明消亡的历史剧</td></tr><tr><td align="left">《儒林外史》</td><td align="center">清代</td><td align="center">吴敬梓</td><td align="left">中国古代讽刺小说中的圣品</td></tr><tr><td align="left">《红楼梦》</td><td align="center">清代</td><td align="center">曹雪芹</td><td align="left">中国古典小说史上的巅峰巨作</td></tr><tr><td align="left">《海上花列传》</td><td align="center">清代</td><td align="center">韩邦庆</td><td align="left">中国文学史上第一部方言小说</td></tr><tr><td align="left">《老残游记》</td><td align="center">清代</td><td align="center">刘鹗</td><td align="left">清末谴责小说的杰出代表</td></tr><tr><td align="left">《孔子改制考》</td><td align="center">清代</td><td align="center">康有为</td><td align="left">轰动晚晴思想界的变法理论专著</td></tr><tr><td align="left">《呐喊》</td><td align="center">现代</td><td align="center">鲁迅</td><td align="left">中国现代白话文小说的起点</td></tr><tr><td align="left">《朝花夕拾》</td><td align="center">现代</td><td align="center">鲁迅</td><td align="left">从往事中抄来的记忆</td></tr><tr><td align="left">《背影》</td><td align="center">现代</td><td align="center">朱自清</td><td align="left">天地间第一等至情文学</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献                           "></a>参考文献                           </h2><p>[1]《符号学导论》，黄华新。       </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/06/29/NWNXDK.png&quot; alt=&quot;metabook&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://www.shieber.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="book" scheme="http://www.shieber.cn/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>国产统一操作系统UOS</title>
    <link href="http://www.shieber.cn/title/7aceb1f4/"/>
    <id>http://www.shieber.cn/title/7aceb1f4/</id>
    <published>2020-06-29T01:40:29.000Z</published>
    <updated>2020-06-29T01:49:19.130Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200111132834618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="uos-cover"></p><a id="more"></a><p>前段时间国产操作系统UOS(Unity Operating System)释出，最近用虚拟机试了试。总体来说，操作流畅，符合国人习惯。UOS内置中文输入法和各类便捷工具，大大方便用户工作。</p><p>UOS是由中兴，电子集团，深之度科技等联合开发的一款国产Linux发行版，使用过Linux很快就能上手。UOS默认是没有root权限的，要登录帐号以开启，这和Ubuntu之类默认带root功能的发行版不同。UOS主体应该就是Deepin系统，软件安装方式则延续Debian系列的apt-get install方式。</p><p>UOS发布的时间表(2019)：<br>10月15日：面向BIOS、CPU、整机和ODM厂商，发布龙芯、华为、飞腾、兆芯、海光五个平台的桌面和服务器UOS alpha测试版本。该版本主要功能和用户交互基本完成，存在比较明显的细节缺失和bug，但可以开展面向指定CPU型号的适配验证。<br>11月10日：发布Alpha2版本，增加对申威、海光架构版本的支持。Alpha2版本将面向安全厂商、应用厂商开发，用于进行底层安全检查；软件应用厂商可以开始基本适配测试。<br>11月30日：合并新的功能代码，并修复alpha版本发现的问题。发布beta版本，各软件厂商可以针对该版本进行正式适配。<br>12月15日：发布RC版本，代码冻结，进入正式版本发布前的bug修复阶段。<br>12月31日：如基于RC版本的修复版本通过质量测试，则发布FINAL正式版本。  </p><h2 id="界面和功能欣赏"><a href="#界面和功能欣赏" class="headerlink" title="界面和功能欣赏"></a>界面和功能欣赏</h2><p>安装界面有各种语言可选择，包括台湾和港澳的繁体及正体中文。  </p><p><img src="https://img-blog.csdnimg.cn/20200111132945302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="install"></p><p>安装时间不长。</p><p><img src="https://img-blog.csdnimg.cn/20200111133009228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="install1"></p><p>开机界面，似乎Deepin默认就是这个，极光挺美的。</p><p><img src="https://img-blog.csdnimg.cn/20200111133028590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="login"></p><p>登录界面的图片可设置。</p><p><img src="https://img-blog.csdnimg.cn/20200111133043807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="login1"></p><p>自带的壁纸很好，我这里选用了一张必应壁纸。</p><p><img src="https://img-blog.csdnimg.cn/2020011113311328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="wallpaper"></p><p>界面和Windows很像，符合国人的习惯。  </p><p><img src="https://img-blog.csdnimg.cn/20200111133133192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="menu"></p><p>点击上图头像右上角扩展符号可以扩展为下面的样式。</p><p><img src="https://img-blog.csdnimg.cn/20200111133156994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="software"></p><p>UOS的浏览器似乎是封装某浏览器内核制作的，默认搜索工具是360搜索。   </p><p><img src="https://img-blog.csdnimg.cn/20200111133212660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="explorer"></p><p>自带的图片管理浏览工具。</p><p><img src="https://img-blog.csdnimg.cn/20200111133221348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="picview"></p><p>自带音乐播放器。 </p><p><img src="https://img-blog.csdnimg.cn/20200111133243487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="music"></p><p>自带视频播放器。 </p><p><img src="https://img-blog.csdnimg.cn/20200111133254569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="softwarezh"></p><p>自带的应用下载市场，软件还不多，后续应该会越来越多。若是嫌界面图标遮住界面，碍眼，可右键设置为自动隐藏。</p><p><img src="https://img-blog.csdnimg.cn/20200111133306939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="appmarket"></p><p>终端使用，透明度调节没问题。  </p><p><img src="https://img-blog.csdnimg.cn/20200111133327263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="bash"></p><p>系统监视工具，这个似乎是top命令的GUI版。</p><p><img src="https://img-blog.csdnimg.cn/20200111133348655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="htop"></p><p>自带编辑器，当然也预置了Vim。</p><p><img src="https://img-blog.csdnimg.cn/20200111133404815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="editor"></p><h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>UOS以Deepin为核心，各大公司合力开发，支持多种国产CPU，使用流畅，软件简洁好用。总体来说，是值得广大用户使用的一款国产Linux系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200111132834618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70&quot; alt=&quot;uos-cover&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="http://www.shieber.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="OS" scheme="http://www.shieber.cn/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>用RSS快速干净地获取各领域信息</title>
    <link href="http://www.shieber.cn/title/9ade8626/"/>
    <id>http://www.shieber.cn/title/9ade8626/</id>
    <published>2020-06-04T14:22:55.000Z</published>
    <updated>2020-06-05T07:04:57.896Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/04/tBLh11.jpg" alt="rsslogo"></p><a id="more"></a><p>信息时代，信息更新快，碎片化。大部分人都通过各类新闻软件获取信息，比如头条，腾讯新闻，微信公众号等等。然而这些信息是别人特意挑选，甚至是算法推送的。有没有可能自己选择些新闻信息聚合在一个软件里来看呢？当然有，那就是<a href="https://baike.baidu.com/item/rss/24470" target="_blank" rel="noopener">RSS简易信息聚合</a>，可以将其理解成各信息发布渠道提供的另一种信息访问方式。</p><p>比如一个网站，除了可以在浏览器中输入<a href="http://xxx" target="_blank" rel="noopener">http://xxx</a> 登录查看点击网页查看，还可用RSS获取同样的内容，而且可将各网站的信息聚合在一个软件。RSS的优点，多个消息渠道聚合在一个APP里节约空间，可自动推送，不会被算法分析，没有广告，隐私程度高，不想看了可随时取消订阅。</p><p>有很多优秀的RSS软件，在此推荐几个，可能需要翻墙到Google play才能获得。  </p><table><thead><tr><th align="left">软件名</th><th align="left">支持平台</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">RSS reader</td><td align="left">Android</td><td align="left"><a href="https://play.google.com" target="_blank" rel="noopener">https://play.google.com</a></td></tr><tr><td align="left">Winds</td><td align="left">Win,Mac,Linux</td><td align="left"><a href="https://getstream.io/winds" target="_blank" rel="noopener">https://getstream.io/winds</a></td></tr><tr><td align="left">订阅帝</td><td align="left">Android</td><td align="left"><a href="https://www.dingyuedi.com" target="_blank" rel="noopener">https://www.dingyuedi.com</a></td></tr></tbody></table><p>如下是Google play上的RSS软件，太多了，都很不错，各个特色不一样，有的收费。</p><p><img src="https://s1.ax1x.com/2020/06/05/tDNHl8.png" alt="rss2"></p><p><img src="https://s1.ax1x.com/2020/06/05/tDNxkn.png" alt="rss3"></p><p>接下来的一个问题是，我怎么知道某新闻是否提供RSS信息发布渠道呢？</p><p>这个有多种解决方法。</p><p>第一：网站提供RSS发布渠道，那么通常在顶部菜单、右侧菜单、底部菜单等地方会有RSS图标，鼠标放RSS图标上面或者点击进去可以看到对应的RSS地址，比如本网站订阅地址<a href="https://www.shieber.cn/atom.xml，">https://www.shieber.cn/atom.xml，</a> 其他网站可能是<a href="https://xxx.xxx.xx/feed，https://xxx.xxx.xx/rss。" target="_blank" rel="noopener">https://xxx.xxx.xx/feed，https://xxx.xxx.xx/rss。</a> 总之结尾是 atom.xml、feed、rss等，可多次尝试。</p><p>下图左侧橙色RSS图标很显眼，鼠标放上面，最下面就是订阅地址，添加到RSS软件里，这些博客就可以看了。</p><p><img src="https://s1.ax1x.com/2020/06/05/tDNgyD.png" alt="rss1"></p><p>第二：网站不提供RSS发布渠道，此时可以利用工具自己制作该网站的RSS源并订阅。制作工具及使用方法可以搜索一下，比如<a href="http://createfeed.fivefilters.org" target="_blank" rel="noopener">Feed Creatro</a>和<a href="http://www.feed43.com" target="_blank" rel="noopener">feed43</a>，具体操作可以看<a href="https://zhuanlan.zhihu.com/p/64457116" target="_blank" rel="noopener">如何用RSS订阅？</a>。</p><p>第三：利用别人总结好的源，直接订阅，比如<a href="https://www.zhihu.com/question/19580096" target="_blank" rel="noopener">你必读的RSS订阅源有哪些？</a>或者一些RSS订阅源汇聚网站如<a href="https://ohmyrss.com" target="_blank" rel="noopener">己思</a>。</p><p>第四：利用插件获取网站的RSS地址，一个值得推荐的插件是<a href="https://docs.rsshub.app" target="_blank" rel="noopener">RSShub</a>，浏览网站时，该插件会显示RSS地址。</p><p>微博，公众号，简书，B站，贴吧，知乎，豆瓣，抖音，网易云音乐，Github都是可以订阅的源。要是都开App，太麻烦，都聚合到一个App，岂不美哉？</p><p>自己挑选的源，内容要宽泛，质量要有保证，这样接受到的讯息才能和其他新闻软件有所差别，听见不同的声音。但凡用RSS的人都会发现类似其他新闻软件里的一片光明没了，民间疾苦冒了出来；对伟光正感性地歌功颂德没了，却更多看到理性的批评和民间疾苦。</p><p>如下为各类订阅内容，当然者是PC端的RSS软件，手机端太小，截屏不好看。</p><p><img src="https://s1.ax1x.com/2020/06/05/tr8GIP.png" alt="dingye"></p><p>下面是操作指南。</p><iframe src="https://player.bilibili.com/player.html?aid=38629650&cid=70525810" width="800" height="530" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/06/04/tBLh11.jpg&quot; alt=&quot;rsslogo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="通信" scheme="http://www.shieber.cn/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="information" scheme="http://www.shieber.cn/tags/information/"/>
    
  </entry>
  
  <entry>
    <title>数据结构及各语言中的实现</title>
    <link href="http://www.shieber.cn/title/fe068447/"/>
    <id>http://www.shieber.cn/title/fe068447/</id>
    <published>2020-05-31T12:53:39.000Z</published>
    <updated>2020-06-29T01:03:03.902Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/31/t3QBYF.png" alt="data structure"></p><a id="more"></a><p><strong>数据结构各种各样，其应用领域也不尽相同，现做部分整理。</strong></p><h1 id="一-数据结构"><a href="#一-数据结构" class="headerlink" title="一. 数据结构"></a>一. 数据结构</h1><table><thead><tr><th align="left">类型</th><th align="left">应用领域</th></tr></thead><tbody><tr><td align="left">数组</td><td align="left">同种数据存放，寻址方便</td></tr><tr><td align="left">链表</td><td align="left">用在文件系统，内存管理，数据库冲突解决，set集合，git记录</td></tr><tr><td align="left">跳表</td><td align="left">由链表通过索引构建，有序，用在替代平衡树(AVL Tree)，如redis就有使用，复杂度O(logn)</td></tr><tr><td align="left">栈</td><td align="left">用在递归，逆序输出，网页网址保存，计算表达式，运算符优先级，括号检查，数制转换，函数调用</td></tr><tr><td align="left">队列</td><td align="left">用在操作系统任务安排，模拟派对，一切按序安排的任务</td></tr><tr><td align="left">散列</td><td align="left">用在MD5，SHA1等加密算法，数据校验，数据分片(分布式)，负载均衡，散列表类似数组结合链表</td></tr><tr><td align="left">树</td><td align="left">树是链表的扩展，用在数据库，文件系统，搜索引擎，编译器。二/三/四/八叉树，线段树，字典树，红黑树，B+树，Trie树</td></tr><tr><td align="left">堆</td><td align="left">等效于完全二叉树，用在操作系统分配内存，优先队列，海量数据查找，排序</td></tr><tr><td align="left">图</td><td align="left">用在知识图谱，图数据库，任务安排，最短路径，最小生成树，网络处理，计算生物学</td></tr></tbody></table><h1 id="二-各语言的数据类型"><a href="#二-各语言的数据类型" class="headerlink" title="二. 各语言的数据类型"></a>二. 各语言的数据类型</h1><h2 id="C-C-语言"><a href="#C-C-语言" class="headerlink" title="C/C++语言"></a>C/C++语言</h2><p><strong>基本类型</strong>:<br> 1.字符类型 char<br> 2.数值类型 short int long float double<br> 3.布尔类型 bool (C++独有)  </p><p><strong>构造类型</strong>:<br> 1.数组类型 array<br> 2.结构体型 struct<br> 3.共用体型 union<br> 4.枚举体型 enum  </p><p><strong>指针类型</strong>:<br> 1.pointer </p><p><strong>空类型</strong>:<br> 1.void</p><h2 id="Rust语言"><a href="#Rust语言" class="headerlink" title="Rust语言"></a>Rust语言</h2><p><strong>标量类型</strong>:<br> 1.数值类型 u|i(8/16/32/64/128/size)  f32(64)<br> 2.布尔类型 true false<br> 3.字符类型 char  </p><p><strong>复合类型</strong>:<br> 1.数组类型 tup<br> 2.元组类型 array </p><h2 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h2><p><strong>基本类型</strong>:<br> 1.字符类型 char<br> 2.布尔类型 boolean<br> 3.数值类型 byte short int long float double  </p><p><strong>引用类型</strong>:<br> 1.类类型   class<br> 2.接口类型 interface<br> 3.数组类型 array  </p><h2 id="Go语言"><a href="#Go语言" class="headerlink" title="Go语言"></a>Go语言</h2><p><strong>基本类型</strong>:<br> 1.字符及串 rune byte string<br> 2.布尔类型 true false<br> 3.数值类型 (u)int(8,16,32,64) float(32,64) complex  </p><p><strong>派生类型</strong>：<br>    1.指针类型 pt := &amp;v (nil)<br>    2.数组类型 nu := [4]int{0,1,2,3}<br>    3.切片类型 sl := []int{0,1,2,3,}<br>    4.映射类型 var m = make(map[string]string)<br>    4.结构类型 type Employee struct {}<br>    5.管道类型 ch := make(chan int, 2)<br>    6.接口类型 func (p *Ptr) getName() string{}<br>    8.函数类型 func sayHello(name strin){}  </p><h2 id="Python语言"><a href="#Python语言" class="headerlink" title="Python语言"></a>Python语言</h2><p><strong>不可变类型</strong>：<br> 1.数值类型 number<br> 2.字符串型 string<br> 3.元组类型 tuple   </p><p><strong>可变类型</strong>：<br> 1.列表类型 list<br> 2.字典类型 dict<br> 3.集合类型 set   </p><h2 id="JavaScript语言"><a href="#JavaScript语言" class="headerlink" title="JavaScript语言"></a>JavaScript语言</h2><p><strong>基本类型</strong>:<br>    1.对空类型 Null<br>    2.字符串型 String<br>    3.数值类型 Number<br>    4.大整数型 BigInt<br>    5.符号类型 Symbol<br>    6.布尔类型 boolean<br>    7.未定义型 Undefined  </p><p><strong>对象类型</strong>:<br>    1.对象类型 Object<br>    2.数组类型 Array<br>    3.函数类型 Function  </p><p><strong>网络数据传输</strong>:<br> 1.JSON</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/31/t3QBYF.png&quot; alt=&quot;data structure&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://www.shieber.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="DataStructure" scheme="http://www.shieber.cn/tags/DataStructure/"/>
    
  </entry>
  
</feed>
