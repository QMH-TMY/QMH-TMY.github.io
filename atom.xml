<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shieber</title>
  
  <subtitle>友朋自远方来，不亦乐乎?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shieber.cn/"/>
  <updated>2020-11-12T08:06:17.023Z</updated>
  <id>http://www.shieber.cn/</id>
  
  <author>
    <name>Shieber</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C、Python、Go、Rust、Dart源码阅读</title>
    <link href="http://www.shieber.cn/title/7923697c/"/>
    <id>http://www.shieber.cn/title/7923697c/</id>
    <published>2020-11-12T08:04:26.000Z</published>
    <updated>2020-11-12T08:06:17.023Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/12/BzpFjx.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第二十三篇：源码阅读。</p><p>谈及阅读源码，那么一个问题就来了：为什么要阅读源码？</p><p>答案其实很多，一种看法是：阅读源码能了解语言，工具的内部构造，学习语法的各种最佳用法。长此以往，你自己就有了感觉，发现自己的不足，提出些新见解，知道框架怎么搭建，甚至发明新语言。</p><p>这里有一篇论述阅读源码的文章，写得还挺好。链接: <a href="https://pan.baidu.com/s/1lZQmqbkZM_RP0Fv5AvuDQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1lZQmqbkZM_RP0Fv5AvuDQA</a> 提取码: sd55。如果过期了，网上搜索：如何看懂源码？</p><p>阅读语言的源码，主要就是读其标准库，标准库是对语法最精妙的阐述。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C语言是底层语言，是任何学计算机的人都会学习的语言。C主要是语法定义加标准库，所以阅读的套路是先学会语法，然后找到标准库逐个开始阅读。常用标准库就是stdio、stdlib、time等库，这些库都是基础。比如math库，里面实现的是数学函数。读了C的math库，其他任何语言的math应该都难不倒你。</p><p>C的这些标准库都包含在glibc里面，所以搜索glibc就能下载到。一个可行的地址是<a target="_blank" href="https://github.com/lattera/glibc">glibc</a>，当然glibc在不断更新，请找到并下载最新版。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python底层CPython是用C实现的，上层才是用Python实现的，所以有两部分源码可读。CPython的源码在<a target="_blank" href="https://github.com/python/cpython">CPython</a>，标准库在其Lib目录里，内置函数如len()在bultinmodule.c文件中。</p><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go语言是一门强大的语言，强调并发，快速编译。源码地址在<a href="https://github.com/golang/go" target="_blank">Golang</a> </p><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust语言也是一门底层语言，强调安全高效。阅读地址在<a href="https://github.com/rust-lang/rust" target="_blank">Rust</a> </p><h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart语言是一门面向对象的语言，但它即能当编译型语言，又有脚本语言的特性，和Flutter结合还能跨平台。源码地址在<a href="https://github.com/dart-lang/sdk" target="_blank">Dart</a> </p><h2 id="从哪里开始"><a href="#从哪里开始" class="headerlink" title="从哪里开始"></a>从哪里开始</h2><p>那么多库，从哪个库开始呢？如果阅读过我前面的那篇文章：<a href="https://www.shieber.cn/title/3c8372aa" target="_blank">标准库依赖关系</a>，那么你就知道该从依赖的最底层，也就是几乎没有依赖的最底层库开始，然后逐步看语言怎么构建起来的。比如C是sys库，Python是sys模块，Go是unsafe包，Rust是alloc库，Dart是path库。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大部分语言源码都能在开源网站找到，比如github上面。另外，想阅读linux源码的可以看看<a href="https://github.com/zavg/linux-0.01" target="_blank">linux-0.01</a>版源码和托瓦兹大神维护的最新版源码<a href="https://github.com/torvalds/linux" target="_blank">torvalds/linux</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/12/BzpFjx.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart数据序列化</title>
    <link href="http://www.shieber.cn/title/97872ba/"/>
    <id>http://www.shieber.cn/title/97872ba/</id>
    <published>2020-11-12T03:35:28.000Z</published>
    <updated>2020-11-12T03:37:09.821Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/12/BxMvIs.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第二十二篇：数据序列化。</p><p>数据序列化就是将对象或数据结构转化成特定的格式，使其可在网络中传输，或可存储在内存或者文件中。反序列化则是相反的操作，将对象从序列化数据中还原出来。数据序列化后的数据格式可以是二进制，XML，JSON等格式。数据序列化是为了于数据的保存、交换、传输，如果不是这些目的，根本就不需要序列化。</p><p>序列化的要点</p><ul><li>序列化后数据大小</li><li>序列化所消耗的时间</li><li>平台、语言支持如何</li></ul><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C目前没有什么好的序列化工具使用，只能纯手写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MyStruct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nA;</span><br><span class="line">    <span class="keyword">char</span> cB;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">MyStruct</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125;MYSTRUCT, *PMYSTRUCT;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 序列化写入文件，-1表失败 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">serialInToFile</span><span class="params">(IN PMYSTRUCT pList, IN <span class="keyword">const</span> <span class="keyword">char</span>* pFileName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nReturn = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> uszBuf[<span class="number">8</span>] = &#123;<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>&#125;;</span><br><span class="line"> </span><br><span class="line">    FILE* pFile = fopen(pFileName, <span class="string">"wb+"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!pFile)</span><br><span class="line">        <span class="keyword">return</span> nReturn;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (pList!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">        fwrite(pList, <span class="number">1</span>, <span class="number">5</span>, pFile);  <span class="comment">// 5个字节</span></span><br><span class="line">        pList = pList-&gt;pNext;</span><br><span class="line">        <span class="keyword">if</span> (pList)</span><br><span class="line">            fwrite(uszBuf, <span class="number">1</span>, <span class="number">8</span>, pFile);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pFile);</span><br><span class="line">    nReturn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> nReturn;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 序列化导出文件，-1代表失败 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">serialOutFromeFile</span><span class="params">(OUT PMYSTRUCT* ppList, IN <span class="keyword">const</span> <span class="keyword">char</span>* pFileName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nReturn = <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    FILE* pFile = fopen(pFileName, <span class="string">"rb"</span>);</span><br><span class="line">    PMYSTRUCT pCurNode = (PMYSTRUCT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MYSTRUCT));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> uszBuf[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>* pA = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!pFile)</span><br><span class="line">        <span class="keyword">return</span> nReturn;</span><br><span class="line"> </span><br><span class="line">    *ppList = pCurNode;</span><br><span class="line">    <span class="keyword">while</span>(!feof(pFile))&#123;</span><br><span class="line">        pCurNode -&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">        fread(uszBuf, <span class="number">1</span>, <span class="number">4</span>, pFile);</span><br><span class="line">        pA = (<span class="keyword">int</span>*)uszBuf;</span><br><span class="line">        pCurNode-&gt;nA = *pA;</span><br><span class="line">        <span class="built_in">fscanf</span>(pFile, <span class="string">"%c"</span>, &amp;(pCurNode-&gt;cB));</span><br><span class="line">        fread(uszBuf, <span class="number">1</span>, <span class="number">8</span>, pFile);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (uszBuf[i] != <span class="number">0xff</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">8</span>)&#123;</span><br><span class="line">            pCurNode-&gt;pNext = (PMYSTRUCT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MYSTRUCT));</span><br><span class="line">            pCurNode = pCurNode-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pFile);</span><br><span class="line">    nReturn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> nReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStruct</span><span class="params">(PMYSTRUCT pSTest)</span></span>&#123;</span><br><span class="line">    pSTest-&gt;nA = <span class="number">1</span>;</span><br><span class="line">    pSTest-&gt;cB = <span class="string">'C'</span>;</span><br><span class="line">    pSTest-&gt;pNext = (PMYSTRUCT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MYSTRUCT));</span><br><span class="line">    pSTest-&gt;pNext-&gt;nA = <span class="number">2</span>;</span><br><span class="line">    pSTest-&gt;pNext-&gt;cB = <span class="string">'A'</span>;</span><br><span class="line">    pSTest-&gt;pNext-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteStruct</span><span class="params">(PMYSTRUCT pSTest)</span></span>&#123;</span><br><span class="line">    PMYSTRUCT pTmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (pSTest!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">        pTmp = pSTest;</span><br><span class="line">        pSTest = pSTest-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(pTmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStruct</span><span class="params">(PMYSTRUCT pSTest)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pSTest!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d, nA = %d, cB = %c \n"</span>, i, pSTest-&gt;nA, pSTest-&gt;cB);</span><br><span class="line">        pSTest = pSTest-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, _TCHAR* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nReturn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* pFileName = <span class="string">"fileSerial.tmp"</span>;</span><br><span class="line">    PMYSTRUCT pSTest = (PMYSTRUCT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MYSTRUCT));</span><br><span class="line">    InitStruct(pSTest);</span><br><span class="line"></span><br><span class="line">    nReturn = serialInToFile(pSTest, pFileName); <span class="comment">//序列化</span></span><br><span class="line">    DeleteStruct(pSTest);  <span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">if</span> (nReturn == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> nReturn;</span><br><span class="line"> </span><br><span class="line">    pSTest = <span class="literal">NULL</span>;</span><br><span class="line">    serialOutFromeFile(&amp;pSTest, pFileName); <span class="comment">// 导出</span></span><br><span class="line">    printStruct(pSTest); </span><br><span class="line">    DeleteStruct(pSTest);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python有多种序列化方法，其中Pickle是Python的专属序列化方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">adict = &#123;<span class="string">"Name"</span>:<span class="string">"Shieber"</span>, <span class="string">"Age"</span>:<span class="number">24</span>,<span class="string">"Addr"</span>:<span class="string">"Chenddu"</span>&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"abc.pk"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> fobj: <span class="comment">#写二进制数据</span></span><br><span class="line">    pickle.dump(adict, fobj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"abc.pk"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> fobj: <span class="comment">#读二进制数据</span></span><br><span class="line">    a_dict = pickle.load(fobj)</span><br><span class="line">    print(type(a_dict))</span><br></pre></td></tr></table></figure><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go里面也有多种序列化方法，甚至能自定义。</p><ul><li>ASN.1</li><li>JSON</li><li>gob</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ASN.1</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/asn1"</span></span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data, err := asn1.Marshal(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"Fatal error: %s"</span>, err.Error())</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> n <span class="keyword">int</span></span><br><span class="line">    _, err := asn1.Unmarshal(data, &amp;n)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"Fatal error: %s"</span>, err.Error())</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"Marshaled: "</span>, n)</span><br><span class="line"></span><br><span class="line">    person := Person &#123;</span><br><span class="line">        Name: <span class="string">"Shieber"</span>,</span><br><span class="line">        Age: <span class="number">24</span>,</span><br><span class="line">        Gender: <span class="string">"Male"</span>,</span><br><span class="line">        Addr: <span class="string">"Chengdu"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    dj, err := json.Marshal(&amp;person)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"Serialized data:%v\n"</span>, <span class="keyword">string</span>(dj))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>serde, 是rust语言用来序列化和反序列化数据的一个工具，支持的数据格式多。</p><ul><li>JSON</li><li>YAML</li><li>BSON</li><li>URL</li><li>TOML</li><li>Pickle</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> serde_derive;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> serde;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> serde_json;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Serialize, Deserialize, Debug)</span></span><br><span class="line"><span class="meta">struct Point &#123;</span></span><br><span class="line"><span class="meta">    x: i32,</span></span><br><span class="line"><span class="meta">    y: i32,</span></span><br><span class="line"><span class="meta">    z: i32,</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">fn main() &#123;</span></span><br><span class="line"><span class="meta">    let point = Point &#123; x:1, y:2, Z:3 &#125;;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    let serialized = serde_json::to_string(&amp;point)</span></span><br><span class="line"><span class="meta">        .unwrap(<span class="meta-string">"Error while serializing."</span>);    // 转换为json</span></span><br><span class="line"><span class="meta">    println!(<span class="meta-string">"serialized = &#123;&#125;"</span>, serialized);</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    let deserialized:Point = serde_json::from_str(&amp;serialized)</span></span><br><span class="line"><span class="meta">        .unwrap(<span class="meta-string">"Error while deserializing.E"</span>); //从json转回Point</span></span><br><span class="line"><span class="meta">    println!(<span class="meta-string">"deserialized = &#123;:?&#125;"</span>, deserialized);</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart可用convert库实现JSON的序列和反序列化。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span> <span class="keyword">show</span> Future;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/services.dart'</span> <span class="keyword">show</span> rootBundle;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:demo/student.dart'</span>; <span class="comment">// 模型文件</span></span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; _loadAStudentAsset() <span class="keyword">async</span> &#123; <span class="comment">// 加载Json</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> rootBundle.loadString(<span class="string">'assets/student.json'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future loadStudent() <span class="keyword">async</span> &#123; <span class="comment">// 加载响应数据</span></span><br><span class="line">  <span class="built_in">String</span> jsonString = <span class="keyword">await</span> _loadAStudentAsset();</span><br><span class="line">  <span class="keyword">final</span> jsonResponse = json.decode(jsonString); </span><br><span class="line">  Student student = <span class="keyword">new</span> Student.fromJson(jsonResponse); <span class="comment">// 反序列化</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"student.studentScores= <span class="subst">$&#123;student.studentScores&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/12/BxMvIs.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart同步及异步编程</title>
    <link href="http://www.shieber.cn/title/d1c85720/"/>
    <id>http://www.shieber.cn/title/d1c85720/</id>
    <published>2020-11-12T02:53:22.000Z</published>
    <updated>2020-11-12T03:37:09.817Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/12/BvjeXD.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第二十一篇：同步及异步编程。</p><p>程序的运行不单单只是顺序执行，往往会和各类资源以及外界系统进行交互。所以，传统直观的程序编写方法可能并不能应对实际情况。比如，系统需要等待网络传输，磁盘读取。这时程序该等待还是去处理其他事务呢？遇到购物节这种高并发事务场景，程序又该如何处理？</p><p>实际上，应对上述种种问题的编程模型就是同步和异步编程，它们往往涉及如下概念：</p><ul><li>阻塞：任务未结束时，主调用进程需等待结果返回</li><li>非阻塞：任务未结束时，主调用进程可去处理其他任务</li><li>同步：任务未结束时，被调用进程只能处理该任务</li><li>异步：任务未结束时，被调用进程可去执行其他任务</li></ul><p>同步异步和阻塞非阻塞组合就有四种情况：</p><ul><li>阻塞同步： 主调用进程等待被调用返回结果，被调用进程只处理该任务，不干别的 (多用)</li><li>非阻塞同步：主调用进程不用等待被调用返回结果，被调用进程只处理该任务，不干别的 (少用)</li><li>阻塞异步： 主调用进程等待被调用返回结果，被调用进程可处理其他事 (不用)</li><li>非阻塞异步：主调用进程不用等待被调用返回结果，被调用进程可处理其他事 (多用)</li></ul><p>所以同步编程多说的是阻塞同步，异步编程一定是非阻塞异步。这样，四种情况就简化为两种，便于理解。</p><p>阻塞非阻塞是讲的主调用进程，同步异步描述的是被调用进程。同步保证有序，效率低；异步效率高，资源占用多。有序的事务，比如生成订单，扣款，次序不能颠倒。这类需要保证顺序的工作称为事务，需要满足(ACID)条件。</p><p>同步没什么好说的，代码怎么写，执行就怎么来。异步却需要考虑执行任务完成后如何回到当前任务。不同的语言异步编程模型不同，但大体概念是类似的。本文都只写异步的示例，同步没什么好写的。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C虽是面向过程的语言，但它也可进行异步编程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"B"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*pcb)</span><span class="params">(<span class="keyword">int</span> a)</span></span>; <span class="comment">//函数指针，方便直接使用pcb</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">parameter</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a ;</span><br><span class="line">    pcb callback;</span><br><span class="line">&#125;parameter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback_thread</span><span class="params">(<span class="keyword">void</span> *p1)</span> </span>&#123; <span class="comment">//回调线程</span></span><br><span class="line">    do_works();</span><br><span class="line">    parameter* p = (parameter*)p1 ;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"GetCallBack print! \n"</span>);</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">        p-&gt;callback(p-&gt;a); <span class="comment">//函数指针执行函数，来自于B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//留给B的接口</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">SetCallBackFun</span><span class="params">(<span class="keyword">int</span> a, pcb callback)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SetCallBackFun print! \n"</span>);</span><br><span class="line">    parameter *p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(parameter)) ;</span><br><span class="line">    p-&gt;a  = <span class="number">10</span>;</span><br><span class="line">    p-&gt;callback = callback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> thing1;</span><br><span class="line">    pthread_create(&amp;thing1,<span class="literal">NULL</span>,callback_thread,(<span class="keyword">void</span> *) p);</span><br><span class="line">    pthread_join(thing1,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SetCallBackFun(<span class="number">4</span>, fCallBack);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fCallBack</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python实现异步编程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"进程pid=%d,ppid=%d"</span>%(os.getpid(),os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"%d"</span>%i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(args)</span>:</span></span><br><span class="line">    print(<span class="string">"callback func-pid=%d"</span>%os.getpid())</span><br><span class="line">    print(<span class="string">"callback func-args=%s"</span>%args)</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">3</span>)</span><br><span class="line">pool.apply_async(func=test1, callback=test2)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">"主进程-pid=%d"</span>%os.getpid())</span><br></pre></td></tr></table></figure><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>使用signal和sync库实现异步。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> async</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"os/signal"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Runner <span class="keyword">struct</span> &#123; <span class="comment">// 异步执行任务</span></span><br><span class="line">    interrupt <span class="keyword">chan</span> os.Signal</span><br><span class="line">    complete <span class="keyword">chan</span> error</span><br><span class="line">    timeout &lt;- <span class="keyword">chan</span> time.Time</span><br><span class="line">    tasks []<span class="function"><span class="keyword">func</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">error</span></span></span><br><span class="line">    waitGroup sync.WaitGroup</span><br><span class="line">    lock sync.Mutex</span><br><span class="line">    errs []error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRunner</span><span class="params">(d time.Duration)</span> *<span class="title">Runner</span></span> &#123; <span class="comment">// 开启新Runner</span></span><br><span class="line">    <span class="keyword">return</span> &amp;Runner&#123;</span><br><span class="line">        interrupt: <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>),</span><br><span class="line">        complete: <span class="built_in">make</span>(<span class="keyword">chan</span> error),</span><br><span class="line">        timeout: time.After(d),</span><br><span class="line">        waitGroup: sync.WaitGroup&#123;&#125;,</span><br><span class="line">        lock: sync.Mutex&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">Add</span><span class="params">(tasks... <span class="keyword">func</span>(id <span class="keyword">int</span>)</span> <span class="title">error</span>)</span> &#123; <span class="comment">// 添加任务</span></span><br><span class="line">    r.tasks = <span class="built_in">append</span>(r.tasks, tasks...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">Start</span><span class="params">()</span></span> &#123; <span class="comment">// 启动Runner并监听</span></span><br><span class="line">    signal.Notify(r.interrupt, os.Interrupt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        r.complete &lt;- r.Run()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> err := &lt;- r.complete:</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        <span class="keyword">case</span> &lt;- r.timeout:</span><br><span class="line">            <span class="keyword">return</span> ErrTimeOut</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">Run</span><span class="params">()</span> <span class="title">error</span></span> &#123; <span class="comment">// 异步执行任务</span></span><br><span class="line">    <span class="keyword">for</span> id, task := <span class="keyword">range</span> r.tasks &#123;</span><br><span class="line">        <span class="keyword">if</span> r.gotInterrupt() &#123;</span><br><span class="line">            <span class="keyword">return</span> ErrInterrupt</span><br><span class="line">        &#125;</span><br><span class="line">        r.waitGroup.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            r.lock.Lock()</span><br><span class="line">            err := task(id)</span><br><span class="line">            r.errs = <span class="built_in">append</span>(r.errs, err)</span><br><span class="line">            r.lock.Unlock()</span><br><span class="line">            r.waitGroup.Done()</span><br><span class="line">        &#125;(id)</span><br><span class="line">    &#125;</span><br><span class="line">    r.waitGroup.Wait()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">gotInterrupt</span><span class="params">()</span> <span class="title">bool</span></span> &#123; <span class="comment">// 中断处理</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-r.interrupt:</span><br><span class="line">            signal.Stop(r.interrupt)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">GetErrs</span><span class="params">()</span> []<span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.errs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust使用Future和Executor、Reactor实现异步。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">fn</span> <span class="title">read_and_write</span></span>(s: TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> (<span class="keyword">mut</span> r, <span class="keyword">mut</span> w) = s.split();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> buffer = r.read().<span class="keyword">await</span>.unwrap();</span><br><span class="line">    buffer.append(<span class="string">"Hello World!"</span>);</span><br><span class="line">    w.write_all(buffer.as_bytes()).<span class="keyword">await</span>.unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程</p><p><img src="https://s3.ax1x.com/2020/11/12/BxVh9S.png" alt="async"></p><h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart中也是Future实现异步，它包含完成与未完成两种状态。async和await是专门的语法糖，简化了异步编程难度。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Login() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> token = <span class="keyword">await</span> login(<span class="string">"name"</span>, <span class="string">"Password"</span>);</span><br><span class="line">        <span class="keyword">var</span> user = <span class="keyword">await</span> fetchUserInfo(token);</span><br><span class="line">        <span class="keyword">await</span> saveUserInfo(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Caught error:<span class="subst">$err</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/12/BvjeXD.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart数据库连接</title>
    <link href="http://www.shieber.cn/title/f431010f/"/>
    <id>http://www.shieber.cn/title/f431010f/</id>
    <published>2020-11-11T16:03:23.000Z</published>
    <updated>2020-11-11T16:04:52.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/12/Bvhxyt.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第二十篇：数据库连接。</p><p>数据是程序运转的核心，数据量大了就需要保存，所以编程语言都要实现相应的数据库接口，用以快速大量的提取和保存数据。</p><p>常见的数据库是关系型数据库，各语言实现的关系型数据库接口又称为(ORM)。目前常见的数据库是MySQL，本文也只讲解MySQL的连接使用。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C使用mysql.h实现MySQL的接口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"libmysql.lib"</span>) <span class="comment">// 静态库</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> yesOrnot = <span class="number">1</span>;</span><br><span class="line">    MYSQL mysqlConn;</span><br><span class="line">    MYSQL_RES *res;</span><br><span class="line">    MYSQL_FIELD *field;</span><br><span class="line">    MYSQL_ROW nextRow;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    mysql_init(&amp;mysqlConn);</span><br><span class="line">    <span class="keyword">if</span> (!(mysql_real_connect(&amp;mysqlConn, <span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"passwd"</span>,<span class="string">"db"</span>,<span class="number">9090</span>,<span class="literal">NULL</span>,<span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to connect to database...Error: %s\n"</span>,mysql_error(&amp;mysqlConn));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (yesOrnot == <span class="number">1</span>) &#123;</span><br><span class="line">        yesOrnot = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">char</span> keyword[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,keyword);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> toSelectFrom[<span class="number">250</span>] = <span class="string">"SELECT * FROM core_db"</span>;</span><br><span class="line">        <span class="keyword">char</span> toLike[] = <span class="string">" LIKE '%'"</span>;</span><br><span class="line">        <span class="keyword">char</span> <span class="keyword">or</span>[] = <span class="string">" OR "</span>;</span><br><span class="line">        <span class="keyword">char</span> number[] = <span class="string">"course_number"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">strcat</span>(toSelectFrom, number); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python连接8.0版MySQL时，使用connector</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, csv</span><br><span class="line"><span class="keyword">from</span> mysql <span class="keyword">import</span> connector</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoSQL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.usr  = <span class="string">'username'</span></span><br><span class="line">        self.host = <span class="string">'127.0.0.1'</span></span><br><span class="line">        self.pwd  = <span class="string">'passwd'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, db, sql)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(sys.argv[<span class="number">1</span>],<span class="string">'r'</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">            reader = csv.reader(fobj)</span><br><span class="line">            rows   = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line"></span><br><span class="line">        data = []</span><br><span class="line">        <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(rows):</span><br><span class="line">            tmp = (str(i+<span class="number">1</span>),row[<span class="number">0</span>],row[<span class="number">1</span>],row[<span class="number">2</span>],row[<span class="number">3</span>]) </span><br><span class="line">            data.append(tmp)</span><br><span class="line"></span><br><span class="line">        cnx = connector.connect(user=self.usr,host=self.host, </span><br><span class="line">            password=self.pwd, database=db)</span><br><span class="line">        cur = cnx.cursor()</span><br><span class="line">        cur.executemany(sql,data)</span><br><span class="line">        cnx.commit()   <span class="comment">#关键</span></span><br><span class="line">        cur.close()</span><br><span class="line">        cnx.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    db  = <span class="string">"people"</span></span><br><span class="line">    sql = <span class="string">"INSERT INTO contacts (Id,Name,Gender,Nation,Country) VALUES(%s,%s,%s,%s,%s)"</span></span><br><span class="line">    Dosql = DoSQL()</span><br><span class="line">    Dosql.insert(db, sql)</span><br></pre></td></tr></table></figure><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go连接数据库需要相应的go-sql-driver/mysql包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"database/sql"</span></span><br><span class="line">    _ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    db, _ := sql.open(<span class="string">"mysql"</span>, <span class="string">"root:xxx@tcp(127.0.0.1:3306)"</span>)</span><br><span class="line">    db.SetConnMaxLifetime(<span class="number">100</span>)</span><br><span class="line">    db.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := db.Ping(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Open database failed"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"connection established"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> user User</span><br><span class="line">    rows, err := db.Query(<span class="string">`SELECT * FROM user where id in (1,2,3)`</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        errors.New(<span class="string">"query incur error"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        err := rows.Scan(user.sex, user.phone, user.name, user.id, user.age)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(json.Marshal(user))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rows.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> sqlx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> pool = sqlx::MySqlPool::builder()</span><br><span class="line">        .max_size(<span class="number">100</span>)</span><br><span class="line">        .min_size(<span class="number">10</span>)</span><br><span class="line">        .connect_timeout(std::time::Duration::from_secs(<span class="number">10</span>))</span><br><span class="line">        .max_lifetime(std::time::Duration::from_secs(<span class="number">1800</span>))</span><br><span class="line">        .idle_timeout(std::time::Duration::from_secs(<span class="number">600</span>))</span><br><span class="line">         build(&amp;std::env::var(<span class="string">"DATABASE_URL"</span>).unwrap()).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cursor</span></span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">"select id, username from t_user where id &lt; ?"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cursor = sqlx::query(sql).bind(<span class="number">3</span>).fetch(&amp;pool);</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="literal">Some</span>(row) = cursor.next().<span class="keyword">await</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> user = User &#123;</span><br><span class="line">            id: row.get(<span class="string">"id"</span>),</span><br><span class="line">            username: row.get(<span class="string">"username"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// commit </span></span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">r#"update t_user set username = ? where id &gt; ?"#</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> affect_rows = sqlx::query(sql).bind(<span class="string">"wy"</span>).bind(<span class="number">1</span>).execute(&amp;pool).<span class="keyword">await</span>?;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, affect_rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart使用sqljocky连接mysql数据库。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"package:sqljocky/sqljocky.dart"</span></span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) &#123;</span><br><span class="line">  <span class="keyword">var</span> pool = <span class="keyword">new</span> ConnectionPool(</span><br><span class="line">        host: <span class="string">'localhost'</span>,port: <span class="number">3306</span>, user: <span class="string">'root'</span>,</span><br><span class="line">        password: <span class="string">'xxxx'</span>, db: <span class="string">'people'</span>, max: <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询</span></span><br><span class="line">  pool.query(<span class="string">"SELECT * FROM users"</span>).then( (results) &#123;</span><br><span class="line">      results.forEach( (row) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;row[<span class="number">1</span>]&#125;</span>, <span class="subst">$&#123;row[<span class="number">2</span>]&#125;</span>"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用字段查询</span></span><br><span class="line">  pool.query(<span class="string">"SELECT * FROM users"</span>).then( (results) &#123;</span><br><span class="line">      results.forEach( (row) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;row.name&#125;</span>, <span class="subst">$&#123;row.age&#125;</span>"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 批量处理</span></span><br><span class="line">  pool.prepare(<span class="string">"insert into users (name, age, email) values (?, ?, ?)"</span>)</span><br><span class="line">    ..then( (query) &#123;</span><br><span class="line">        query.executeMulti(</span><br><span class="line">          [</span><br><span class="line">              [<span class="string">"U1"</span>, <span class="number">18</span>,, <span class="string">"ld@xx.com"</span>],</span><br><span class="line">              [<span class="string">"U2"</span>, <span class="number">19</span>,, <span class="string">"ll@xx.com"</span>],</span><br><span class="line">              [<span class="string">"U3"</span>, <span class="number">21</span>,, <span class="string">"lm@xx.com"</span>],</span><br><span class="line">              [<span class="string">"U4"</span>, <span class="number">23</span>,, <span class="string">"la@xx.com"</span>],</span><br><span class="line">          ]</span><br><span class="line">        )</span><br><span class="line">        ..then((results) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> result <span class="keyword">in</span> results) &#123;</span><br><span class="line">               <span class="built_in">print</span>(<span class="string">"Userid:<span class="subst">$&#123;result.userId&#125;</span>"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/12/Bvhxyt.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart网络编程</title>
    <link href="http://www.shieber.cn/title/5f93f118/"/>
    <id>http://www.shieber.cn/title/5f93f118/</id>
    <published>2020-11-11T15:22:17.000Z</published>
    <updated>2020-11-12T01:05:58.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/11/BvR3rT.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十九篇：网络编程。</p><p>网络诞生于上世纪70，80年代，那时的网络不像现在需要高并发，处理的任务也远不如现在多。随着时代的发展，网络成为了一项基本服务，一种社会运转的基本组件。任何一门语言都需要考虑网络。网络编程就是指通过计算机语言实现网络通信。网络编程需要考虑网络通信的模型，目前的网络通信在计算机内部被看成一项服务，而且多是server/client模式，</p><p>Linux下一切皆文件，所以网络通信是通过对一个文件的读写来实现的，这个文件叫做socket文件。通过读写数据到该文件，就能实现网络传输。目前，所有网络编程都要用socket文件并涉及相关操作：</p><ul><li>建立socket</li><li>绑定bind</li><li>连接connect</li><li>监听listen</li><li>接受accept</li><li>关闭close</li></ul><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C语言中的网络编程，分为server和client端。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C 网络通信</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 9090</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">creatSocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> socket = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);  <span class="comment">// socket </span></span><br><span class="line">    <span class="keyword">if</span> (socket == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"creatSocket failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    addr.sin_addr.s_addr = = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = bind(socket, (struct sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)); <span class="comment">// bind</span></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"bind failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">listen</span>(socket, <span class="number">5</span>); <span class="comment">// listen</span></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"listen failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wait_client</span><span class="params">(<span class="keyword">int</span> listen_socket)</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line"><span class="keyword">int</span> addrlen = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"等待客户端连接。。。。\n"</span>);</span><br><span class="line"><span class="keyword">int</span> client_socket = accept(listen_socket, (struct sockaddr *)&amp;cliaddr, &amp;addrlen);</span><br><span class="line"><span class="keyword">if</span>(client_socket == <span class="number">-1</span>)&#123;</span><br><span class="line">perror(<span class="string">"accept"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"成功接收到一个客户端：%s\n"</span>, inet_ntoa(cliaddr.sin_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> client_socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanld_client</span><span class="params">(<span class="keyword">int</span> listen_socket, <span class="keyword">int</span> client_socket)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[SIZE];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="built_in">read</span>(client_socket, buf, SIZE<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">perror(<span class="string">"read"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">buf[ret] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ret; i++)&#123;</span><br><span class="line">buf[i] = buf[i] + <span class="string">'A'</span> - <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line"><span class="built_in">write</span>(client_socket, buf, ret);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strncmp</span>(buf, <span class="string">"end"</span>, <span class="number">3</span>) == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(client_socket);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> listen_socket = Creat_socket();</span><br><span class="line"><span class="keyword">int</span> client_socket = wait_client(listen_socket);</span><br><span class="line">hanld_client(listen_socket, client_socket);</span><br><span class="line"><span class="built_in">close</span>(listen_socket);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python的网络编程也是用socket，不过比C简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket()  // socket</span><br><span class="line">host = socket.gethostbyname()</span><br><span class="line">port = <span class="number">9090</span></span><br><span class="line">s.bind(host, port)   // bind</span><br><span class="line"></span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c, addr = s.accept()</span><br><span class="line">    print(<span class="string">"url"</span>, addr)</span><br><span class="line"></span><br><span class="line">    c.send(<span class="string">"Welcome"</span>)</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket </span><br><span class="line"> </span><br><span class="line">s = socket.socket()        </span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">12345</span> </span><br><span class="line">s.connect((host, port))</span><br><span class="line"></span><br><span class="line">print(s.recv(<span class="number">1024</span>))</span><br></pre></td></tr></table></figure><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go中的socket编程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        reader := bufio.NewReader(conn)</span><br><span class="line">        <span class="keyword">var</span> buf [<span class="number">128</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">        n, err := reader.Read(buf[:])</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Failed to read connect"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        recvStr := <span class="keyword">string</span>(buf[:n])</span><br><span class="line">        fmt.Println(<span class="string">"Recieved msg: "</span>, recvStr)</span><br><span class="line">        conn.Write([]<span class="keyword">byte</span>(recvStr))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:9090"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Listen failed"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        conn, err := listen.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Failed to connect"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">go</span> process(conn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    conn ,err := net.Dial(<span class="string">"tcp"</span>,<span class="string">"127.0.0.1:8888"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Failed: "</span>,err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    inputReader := bufio.NewReader(os.Stdout)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        input, _ := inputReader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line">        inputInfo := strings.Trim(input,<span class="string">"\r\n"</span>)</span><br><span class="line">        <span class="keyword">if</span> strings.ToUpper(inputInfo) == <span class="string">"q"</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _,err = conn.Write([]<span class="keyword">byte</span>(inputInfo))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buf := [<span class="number">512</span>]<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">        n,err := conn.Read(buf[:])</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">            fmt.Println(<span class="string">"Accept failed, error:"</span>,err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust中网络编程可使用serde序列化数据。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> serde::&#123;Deserialize, Serialize&#125;;</span><br><span class="line"><span class="keyword">use</span> serde_json;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, prelude::*, BufReader, Write&#125;;</span><br><span class="line"><span class="keyword">use</span> std::net::&#123;TcpListener, TcpStream&#125;;</span><br><span class="line"><span class="keyword">use</span> std::&#123;<span class="built_in">str</span>, thread&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug, Serialize, Deserialize)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point3D</span></span> &#123;</span><br><span class="line">    x: <span class="built_in">u32</span>,</span><br><span class="line">    y: <span class="built_in">u32</span>,</span><br><span class="line">    z: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">handle_client</span></span>(stream: TcpStream) -&gt; io::<span class="built_in">Result</span>&lt;()&gt;&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Incoming connection form: &#123;&#125;"</span>, stream.peer_addr()?);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> data = <span class="built_in">Vec</span>:new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> stream = BufReader::new(stream);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        data.clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> bytes = stream.read_until(<span class="string">b'\n'</span>, &amp;<span class="keyword">mut</span> data);</span><br><span class="line">        <span class="keyword">if</span> bytes === <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">Ok</span>(());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> input: Point3D = serde_json::from_slice(&amp;data);</span><br><span class="line">        <span class="keyword">let</span> value = input.x.pow(<span class="number">2</span>) + input.y.pow(<span class="number">2</span>) + input.z.pow(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        stream.get_mut().write(&amp;(serde_json::to_vec(&amp;(<span class="built_in">f64</span>:from(value).sqrt()))?))?;</span><br><span class="line">        stream.get_mut().write(&amp;(<span class="string">"\n"</span>.as_bytes()))?;</span><br><span class="line">        stream.get_mut().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; io::<span class="built_in">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> listen = TcpListener::bind(<span class="string">"127.0.0.1:9090"</span>);</span><br><span class="line">    <span class="keyword">for</span> stream <span class="keyword">in</span> listen.incoming() &#123;</span><br><span class="line">        <span class="keyword">match</span> stream &#123;</span><br><span class="line">            <span class="literal">Err</span>(e) =&gt; eprintln!(<span class="string">"Failed: &#123;&#125;"</span>, e);</span><br><span class="line">            <span class="literal">Ok</span>(stream) =&gt; &#123;</span><br><span class="line">                thread::spawn(<span class="keyword">move</span> || &#123;</span><br><span class="line">                    handle_client(stream)unwrap_or_else(|error| eprintln!(<span class="string">"&#123;:?&#125;"</span>,error));</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart使用io库来处理socket。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"dart:io"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"dart:convert"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    TCPServer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TCPServer() <span class="keyword">async</span> &#123;</span><br><span class="line">    ServerSocket socket = <span class="keyword">await</span> ServerSocket.bind(InternetAddress.loopbackIPv4, <span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">for</span>(Socket skt <span class="keyword">in</span> socket) &#123;</span><br><span class="line">        skt.cast&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt;().transform(utf8.decoder).listen((data) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"From <span class="subst">$&#123;skt.remoteAddress.address&#125;</span> data:"</span> + data);</span><br><span class="line">            skt.add(utf8.encode(<span class="string">"hello client!"</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"dart:io"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"dart:convert"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    TCPClient();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TCPClient() <span class="keyword">async</span> &#123;</span><br><span class="line">    Socket socket = <span class="keyword">await</span> Socket.connect(<span class="string">"127.0.0.1"</span>, <span class="number">9090</span>);</span><br><span class="line">    socket.write(<span class="string">"hello server!"</span>);</span><br><span class="line">    socket.cast&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt;().transform(utf8.decoder).listen(<span class="built_in">print</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/11/BvR3rT.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart日期和时间</title>
    <link href="http://www.shieber.cn/title/bbeafb11/"/>
    <id>http://www.shieber.cn/title/bbeafb11/</id>
    <published>2020-11-11T14:16:40.000Z</published>
    <updated>2020-11-11T16:04:52.872Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/11/BvrY9K.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十八篇：日期和时间。</p><p>时间是任何系统都需要的基本物理量，时间是一门语言的重要组成部分。因为人类使用的时间有秒，分，时，天，周，月，季度，年，代，世纪等等记录方法，所以时间函数实现较为复杂。计算机时间多是用整数来表示，以unix时间戳–秒为单位。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C的time.h头文件定义了时间整数，时间存储等数据结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> <span class="built_in">begin</span>, <span class="built_in">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">begin</span> = clock();</span><br><span class="line">    do_work();</span><br><span class="line">    <span class="built_in">end</span> = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Timeused=%.21f\n"</span>, (<span class="keyword">double</span>)(<span class="built_in">end</span> - <span class="built_in">begin</span>)/CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python的time模块定义了时间处理函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">do_something()</span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Timeused=%.21f\n"</span>, (end - start))</span><br></pre></td></tr></table></figure><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go 有专门的time包来处理时间，它的一个特殊的地方是2006-01-02 15:04:05。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := <span class="keyword">int32</span>(time.Now().Unix())</span><br><span class="line">    fmt.Println(now)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面Format处只能写2006-01-02 15:04:05  </span></span><br><span class="line">    timeStr := time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>) </span><br><span class="line">    fmt.Println(timeStr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust 时间库使用chrono，非官方。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> chrono;</span><br><span class="line"><span class="keyword">use</span> chrono::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sys_time = SystemTime::now()</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"Now time is &#123;:?&#125;"</span>, sys_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> local: DateTime&lt;Local&gt; = Local:now();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"当地时间，以秒计：&#123;:?&#125;"</span>, local.format(<span class="string">"%Y-%m-%d %H:%M:%S"</span>).to_string());</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"当地时间，以毫秒计：&#123;:?&#125;"</span>, local.format(<span class="string">"%Y-%m-%d %H:%M:%S%.3f"</span>).to_string());</span><br></pre></td></tr></table></figure><h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart 自带DateTime类，直接使用时间。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line"><span class="built_in">print</span>(now);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">DateTime</span>(<span class="number">2020</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ds = <span class="keyword">new</span> <span class="built_in">DateTime</span>.utc(<span class="number">2020</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">print</span>(ds);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dp = <span class="built_in">DateTime</span>.parse(<span class="string">"2020-11-11 00:00:00"</span>);</span><br><span class="line"><span class="built_in">print</span>(dp);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/11/BvrY9K.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart正则表达式</title>
    <link href="http://www.shieber.cn/title/3ab0e898/"/>
    <id>http://www.shieber.cn/title/3ab0e898/</id>
    <published>2020-11-11T13:00:08.000Z</published>
    <updated>2020-11-11T13:02:33.175Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/11/BvGtlq.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十七篇：正则表达式。</p><p>正则表达式(regular expression，RegExp)描述了一种字符串匹配模式，该模式可用来检查字符串是否含有某种子串。正则表达式可将匹配到的子串替换，或者从中取出符合条件的子串，比如可用正则表达式匹配手机号、邮箱等。</p><p>正则表达式起源于上世纪的美国。新泽西州的Warren McCulloch和底特律的duWalter Pitts两位神经生理科学家研究出了一种用数学方式来描述神经网络的新方法，他们将神经系统中的神经元描述成了小而简单的自动控制元。</p><p>1956年，哈特福德市的数学家Stephen Kleene在两位前辈早期工作的基础之上，发表了论文–《神经网事件表示法》。他利用称之为正则集合的数学符号来描述此模型，引入了正则表达式的概念。正则被他用来描述其称之为“正则集代数”的一种表达式，因而采用了“正则表达式”这个术语。</p><p>之后，研究人员发现可将这一工作成果应用于其他方面。Unix的主要发明人Ken Thompson把这一成果应用到搜索算法，并将此符号系统引入到Unix上的编辑器QED，用于字符匹配。接着演化出了编辑器ed，并最终引入到grep工具。</p><p>正则表达式分为三部分：</p><ul><li>锚，锚的作用是限定一个匹配起始和结束环境，比如词头，行首等。</li><li>字符集，字符集就是对常见符号的抽象。比如人类常用的符号就是数字，字符，单词，小数点，空格等。所以用\d代表数字，\s代表字符，\w代表单词，.代表小数点，*代表任意字符。</li><li>匹配次数，匹配次数是重复匹配某种字符集的次数，比如\d{3,4}表示匹配数字至少三次，至多四次。</li></ul><p>通过组合这三个部分，正则表达式就能完美的匹配任何需要的子字符串。具体的锚、字符集、次数如何搭配使用是需要学习的，各种编程语言里面也有相应说明，此文不详述。</p><p>正则表达式是一种通用的处理机制，不属于某一门语言，所以许多编程语言和工具都实现了正则表达式，并用以实现查询，替换等功能。</p><p>正则表达式虽然高效，但是一旦写得不好，往往会陷入深度查找，耗时非常长，近乎死循环。所以写正则表达式时一定要细心，反复检查，测试。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C语言中没有实现正则表达式，当然可以自己设计。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python的re模块是专门处理正则表达式的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_substring</span><span class="params">(s)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">r"n.*e"</span>)</span><br><span class="line">    results = pattern.findall(s)</span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> results:</span><br><span class="line">        data.append(res)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go的regexp包是专门处理正则表达式的包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    buf := <span class="string">"abc azzc a7c aac 1ac a9c  tac"</span></span><br><span class="line">    reg := regexp.MustCompile(<span class="string">`a.c`</span>)</span><br><span class="line">    <span class="keyword">if</span> reg == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"regexp err"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    result := reg.FindAllStringSubmatch(buf, <span class="number">-1</span>)</span><br><span class="line">    fmt.Println(<span class="string">"result1 = "</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust的半官方包regex可提供正则表达式解析器。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> regex;</span><br><span class="line"><span class="keyword">use</span> regex::Regex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> num_regex = Regex::new(<span class="string">r"\d+"</span>).unwrap();</span><br><span class="line">    <span class="built_in">assert!</span>(num_regex.is_match(<span class="string">"some string with number 1"</span>)); <span class="comment">// 匹配到数字1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> example_string = <span class="string">"some 123 numbers"</span>; </span><br><span class="line">    <span class="keyword">match</span> num_regex.find(example_string) &#123;  <span class="comment">// 匹配到数字123</span></span><br><span class="line">        <span class="literal">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, &amp;example_string[x.<span class="number">0</span> .. x.<span class="number">1</span>]),</span><br><span class="line">        <span class="literal">None</span>    =&gt; <span class="built_in">unreachable!</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart原生自带正则类RegExp，所以使用正则非常方便，连库都不用导入。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配电话号码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">RegExp</span> phoneExp = <span class="built_in">RegExp</span>(</span><br><span class="line">    <span class="string">r'&amp;((13[0-9])|(14[0-9])|(15[0-9])|(16[0-9])|(17[0-9])|(18[0-9])|(19[0-9]))\d&#123;8&#125;$'</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> matched = phoneExp.hasMatch(<span class="string">"ajkg14381301230"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/11/BvGtlq.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart异常处理</title>
    <link href="http://www.shieber.cn/title/d29eef7e/"/>
    <id>http://www.shieber.cn/title/d29eef7e/</id>
    <published>2020-11-11T07:48:25.000Z</published>
    <updated>2020-11-11T07:42:38.744Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/10/BqY9Og.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十六篇：异常处理。</p><p>程序中往往会出现错误和异常。</p><ul><li>错误指无法预料的错误或逻辑错误，不可恢复。</li><li>异常指某种可能出现且能预料到的错误，可恢复。</li></ul><p>错误会导致程序崩溃和运行出错，而异常则能得到处理并恢复，下文将异常和错误统称为异常。</p><h1 id="C错误处理"><a href="#C错误处理" class="headerlink" title="C错误处理"></a>C错误处理</h1><p>C语言不直接提供错误处理，但作为系统编程语言，它以返回值的形式允许访问底层数据。C语言中，正常退出会返回0；在发生错误时，大多数的C函数返回1或-1，同时会设置一个错误代码errno，该错误代码为全局变量，表示在函数调用期间发生了错误。</p><p>C语言提供了perror()和strerror()函数来显示与errno相关的消息。perror()函数显示传给它的字符串<br>，strerror()函数返回一个指针，指针指向当前errno值的文本表示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> errno; <span class="comment">// 错误号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *pf;</span><br><span class="line">    <span class="keyword">int</span> errnum;</span><br><span class="line"></span><br><span class="line">    pf = fopen(<span class="string">"unexist.txt"</span>,<span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        errnum = errno;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"错误号: %d\n"</span>,errnum);</span><br><span class="line">        perror(<span class="string">"通过perror输出错误信息"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"打开文件错误:%s\n"</span>,strerror(errnum));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fclose(pf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 正常退出，返回0给操作系统</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python异常处理"><a href="#Python异常处理" class="headerlink" title="Python异常处理"></a>Python异常处理</h1><p>Python自带一套错误断言，处理机制。</p><ul><li>assert 断言</li><li>raise 直接产生错误</li><li>try expect else finally 错误捕获处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span> <span class="string">'Error: not equal!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">"Something wrong, error occurred!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = int(input(<span class="string">"Enter number"</span>))</span><br><span class="line">expect ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">10000</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"x must less than 10000"</span>)</span><br><span class="line">    print(x+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"Done"</span>)</span><br></pre></td></tr></table></figure><h1 id="Go异常处理"><a href="#Go异常处理" class="headerlink" title="Go异常处理"></a>Go异常处理</h1><p>Go语言通过内置的错误error接口提供了非常简单的错误处理机制。error类型是一个接口类型，它的定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编码中通过实现error接口类型来生成错误信息，通常在最后的返回值中返回错误信息。使用errors.New可返回一个错误信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">        err := errors.New(<span class="string">"square root fo negative number"</span>)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大部分函数调用都会返回两个值，一个值，一个错误err，可以利用err值判断。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value, err := do_works()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust异常处理"><a href="#Rust异常处理" class="headerlink" title="Rust异常处理"></a>Rust异常处理</h1><p>Rust有一套独特的处理异常情况的机制，它不像Python中的try机制那样简单。对于可恢复错误，可使用Result&lt;T,E&gt;来处理，</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Result</span></span>&lt;T,E&gt; &#123;</span><br><span class="line">    <span class="literal">Ok</span>(T),</span><br><span class="line">    <span class="literal">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不可恢复用panic!，match用于匹配正常或错误情况。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::File;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = File::open(<span class="string">"main.jpeg"</span>);</span><br><span class="line">    <span class="keyword">match</span> f &#123;</span><br><span class="line">        <span class="literal">Ok</span>(f) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"file found &#123;:?&#125;"</span>, f);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">Err</span>(msg) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"file not found \n&#123;:?&#125;"</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">panic!</span>(<span class="string">"Error occurred"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart异常处理"><a href="#Dart异常处理" class="headerlink" title="Dart异常处理"></a>Dart异常处理</h1><p>Dart自带异常处理，且异常本身可被传递。Dart提供异常和错误的类型以及预定义的子类，也可以预定义自己的异常子类，Dart允许抛出任意类型的非空对象作为一个异常。</p><ul><li>assert 断言</li><li>throw rethrow  抛出错误/传递错误</li><li>try on catch finnaly 捕获并处理错误</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">assert</span>(urlString.startsWith(<span class="string">"https"</span>), <span class="string">"URL (<span class="subst">$urlString</span>) should start with https."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"Expected at least 1 section"</span>;</span><br><span class="line">    <span class="keyword">throw</span> FormatException(<span class="string">"Expected at least 1 section"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        do_work1();</span><br><span class="line">    &#125; <span class="keyword">on</span> OutOfLlamasException &#123;</span><br><span class="line">        do_work2();</span><br><span class="line">        <span class="keyword">rethrow</span>; <span class="comment">// 传递错误下去</span></span><br><span class="line">    &#125; <span class="keyword">on</span> Expection <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Unknown error: <span class="subst">$e</span>"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e, s) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Unknown error <span class="subst">$e</span>"</span>);</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"errors stack trace <span class="subst">$s</span>"</span>); <span class="comment">// s是错误栈追踪信息</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/10/BqY9Og.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart的IO和文件读写</title>
    <link href="http://www.shieber.cn/title/5209e731/"/>
    <id>http://www.shieber.cn/title/5209e731/</id>
    <published>2020-11-11T07:11:48.000Z</published>
    <updated>2020-11-11T07:48:08.534Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/09/BHLnCd.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十五篇：IO和文件读写。</p><p>Linux存在基本的IO，stdin、stdout、stderr。输入可以从stdin、文件、网络而来。输出则对应stdout、stderr、文件、网络。</p><h1 id="C语言的标准IO和文件读写"><a href="#C语言的标准IO和文件读写" class="headerlink" title="C语言的标准IO和文件读写"></a>C语言的标准IO和文件读写</h1><p>C中的IO和File操作函数</p><ul><li>IO (scanf, getchar/putchar, gets/puts)</li><li>File (fopen, fclose, fputc, fputs, fgetc, fgets, fopen, seek, read, write, close)</li><li>File operation mode: r w a r+ w+ a+ together with b</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> integer;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter a number:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;integer);  <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, integer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter a char:"</span>);</span><br><span class="line">    c = getchar();  <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">putchar</span>(c);     <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter a string:"</span>);</span><br><span class="line">    gets(str); <span class="comment">// 4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nYou entered::"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(str); <span class="comment">// 5</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 文件描述符fp</span></span><br><span class="line">    fp = fopen(<span class="string">"/tmp/test.txt"</span>, <span class="string">"w+"</span>); <span class="comment">// 6</span></span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">"This is testing for fprintf...\n"</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"This is testing for fputs...\n"</span>, fp); <span class="comment">// 7</span></span><br><span class="line">    fclose(fp); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">1024</span>];</span><br><span class="line">    fp = fopen(<span class="string">"/tmp/test.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, <span class="built_in">buffer</span>); <span class="comment">// 9</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1:%s\n"</span>, <span class="built_in">buffer</span>);</span><br><span class="line">    fgets(buff, <span class="number">1024</span>, (FILE*)fp); <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2:%s\n"</span>, <span class="built_in">buffer</span>);</span><br><span class="line">    fclose(fp); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python语言的标准IO和文件读写"><a href="#Python语言的标准IO和文件读写" class="headerlink" title="Python语言的标准IO和文件读写"></a>Python语言的标准IO和文件读写</h1><p>Python中的IO和File操作函数</p><ul><li><p>IO (input, sys.readline, print)</p></li><li><p>File (open, fileno, read, readline, readlines, seek, write)</p><p>  open原型<br>  open(file,mode=’r’,buffering=-1,encoding=None,errors=None, newline=None,closefd=True,opener=None)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// IO</span><br><span class="line">ipt = int(input(<span class="string">"Please enter a number:"</span>))</span><br><span class="line">print(<span class="string">"You input %d"</span>%ipt)</span><br><span class="line"></span><br><span class="line">// File</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"/tmp/test.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">    data = fobj.read()</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><h1 id="Go语言的标准IO和文件读写"><a href="#Go语言的标准IO和文件读写" class="headerlink" title="Go语言的标准IO和文件读写"></a>Go语言的标准IO和文件读写</h1><p>Go中的IO和File操作函数</p><ul><li>IO (io.Read, io.Write)</li><li>File (os.Open, ioutil, buffer)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// IO</span></span><br><span class="line">    p := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">    n, _ := os.Stdin.Read(p[:]) <span class="comment">// 1</span></span><br><span class="line">    fmt.Fprintln(os.Stdout, <span class="keyword">string</span>(p[:]))</span><br><span class="line"></span><br><span class="line">    rd := bufio.NewReader(os.Stdin) <span class="comment">// 2</span></span><br><span class="line">    res, err := rd.ReadString(<span class="string">'\n'</span>)</span><br><span class="line">    fmt.Println(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">    file, _ := os.Open(<span class="string">"/tmp/test.txt"</span>)</span><br><span class="line">    <span class="keyword">defer</span> file.Close() <span class="comment">// 3</span></span><br><span class="line">    file.Read(buf) <span class="comment">// 4</span></span><br><span class="line">    fmt.Fprintln(os.Stdout, buf)</span><br><span class="line"></span><br><span class="line">    f, _ := ioutil.ReadFile(<span class="string">"file.txt"</span>) <span class="comment">// 5</span></span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(f))</span><br><span class="line"></span><br><span class="line">    fi, _ := os.Open(<span class="string">"file.txt"</span>)</span><br><span class="line">    bf := bufio.NewReader(fi) <span class="comment">// 6</span></span><br><span class="line">    bf.Read(buf) <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line">    f, _ := os.OpenFile(<span class="string">"file.txt"</span>, os.O_APPEND, <span class="number">0666</span>) <span class="comment">// 8</span></span><br><span class="line">    n, _ := io.WriteString(f, <span class="string">"FUCK"</span>) <span class="comment">// 9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust语言的标准IO和文件读写"><a href="#Rust语言的标准IO和文件读写" class="headerlink" title="Rust语言的标准IO和文件读写"></a>Rust语言的标准IO和文件读写</h1><p>Rust中的IO和File操作函数</p><ul><li>IO (args, read_line, io.Write)</li><li>FILE (open, read_to_string)</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;env, fs&#125;;</span><br><span class="line"><span class="keyword">use</span> std::io::stdin;</span><br><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    <span class="comment">// IO</span></span><br><span class="line">    <span class="keyword">let</span> args = env::args(); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> str_buf = <span class="built_in">String</span>::new();</span><br><span class="line">    stdin().read_line(&amp;<span class="keyword">mut</span> str_buf); <span class="comment">// 2</span></span><br><span class="line">        .expect(<span class="string">"Failed to read line"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Your input line is\n&#123;&#125;"</span>, str_buf);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// FILE</span></span><br><span class="line">    <span class="keyword">let</span> text = fs::read_to_string(<span class="string">"file.txt"</span>).unwrap(); <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, text);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> buffer = [<span class="number">0u8</span>;<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> file = fs::File::open(<span class="string">"file.txt"</span>).unwrap(); <span class="comment">// 4</span></span><br><span class="line">    file.read(&amp;<span class="keyword">mut</span> buffer).unwrap(); <span class="comment">// 5</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,buffer);</span><br><span class="line"></span><br><span class="line">    fs::write(<span class="string">"test.txt"</span>, buffer).unwrap(); <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart语言的标准IO和文件读写"><a href="#Dart语言的标准IO和文件读写" class="headerlink" title="Dart语言的标准IO和文件读写"></a>Dart语言的标准IO和文件读写</h1><p>Dart中的IO和File操作函数</p><ul><li>IO (readLineSync)</li><li>FILE (create, readAsString, writeString)</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"dart:io"</span>;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="comment">// IO</span></span><br><span class="line">    <span class="keyword">var</span> line = stdin.readLineSync(encoding:Encoding.getByName(<span class="string">"utf-8"</span>)); <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">print</span>(line.trim() == <span class="string">"2"</span> ? <span class="string">"Yup"</span>:<span class="string">"Nope"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File</span></span><br><span class="line">    <span class="keyword">var</span> sysTempDir = Directory.systemTemp;</span><br><span class="line">    <span class="keyword">new</span> File(<span class="string">"$(sysTempDir.path)/dir/subdir/file.txt"</span>)</span><br><span class="line">        .create(recursive:<span class="keyword">true</span>) <span class="comment">// 2</span></span><br><span class="line">        .then((file) &#123;</span><br><span class="line">            <span class="built_in">print</span>(file.path);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> File(filename).writeString(<span class="string">"Fuck"</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> File(<span class="string">"$(sysTempDir.path)/subdir/file.txt"</span>)</span><br><span class="line">        .readAsString() <span class="comment">// 4</span></span><br><span class="line">        .then((<span class="built_in">String</span> contents) &#123;</span><br><span class="line">            <span class="built_in">print</span>(contents);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> file = <span class="keyword">new</span> File(<span class="string">"file.txt"</span>);</span><br><span class="line">    <span class="keyword">var</span> sink = file.openWrite(); <span class="comment">// 5</span></span><br><span class="line">    sink.write(<span class="string">"File accessed $(new DateTime.now()&#125;\n"</span>); <span class="comment">// 6</span></span><br><span class="line">    sink.close(); <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/09/BHLnCd.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart标准库依赖关系</title>
    <link href="http://www.shieber.cn/title/3c8372aa/"/>
    <id>http://www.shieber.cn/title/3c8372aa/</id>
    <published>2020-11-11T06:08:33.000Z</published>
    <updated>2020-11-11T07:51:18.017Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/11/BjM3U1.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十四篇：标准库依赖关系。</p><p>编程语言的标准库往往存在依赖关系，但一定有些库是自满足而不引入其他库的，本文试图探究各库的依赖关系，看看到底一门语言核心的底层库是如何构建起来的。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C的头文件依赖关系图。（箭头表示引用该库文件）</p><p><img src="https://s1.ax1x.com/2020/11/11/BXLM01.png" alt="c"></p><p>可见，最底层为features, bits, stddef, sys库文件。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python的模块依赖关系图</p><p><img src="https://s1.ax1x.com/2020/11/11/BjSRRP.png" alt="py"></p><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go的包依赖关系图，三幅图是一幅从左到右的完整图片。</p><p><img src="https://s1.ax1x.com/2020/11/11/Bj9pX8.png" alt="Go1"></p><p><img src="https://s1.ax1x.com/2020/11/11/Bj9J91.png" alt="Go2"></p><p><img src="https://s1.ax1x.com/2020/11/11/Bj9tc6.png" alt="Go3"></p><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust的包依赖关系图关系复杂，但经过分析，可以分层：alloc -&gt; core -&gt; std。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">         +---------------------------------------------------------------------------+</span><br><span class="line">std   -&gt; | any array ascii future env error ffi fs io net option os path thread time | 标准库</span><br><span class="line">         +---------------------------------------------------------------------------+</span><br><span class="line">         +----------------------------------------------------------------------+</span><br><span class="line">core  -&gt; | arch borrow cell <span class="built_in">char</span> clone cmp convert <span class="built_in">f64</span> hash <span class="built_in">i64</span> panic slice <span class="built_in">u64</span> | 核心库</span><br><span class="line">         +----------------------------------------------------------------------+</span><br><span class="line">         +--------------------------------------------------------+</span><br><span class="line">alloc -&gt; | alloc boxed rc collections <span class="built_in">str</span> string sync vec prelude |  内存分配库</span><br><span class="line">         +--------------------------------------------------------+</span><br></pre></td></tr></table></figure><h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart的库依赖关系图</p><p><img src="https://s1.ax1x.com/2020/11/11/Bjnbxe.png" alt="d"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/11/BjM3U1.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C/Python/Go/Rust/Dart头文件、库、包、模块</title>
    <link href="http://www.shieber.cn/title/67b18606/"/>
    <id>http://www.shieber.cn/title/67b18606/</id>
    <published>2020-11-10T03:25:34.000Z</published>
    <updated>2020-11-11T08:09:33.409Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/11/BX64Bj.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十三篇：包、库、模块。</p><p>不同语言往往需要引入一些外部代码，这些代码根据语言和组织规则可能被称为头文件、包、库、模块。<br>尽管名字不同，但这些文件都是为了实现代码复用，提高效率，它们都定义一些量，实现一些函数，最后组合在一起。</p><h1 id="C库"><a href="#C库" class="headerlink" title="C库"></a>C库</h1><p>C语言中，存在头文件和库的说法。头文件是一些函数，常量的定义文件，具体实现在各自.c文件中。一部分重要的.h头文件及其.c实现文件组合成了所谓的标准库。其他.c文件使用时直接包含include头文件就可以使用其内部定义的函数。</p><p>C标准库包含如下文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C 标准库  &lt;assert.h&gt; <span class="comment">// 定义变量以验证程序</span></span><br><span class="line">C 标准库  &lt;ctype.h&gt;  <span class="comment">// 定义测试和映射字符的函数</span></span><br><span class="line">C 标准库  &lt;errno.h&gt;  <span class="comment">// 定义错误处理变量和函数</span></span><br><span class="line">C 标准库  &lt;<span class="keyword">float</span>.h&gt;  <span class="comment">// 定义浮点数相关量</span></span><br><span class="line">C 标准库  &lt;limits.h&gt; <span class="comment">// 定义各变量类型属性</span></span><br><span class="line">C 标准库  &lt;locale.h&gt; <span class="comment">// 定义特定地域的设置，如日期格式和货币符号</span></span><br><span class="line">C 标准库  &lt;math.h&gt;   <span class="comment">// 定义各种数学函数</span></span><br><span class="line">C 标准库  &lt;setjmp.h&gt; <span class="comment">// 定义特殊跳转函数</span></span><br><span class="line">C 标准库  &lt;signal.h&gt; <span class="comment">// 定义进程间信号</span></span><br><span class="line">C 标准库  &lt;stdarg.h&gt; <span class="comment">// 定义参数相关宏</span></span><br><span class="line">C 标准库  &lt;stddef.h&gt; <span class="comment">// 定义标准变量和宏</span></span><br><span class="line">C 标准库  &lt;stdio.h&gt;  <span class="comment">// 定义标准输入输出函数 </span></span><br><span class="line">C 标准库  &lt;stdlib.h&gt; <span class="comment">// 定义库变量和工具函数 </span></span><br><span class="line">C 标准库  &lt;<span class="built_in">string</span>.h&gt; <span class="comment">// 定义字符串函数</span></span><br><span class="line">C 标准库  &lt;time.h&gt;   <span class="comment">// 定义时间处理函数</span></span><br></pre></td></tr></table></figure><h1 id="Python模块"><a href="#Python模块" class="headerlink" title="Python模块"></a>Python模块</h1><p>Python中不需要头文件，它直接在一个文件中定义定义函数和变量，这些文件再组合成为模块。模块可以被别的程序引入(import)，以使用该模块中的函数等功能。</p><p>部分Python标准模块如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件处理            #数据压缩打包           #结构化文档</span></span><br><span class="line">string              zlib                  html</span><br><span class="line">re                  gzip                  xml</span><br><span class="line">difflib             bz2                   </span><br><span class="line">textwrap            lzma                  <span class="comment">#网络协议</span></span><br><span class="line">unicodedata         zipfile               webbrowser</span><br><span class="line">stringprep          tarfile               cgi</span><br><span class="line">readline                                  cgitb</span><br><span class="line">rlcompleter         <span class="comment">#文档格式              wsgiref</span></span><br><span class="line">                    csv                   urllib</span><br><span class="line"><span class="comment">#二进制数据服务       configparse           http</span></span><br><span class="line">struct              netrc                 ftplib</span><br><span class="line">codecs              xdrlib                poplib</span><br><span class="line">                    plistlib              imaplib</span><br><span class="line"><span class="comment">#数据类型                                  nntplib</span></span><br><span class="line">datetime            <span class="comment">#加密                  smtplib</span></span><br><span class="line">zoneinfo            hashlib               smtpd</span><br><span class="line">calendar            hamc                  telnetlib</span><br><span class="line">collections         secrets               uuid</span><br><span class="line">heapq                                     socketserver</span><br><span class="line">bisect              <span class="comment">#操作系统              xmlrpc</span></span><br><span class="line">array               os                    ipaddress</span><br><span class="line">weakref             io                    </span><br><span class="line">types               time                  <span class="comment">#多媒体</span></span><br><span class="line">copy                argparse              audioop</span><br><span class="line">pprint              getopt                aifc</span><br><span class="line">reprlib             logging               sunau</span><br><span class="line">enum                getpass               wave</span><br><span class="line">graphlib            curses                chunk</span><br><span class="line">                    platform              colorsys</span><br><span class="line"><span class="comment">#数值和数学           errno                 imghdr</span></span><br><span class="line">numbers             ctypes                sndhrd</span><br><span class="line">math                                      ossaudiodev</span><br><span class="line">cmath               <span class="comment">#并发                 </span></span><br><span class="line">decimal             threading             <span class="comment">#国际化</span></span><br><span class="line">fractions           multiprocessing       gettext</span><br><span class="line">random              concurrent            local</span><br><span class="line">statistics          subprocess            </span><br><span class="line">                    sched                 <span class="comment">#编程框架</span></span><br><span class="line"><span class="comment">#函数编程            queue                 turtle</span></span><br><span class="line">itertools                                 cmd</span><br><span class="line">functools           <span class="comment">#网络及进程间通信        shlex</span></span><br><span class="line">operator            asyncio               </span><br><span class="line">                    socket                <span class="comment">#图形化</span></span><br><span class="line"><span class="comment">#文件和目录           ssl                   tkinter</span></span><br><span class="line">pathlib             select                IDLE</span><br><span class="line">os.path             selectors             </span><br><span class="line">fileinput           asyncore              <span class="comment">#开发工具</span></span><br><span class="line">stat                asynchat              typing</span><br><span class="line">filecmp             signal                pydoc</span><br><span class="line">tempfile            mmap                  doctest</span><br><span class="line">glob                                      unittest</span><br><span class="line">fnmatch             <span class="comment">#网络数据              2to3</span></span><br><span class="line">linecache           email                 test            </span><br><span class="line">shutil              json</span><br><span class="line">                    mailcap</span><br><span class="line"><span class="comment">#数据持久化           mailbox</span></span><br><span class="line">pickle              mimetypes</span><br><span class="line">copyreg             base64</span><br><span class="line">shelve              binhex</span><br><span class="line">marshal             binascii</span><br><span class="line">dbm                 quopri</span><br><span class="line">sqlite3             uu</span><br></pre></td></tr></table></figure><h1 id="Go包"><a href="#Go包" class="headerlink" title="Go包"></a>Go包</h1><p>Go语言将代码集合称为包，使用包需要用import导入，下面是标准包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">archive             压缩打包</span><br><span class="line">bufio               带缓存的I/O操作</span><br><span class="line">builtin             Go预声明标识符文档</span><br><span class="line">bytes               操作[]<span class="keyword">byte</span>常用函数</span><br><span class="line">compress            数据压缩</span><br><span class="line">container           实现了对，循环队列，链表</span><br><span class="line">context             上下文</span><br><span class="line">crypto              常用密码算法常量</span><br><span class="line">database            数据库接口</span><br><span class="line">debug               代码调试</span><br><span class="line">encoding            字节和文本间转换接口</span><br><span class="line">errors              错误处理函数</span><br><span class="line">expvar              公共变量标准接口</span><br><span class="line">flag                令行标签解析</span><br><span class="line">fmt                 格式化I/O函数</span><br><span class="line"><span class="keyword">go</span>                  工具函数</span><br><span class="line">hash                哈希函数接口</span><br><span class="line">html                转义和解转义HTML文本</span><br><span class="line">image               基本的<span class="number">2</span>D图片库</span><br><span class="line">index               索引</span><br><span class="line">io                  为I/O原语提供基础接口</span><br><span class="line">log                 实现简单日志服务</span><br><span class="line">math                提供基本常数和数学函数</span><br><span class="line">mime                实现MIME部分规定</span><br><span class="line">net                 提供可移植的网络I/O接口</span><br><span class="line">os                  提供不依赖平台接口的操作系统函数</span><br><span class="line">path                对斜杠分隔的路径操作</span><br><span class="line">plugin              加载插件</span><br><span class="line">reflect             实现运行时反射，允许操作任意类型对象</span><br><span class="line">regexp              实现正则表达式搜索</span><br><span class="line">runtime             包含与Go运行时系统进行交互的操作</span><br><span class="line">sort                为切片及用户定义集合排序操作提供原语</span><br><span class="line">strconv             实现基本数据类型和其字符串表示的相互转换</span><br><span class="line">strings             实现了用于操作字符的简单函数</span><br><span class="line">sync                提供互斥锁这类基本的同步原语</span><br><span class="line">syscall             系统调用</span><br><span class="line">testing             测试框架</span><br><span class="line">text                实现文本处理</span><br><span class="line">time                提供时间显示和测量函数</span><br><span class="line">unicode             提供测试Unicode码点属性的数据和函数</span><br><span class="line">unsafe              包含关于Go程序类型安全的所有操作</span><br></pre></td></tr></table></figure><h1 id="Rust包-crate、库-模块"><a href="#Rust包-crate、库-模块" class="headerlink" title="Rust包/crate、库/模块"></a>Rust包/crate、库/模块</h1><p>Rust里面存在包，库，模块，crate等说法，且都有对应实体。应该说Rust里面，用cargo new<br>生成的就是包，一个包里有多个目录，一个目录看成一个crate，当这个crate编译后，可能是一个二进制可执行文件，也可能是一个供其他函数调用的库。一个crate里面，往往有很多.rs文将，这些文件称为模块(mod)，使用这些文件或模块需要用use。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package --&gt; crates  (dirs)     一个包存在多个<span class="keyword">crate</span>(dir)</span><br><span class="line"><span class="keyword">crate</span>   --&gt; modules (lib/EFL)  一个<span class="keyword">crate</span>包含多个模块(<span class="keyword">mod</span>)，其<span class="keyword">crate</span>可编译成库或可执行文件</span><br><span class="line">module  --&gt; file.rs (file)     一个模块就是一个.rs文件</span><br><span class="line"></span><br><span class="line">package            &lt;-- 包</span><br><span class="line">├── Cargo.toml</span><br><span class="line">├── src            &lt;-- <span class="keyword">crate</span></span><br><span class="line">│    ├── main.rs   &lt;-- 模块，主模块</span><br><span class="line">│    ├── lib.rs    &lt;-- 模块，库模块(可编译成库或可执行文件)</span><br><span class="line">│    └── math      &lt;-- 模块，数学函数模块math</span><br><span class="line">│        ├─ <span class="keyword">mod</span>.rs &lt;-- 模块，为math模块引入add和sub模块中函数</span><br><span class="line">│        ├─ add.rs &lt;-- 模块，实现数学函数模块的add函数</span><br><span class="line">│        └─ sub.rs &lt;-- 模块，实现数学函数模块的sub函数</span><br><span class="line">└── file           &lt;-- <span class="keyword">crate</span></span><br><span class="line">     ├── core      &lt;-- 模块，文件操作模块</span><br><span class="line">     └── clear     &lt;-- 模块，清理模块</span><br></pre></td></tr></table></figure><p>Rust标准库如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">alloc              hint            mem    </span><br><span class="line">any                <span class="built_in">i8</span>              ptr</span><br><span class="line">array              <span class="built_in">i16</span>             rc</span><br><span class="line">ascii              <span class="built_in">i32</span>             result</span><br><span class="line">borrow             <span class="built_in">i64</span>             slice</span><br><span class="line">boxed              <span class="built_in">i128</span>            <span class="built_in">str</span></span><br><span class="line">cell               io              string</span><br><span class="line"><span class="built_in">char</span>               <span class="built_in">isize</span>           sync</span><br><span class="line">clone              iter            task</span><br><span class="line">cmp                marker          thread</span><br><span class="line">collections        net             time</span><br><span class="line">convert            num             <span class="built_in">u8</span>      </span><br><span class="line">default            ops             <span class="built_in">u16</span></span><br><span class="line">env                option          <span class="built_in">u32</span></span><br><span class="line">error              os              <span class="built_in">u64</span></span><br><span class="line"><span class="built_in">f32</span>                panic           <span class="built_in">u128</span></span><br><span class="line"><span class="built_in">f64</span>                path            <span class="built_in">usize</span></span><br><span class="line">ffi                pin             vec</span><br><span class="line">fmt                prelude         backtrace</span><br><span class="line">fs                 primitive       intrinsics</span><br><span class="line">future             process         lazy</span><br><span class="line">hash                               raw</span><br></pre></td></tr></table></figure><h1 id="Dart库"><a href="#Dart库" class="headerlink" title="Dart库"></a>Dart库</h1><p>Dart语言将各种代码组合起来称为库，使用时用import引入。</p><p>Dart标准库如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>          异步编程    </span><br><span class="line">archive        打包压缩</span><br><span class="line">http           使用http</span><br><span class="line">intl           国际化</span><br><span class="line">logging        日志</span><br><span class="line">path           路径处理</span><br><span class="line">shelf          web中间件</span><br><span class="line">test           测试</span><br><span class="line">yaml           yaml解析器</span><br><span class="line"><span class="keyword">async</span>          异步编程    </span><br><span class="line">collection     集合操作工具类</span><br><span class="line">convert        编码转换</span><br><span class="line">core           内置类型，集合</span><br><span class="line">developer      调试器和分析器</span><br><span class="line">math           数学函数</span><br><span class="line">type_data      高效处理固定大小数据</span><br><span class="line">io             IO操作</span><br><span class="line">isolate        并发</span><br><span class="line">mirrors        反射功能</span><br><span class="line">html           web开发</span><br><span class="line">indexed_db     使用键值对索引</span><br><span class="line">web_*          浏览器相关</span><br><span class="line">js             javascript支持</span><br><span class="line">ffi            支持和其他语言的调用</span><br><span class="line">wasm           编译成webassembly</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/11/BX64Bj.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart面向过程和对象</title>
    <link href="http://www.shieber.cn/title/7aab52cf/"/>
    <id>http://www.shieber.cn/title/7aab52cf/</id>
    <published>2020-11-09T13:18:31.000Z</published>
    <updated>2020-11-11T07:40:56.505Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/09/BbPTC6.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十二篇：面向过程和面向对象。</p><p>面向对象的特点</p><ul><li>封装</li><li>继承</li><li>多态</li></ul><p>面向对象涉及术语</p><ul><li>类: 用来描述具有相同的属性和方法的对象的集合。</li><li>继承：一个派生类继承基类的字段和方法。</li><li>对象：通过类定义的数据结构实例。对象包括数据成员和方法。</li><li>方法：类中定义的函数。</li><li>类变量：类变量是类的属性，类变量定义在类中且在函数体之外。</li><li>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。</li><li>方法重写：从父类继承的方法不能满足子类需求，可对其进行改写，这个过程叫方法覆盖或重写。</li><li>局部变量：定义在方法中的变量，只作用于当前实例的类。</li><li>类实例化：创建一个类的实例，类的具体对象。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以Python为例子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">()</span>:</span>          <span class="comment">#Animal类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, weight)</span>:</span></span><br><span class="line">        self.name = name <span class="comment">#类变量</span></span><br><span class="line">        self.age = age</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span>   <span class="comment">#方法</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAge</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getWeight</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"name"</span>: self.name, <span class="string">"age"</span>: self.age, <span class="string">"weight"</span>: self.weight&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span>       <span class="comment">#继承</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, weight, color)</span>:</span></span><br><span class="line">        super().__init__(name, age, weight)</span><br><span class="line">        self.color = color</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span>   <span class="comment">#重写</span></span><br><span class="line">        tp = <span class="string">"Cat: "</span>     <span class="comment">#局部变量</span></span><br><span class="line">        <span class="keyword">return</span> tp + self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getColor</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.color</span><br><span class="line"></span><br><span class="line">animal = Animal()        <span class="comment">#实例化，animal为对象</span></span><br></pre></td></tr></table></figure><p>面向过程和对象的语言</p><ul><li>C语言是面向过程的语言，只需要实现各种函数，然后调用，各函数独立。</li><li>Python语言是面向对象的语言，可用class来定义类，函数定义在类中。</li><li>Go语言中没有面向对象的类，但通过struct和interface能实现面向对象功能。</li><li>Rust不是面向对象的编程语言，但通过组合，这些面向对象的功能都能得以实现。</li><li>Dart语言是面向对象的语言，在Dart中一切都是对象，即便是数字和空都是对象Object的子类。</li></ul><p>可见，只有C语言才真的无法实现面向对象，C++正好补充了C的这点不足。</p><h1 id="C面向过程"><a href="#C面向过程" class="headerlink" title="C面向过程"></a>C面向过程</h1><p>实现各种函数，再在对应函数中调用，最后由main调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quadratic</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"square of a+b is %d\n"</span>, square(a,b)); <span class="comment">// 调用1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"quadratic of a+b is %d\n"</span>, quadratic(a+b)); <span class="comment">// 调用2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( a + b) * ( a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quadratic</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b) * (a + b) * ( a + b) * (a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python面向对象"><a href="#Python面向对象" class="headerlink" title="Python面向对象"></a>Python面向对象</h1><p>Python自带self表示类自身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius)</span>:</span></span><br><span class="line">        self.radius = radius</span><br><span class="line">        self.__PI = <span class="number">3.141592653</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getArea</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__PI * self.radius * self.radius</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDiameter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * self.radius</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPerimeter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * self.__PI * self.radius</span><br></pre></td></tr></table></figure><h1 id="Go面向对象"><a href="#Go面向对象" class="headerlink" title="Go面向对象"></a>Go面向对象</h1><p>Go利用struct和interface组合实现面向对象功能。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592653</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 形状接口</span></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">    getArea() <span class="keyword">float64</span></span><br><span class="line">    getDiameter() <span class="keyword">float64</span></span><br><span class="line">    getPerimeter() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆及其面积，周长，直径计算方法</span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getArea</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PI * s.Radius * s.Radius</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * PI * s.Radius</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getDiameter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * s.Radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长方形及其面积，周长，直径(斜边长)计算方法</span></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    width <span class="keyword">float64</span></span><br><span class="line">    length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span> <span class="title">getArea</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.width * r.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * ( r.width + r.length )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span> <span class="title">getDiameter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.sqrt(r.width * r.width + r.length * r.length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getArea</span><span class="params">(s *Shape)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.getArea()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDiameter</span><span class="params">(s *Shape)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.getDiameter()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPerimeter</span><span class="params">(s *Shape)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.getPerimeter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> area, diameter, perimeter <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">    circle := Circle&#123; Radius: <span class="number">2.54</span> &#125;</span><br><span class="line">    area = getArea(circle)</span><br><span class="line">    diameter = getDiameter(circle)</span><br><span class="line">    perimeter = getPerimeter(circle)</span><br><span class="line">    fmt.Printf(<span class="string">"Area: %.2f"</span>, area)</span><br><span class="line">    fmt.Printf(<span class="string">"Diam: %.2f"</span>, diameter)</span><br><span class="line">    fmt.Printf(<span class="string">"Peri: %.2f"</span>, perimeter)</span><br><span class="line"></span><br><span class="line">    rectangle = Rectangle&#123; width: <span class="number">2.13</span>, height: <span class="number">3.54</span> &#125;</span><br><span class="line">    area = getArea(rectangle)</span><br><span class="line">    diameter = getDiameter(rectangle)</span><br><span class="line">    perimeter = getPerimeter(rectangle)</span><br><span class="line">    fmt.Printf(<span class="string">"Area: %.2f"</span>, area)</span><br><span class="line">    fmt.Printf(<span class="string">"Diam: %.2f"</span>, diameter)</span><br><span class="line">    fmt.Printf(<span class="string">"Peri: %.2f"</span>, perimeter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust面向对象"><a href="#Rust面向对象" class="headerlink" title="Rust面向对象"></a>Rust面向对象</h1><p>Rust可通过模块来实现封装，使用结构体的impl实现类的功能，trait实现多态。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f.rs</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Number</span></span> &#123;</span><br><span class="line">    field: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Number &#123; <span class="comment">// 为Number实现各种操作函数</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(value: <span class="built_in">i32</span>) -&gt; Number &#123;</span><br><span class="line">        Number&#123;</span><br><span class="line">            field: value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">do_public_works</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"from public method"</span>);</span><br><span class="line">        <span class="keyword">self</span>.private_works();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">private_works</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"from private method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.rs</span></span><br><span class="line"><span class="keyword">mod</span> f</span><br><span class="line"><span class="keyword">use</span> f::Number;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = Number::new(<span class="number">1024</span>);</span><br><span class="line">    obj.do_public_works();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart面向对象"><a href="#Dart面向对象" class="headerlink" title="Dart面向对象"></a>Dart面向对象</h1><p>Dart本身支持面向对象，使用class定义.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; <span class="comment">// 类</span></span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> address = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Person(<span class="built_in">String</span> name, <span class="built_in">int</span> age) &#123; <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> getInfo() &#123; <span class="comment">// 默认公开</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Name: <span class="subst">$name</span>, Age: <span class="subst">$age</span>, Address: <span class="subst">$address</span>"</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _work() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Private work"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="comment">//var person = new Person("Tim", 20);</span></span><br><span class="line">    <span class="keyword">var</span> person = Person();</span><br><span class="line">    person.name = <span class="string">"Tom"</span>;</span><br><span class="line">    person.age = <span class="number">24</span>;</span><br><span class="line">    person.address = <span class="string">"UESTC"</span>;</span><br><span class="line"></span><br><span class="line">    person?.getInfo(); <span class="comment">// person为空时，不调用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> person1;</span><br><span class="line">    person1 = <span class="string">""</span>;</span><br><span class="line">    (person1 <span class="keyword">as</span> Person)?.getInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/09/BbPTC6.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart内置函数</title>
    <link href="http://www.shieber.cn/title/20d2819d/"/>
    <id>http://www.shieber.cn/title/20d2819d/</id>
    <published>2020-11-09T12:01:57.000Z</published>
    <updated>2020-11-11T07:40:43.933Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/10/BqzEUx.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十一篇：内置函数。</p><p>内置函数多是实现的某些通用功能，可以提高程序开发的效率，提升代码的重用性。</p><h1 id="C内置函数"><a href="#C内置函数" class="headerlink" title="C内置函数"></a>C内置函数</h1><p>C的内置函数在stdio.h，time.h，ctype.h，string.h等头文件中定义，使用时需导入对应头文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C各头文件内置函数</span></span><br><span class="line">&lt;stdio.h&gt;   <span class="built_in">isalpha</span>()</span><br><span class="line"><span class="built_in">printf</span>()    <span class="built_in">isdigit</span>()</span><br><span class="line"><span class="built_in">scanf</span>()     <span class="built_in">toupper</span>()</span><br><span class="line">getchar()   <span class="built_in">tolower</span>()</span><br><span class="line"><span class="built_in">putchar</span>()   </span><br><span class="line">            &lt;math.h&gt;</span><br><span class="line">&lt;time.h&gt;    <span class="built_in">ceil</span>()</span><br><span class="line">time()      <span class="built_in">floor</span>()</span><br><span class="line">            <span class="built_in">sqrt</span>();</span><br><span class="line">&lt;<span class="built_in">string</span>.h&gt;  <span class="built_in">pow</span>();</span><br><span class="line"><span class="built_in">strcpy</span>()    <span class="built_in">abs</span>();</span><br><span class="line"><span class="built_in">strcmp</span>()    </span><br><span class="line">            &lt;stdlib.h&gt;</span><br><span class="line">&lt;ctype.h&gt;   srand()</span><br><span class="line"><span class="built_in">isupper</span>()   rand()</span><br><span class="line"><span class="built_in">islower</span>()   <span class="built_in">exit</span>()</span><br><span class="line">            system()</span><br></pre></td></tr></table></figure><h1 id="Python内置函数"><a href="#Python内置函数" class="headerlink" title="Python内置函数"></a>Python内置函数</h1><p>Python内置的函数非常好用，不需要导入包，写代码时直接使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python内置函数</span></span><br><span class="line">abs()          dict()       help()        min()       setattr()</span><br><span class="line">all()          dir()        hex()         next()      slice()</span><br><span class="line">any()          divmod()     id()          object()    sorted()</span><br><span class="line">ascii()        enumerate()  input()       oct()       staticmethod()</span><br><span class="line">bin()          eval()       int()         open()      str()</span><br><span class="line">bool()         exec()       isinstance()  ord()       sum()</span><br><span class="line">bytearray()    filter()     issubclass()  pow()       super()</span><br><span class="line">bytes()        float()      iter()        print()     tuple()</span><br><span class="line">callable()     format()     len()         property()  type()</span><br><span class="line">chr()          frozenset()  list()        range()     vars()</span><br><span class="line">classmethod()  getattr()    locals()      repr()      zip()</span><br><span class="line">compile()      globals()    map()         reversed()  __import__()</span><br><span class="line">complex()      hasattr()    max()         round()</span><br><span class="line">delattr()      hash()       memoryview()  set()</span><br></pre></td></tr></table></figure><h1 id="Go内置函数"><a href="#Go内置函数" class="headerlink" title="Go内置函数"></a>Go内置函数</h1><p>Go虽然继承了C的很多特性，但它的内置函数不是如C那般放在库中，反而如Python般，直接实现在编译器中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Go内置函数</span></span><br><span class="line">init()     初始化<span class="keyword">package</span></span><br><span class="line"><span class="built_in">append</span>()   追加元素到数组、slice</span><br><span class="line"><span class="built_in">copy</span>()     复制和连接slice</span><br><span class="line"><span class="built_in">close</span>()    关闭channel</span><br><span class="line"><span class="built_in">delete</span>()   从<span class="keyword">map</span>中删除key对应的value</span><br><span class="line"><span class="built_in">new</span>()      用来分配内存，用来分配值类型</span><br><span class="line"><span class="built_in">make</span>()     来分配内存，返回Type本身，只用于slice, <span class="keyword">map</span>, channel</span><br><span class="line"><span class="built_in">len</span>()      求长度</span><br><span class="line"><span class="built_in">cap</span>()      求容量</span><br><span class="line"><span class="built_in">real</span>()     返回<span class="built_in">complex</span>的实部</span><br><span class="line"><span class="built_in">imag</span>()     返回<span class="built_in">complex</span>的虚部</span><br><span class="line"><span class="built_in">panic</span>()    立即崩溃</span><br><span class="line"><span class="built_in">recover</span>()  从崩溃中恢复</span><br></pre></td></tr></table></figure><h1 id="Rust内置函数"><a href="#Rust内置函数" class="headerlink" title="Rust内置函数"></a>Rust内置函数</h1><p>Rust中并不存在内置函数，一切都需要自己定义。但是Rust实现了一套高效的宏（函数宏，过程宏），函数宏也可看成内置函数来用。当然也可用macro_rules!自定义宏。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rust内建函数宏</span></span><br><span class="line"><span class="built_in">println!</span>()</span><br><span class="line"><span class="built_in">panic!</span>()</span><br><span class="line"><span class="built_in">vec!</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rust建宏规则</span></span><br><span class="line"><span class="built_in">macro_rules!</span> xxx_macro &#123;</span><br><span class="line">    code_body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart内置函数"><a href="#Dart内置函数" class="headerlink" title="Dart内置函数"></a>Dart内置函数</h1><p>Dart内置的函数多放置在dart:core, dart:io, dart:math, dart:convert库中。其他一些函数是内建的，可以直接使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">assert</span>()</span><br><span class="line"><span class="built_in">List</span>()</span><br><span class="line"><span class="built_in">Map</span>()</span><br><span class="line"><span class="built_in">Set</span>()</span><br><span class="line">Runes()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/10/BqzEUx.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="dart" scheme="http://www.shieber.cn/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart作用域</title>
    <link href="http://www.shieber.cn/title/6587fc8f/"/>
    <id>http://www.shieber.cn/title/6587fc8f/</id>
    <published>2020-11-09T09:38:28.000Z</published>
    <updated>2020-11-11T07:26:13.268Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/09/BHYJtP.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第十篇：作用域。</p><p>作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。如果再访问，就可能访问到其他内存区域引起程序崩溃。不同的语言对其变量都设置了作用域。</p><h1 id="C作用域规则"><a href="#C作用域规则" class="headerlink" title="C作用域规则"></a>C作用域规则</h1><p>C语言中存在三种变量  </p><ul><li>在函数或块内部的局部变量，它们只能被该函数或该代码块内部的语句使用。 </li><li>在所有函数外部的全局变量，在整个程序生命周期内有效，任意函数内部能访问。</li><li>在函数中定义的的形式参数，被当作该函数内的局部变量，如与全局变量同名会优先使用参数。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;      // 数据类型        初始化值</span></span></span><br><span class="line">                        <span class="comment">// int             0</span></span><br><span class="line"><span class="keyword">int</span> g; <span class="comment">//全局           // char            '\0'</span></span><br><span class="line">                        <span class="comment">// float           0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;            <span class="comment">// double          0</span></span><br><span class="line">                        <span class="comment">// pointer         NULL</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c; <span class="comment">//局部</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    g = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d, d = %d\n"</span>, a, b, g);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    c = sum(a, b); <span class="comment">// 参数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c = %d\n"</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python作用域规则"><a href="#Python作用域规则" class="headerlink" title="Python作用域规则"></a>Python作用域规则</h1><p>Python的作用域又叫命名空间(Namespace)。命名空间是从名称到对象的映射，大部分的命名空间都是通过字典来实现的。命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。</p><p>Python中存在四种作用域</p><ul><li>内置空间，Python内置的函数名，异常等。</li><li>全局空间，模块中定义，包括模块，类，函数，常量/变量。</li><li>嵌套空间，在内层函数中引用外层函数定义的名称，变量，参数。</li><li>局部空间，函数中定义的名称，变量，参数。</li></ul><p>搜索规则是局部-&gt;嵌套-&gt;全局-&gt;内置，使用不同空间的变量要使用global和nonlocal关键字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">5</span> <span class="comment">#全局</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_1</span><span class="params">()</span>:</span></span><br><span class="line">    v2 = <span class="number">7</span>   <span class="comment">#局部</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_2</span><span class="params">()</span>:</span></span><br><span class="line">        v3 = <span class="number">9</span>   <span class="comment">#内嵌局部</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line"></span><br><span class="line">    num1 = num + <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_4</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num1</span><br><span class="line">        num1 +=  <span class="number">1</span></span><br><span class="line">        print(num1)</span><br><span class="line"></span><br><span class="line">    func_4()</span><br><span class="line">    print(num, num1)</span><br><span class="line"></span><br><span class="line">    num = <span class="number">123</span></span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure><h1 id="Go作用域规则"><a href="#Go作用域规则" class="headerlink" title="Go作用域规则"></a>Go作用域规则</h1><p>Go作为类C语言，作用域规则和C一样。</p><p>Go的作用域规则</p><ul><li>函数内定义的变量称为局部变量</li><li>函数外定义的变量称为全局变量</li><li>函数定义中的变量称为形式参数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main             <span class="comment">// 数据类型        初始化值    </span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span>             <span class="comment">// int            0</span></span><br><span class="line">                         <span class="comment">// float32        0</span></span><br><span class="line"><span class="keyword">var</span> g <span class="keyword">int</span>                <span class="comment">// pointer        nil</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a, b, c <span class="keyword">int</span> <span class="comment">// 局部</span></span><br><span class="line">    a,b = <span class="number">10</span>, <span class="number">20</span></span><br><span class="line">    c = sum(a, b)   <span class="comment">// 参数</span></span><br><span class="line">    g = c * a;      <span class="comment">// 全局</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"a=%d, b=%d, c=%d, g=%d\n"</span>, a,b,c,g)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust作用域规则"><a href="#Rust作用域规则" class="headerlink" title="Rust作用域规则"></a>Rust作用域规则</h1><p>Rust引入了所有权/借用，生命周期等概念，所以它的作用域规则是所有语言中最严格的，Rust的变量只能按照生命周期和所有权机制，在某个代码块中存在，Rust的困难有一部分就在于其作用域规则。引入这些概念主要还是为了应对复杂类型系统中资源管理的问题，解决悬荡引用等安全问题。</p><p>Rust语言中的作用域概念</p><ul><li>所有权/借用</li><li>生命周期，用’加小写字母，如’a</li><li>静态生命周期，表示从程序运行开始到结束都存在，用’static</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">longer</span></span>&lt;<span class="symbol">'a</span>&gt;(s1:&amp;<span class="symbol">'a</span> <span class="built_in">str</span>, s2:&amp;<span class="symbol">'a</span> <span class="built_in">str</span>) -&gt; &amp;<span class="symbol">'a</span> <span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s2.len() &gt; s1.len() &#123;</span><br><span class="line">        s2</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> long_lived = <span class="number">1</span>;             &lt;----------- long_lived  出现</span><br><span class="line">                                    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> short_lived = <span class="number">2</span>;        &lt;----------- short_lived 出现</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"inner short: &#123;&#125;"</span>, short_lived);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> long_lived = <span class="number">5_f32</span>;     &lt;----------- long_lived  出现(内部)</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"inner long: &#123;&#125;"</span>, long_lived);</span><br><span class="line">    &#125;                               &lt;----------- long_lived 和 short_lived 清除</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> long_lived = <span class="string">'a'</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"outer long: &#123;&#125;"</span>, long_lived);</span><br><span class="line">&#125;                                   &lt;----------- long_lived  清除(外部)</span><br></pre></td></tr></table></figure><h1 id="Dart作用域规则"><a href="#Dart作用域规则" class="headerlink" title="Dart作用域规则"></a>Dart作用域规则</h1><p>Dart是一门真正面向对象的语言，甚至其中的函数也是对象，并且有它的类型Function。这意味着函数可以被赋值给变量或者作为参数传递给其他函数。在函数main之外定义的函数，或是直接在main函数中定义的函数都是全局函数，除此之外，其他函数中定义函数为局部函数。</p><p>Dart作用域概念</p><ul><li>局部变量，函数内可见。</li><li>形式参数，函数内可见。</li><li>全局变量，程序中可见。</li><li>词法闭包，只要调用就可见。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span> makeAdder(<span class="built_in">num</span> addBy) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">num</span> i) =&gt; addBy + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> topLevel = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">var</span> innerMain = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> myFunction() &#123;</span><br><span class="line">        <span class="keyword">var</span> insideFunc = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> nestedFunction() &#123;</span><br><span class="line">            <span class="keyword">var</span> insideNestedFunction = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">assert</span>(topLevel);              <span class="comment">// 顶层变量</span></span><br><span class="line">            <span class="keyword">assert</span>(innerMain);             <span class="comment">// 主函数变量</span></span><br><span class="line">            <span class="keyword">assert</span>(insideFunc);            <span class="comment">// 外层变量</span></span><br><span class="line">            <span class="keyword">assert</span>(insideNestedFunction);  <span class="comment">// 局部变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> add1 = makeAdder(<span class="number">1</span>); <span class="comment">// 使用闭包</span></span><br><span class="line">    <span class="keyword">var</span> add2 = makeAdder(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(add1(<span class="number">3</span>) == <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">assert</span>(add2(<span class="number">3</span>) == <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/09/BHYJtP.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart函数</title>
    <link href="http://www.shieber.cn/title/7fe9af78/"/>
    <id>http://www.shieber.cn/title/7fe9af78/</id>
    <published>2020-11-08T15:24:48.000Z</published>
    <updated>2020-11-11T07:45:40.031Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/09/B7lTIS.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第九篇：函数。</p><p>函数是一组一起执行任务的语句，通过将这些语句组合起来形成一个独立单元有助于代码模块化管理、复用、审阅。函数是程序中的主体，是代码执行的逻辑单元。函数也有其他叫法，比如方法、例程、程序等。</p><p>函数存在声明和定义。声明就是告诉编译器函数的名称、返回类型和参数。而定义则提供了函数的实际主体，真正的代码存在于定义里面。</p><p>函数根据其开放原则可能被自身或其他函数调用。</p><h1 id="C函数"><a href="#C函数" class="headerlink" title="C函数"></a>C函数</h1><p>每个C程序都至少有一个主函数main()，主函数是程序执行的入口。程序还可以定义其他额外的函数，这些函数通过调用结合到一起，最后由main()函数驱动并执行。 C函数往往接收一些参数(parameters)进去，然后内部主体(body)执行，最后返回(return)。还可以将代码划分到不同的函数，划分函数是一门学问，但在逻辑上，通常是根据每个函数执行的特定任务来进行划分的。</p><p>C标准库提供了大量可供程序调用的内置函数，这些函数往往涉及到和操作系统打交道，是C语言的精粹。Linux平台下的glibc就是C标准库和系统调用的合集，所以又称运行时。</p><p>C语言中，函数的参数可能是变量值或变量地址，返回值也可能是值或地址。使用地址是因为有的变量太大，直接传递效率低，费内存。 函数的调用往往涉及到栈操作，调用者会入栈，保存参数和返回地址。被调用者执行时从栈取参数并执行，返回时取返回地址并返回。</p><p>C函数命名大小写均可，原则上都能被调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C函数的声明</span></span><br><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">(parameters...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  <span class="comment">// 声明时要加;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C函数的定义                             </span></span><br><span class="line">return_type function_name(parameters...)  function_name 函数名</span><br><span class="line">&#123;                                         parameters 调用参数</span><br><span class="line">    code_body                             code_body 执行的代码 </span><br><span class="line">&#125;                                         return_type 返回类型</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">        result = num1;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1, num2, result;</span><br><span class="line"></span><br><span class="line">    num1 = <span class="number">10</span>;</span><br><span class="line">    num2 = <span class="number">30</span>;</span><br><span class="line">    result = <span class="built_in">max</span>(num1, num2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h1><p>Python中函数有两种，一种的普通函数，一种时lambda函数，函数参数有普通参数、默认参数、收集参数、关键字参数、收集关键字参数。参数混合调用规则：普通参数、默认参数、关键字参数、收集参数、收集关键字参数依次放置。</p><p>以__开头的函数是私有函数，以__开头和结尾的方法是专有函数。</p><p>Python函数命名一般是下划线分割或驼峰法。Python函数内可以定义内部函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Python函数的定义</span><br><span class="line">def function_name(parameter, *pargs, **kargs):</span><br><span class="line">    code_body</span><br><span class="line">    return_values   </span><br><span class="line"></span><br><span class="line"># 普通参数</span><br><span class="line">def max(num1, num2):</span><br><span class="line">    if num1 &gt; num2:</span><br><span class="line">        return num1</span><br><span class="line">    else:</span><br><span class="line">        return num2</span><br><span class="line"></span><br><span class="line"># 默认参数</span><br><span class="line">def student(name, age, gender=&apos;male&apos;):</span><br><span class="line">    if gender == &apos;male&apos;:</span><br><span class="line">        print(&quot;He is good&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;She is good&quot;)</span><br><span class="line"></span><br><span class="line"># 关键字参数</span><br><span class="line">def student(name=&apos;Tom&apos;, age=20, gender=&apos;male&apos;):</span><br><span class="line">    if gender == &apos;male&apos;:</span><br><span class="line">        print(&quot;%s is a student and he is %d years old&quot;%(name, age))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;%s is a student and she is %d years old&quot;%(name, age))</span><br><span class="line"></span><br><span class="line"># 收集参数</span><br><span class="line">def student(*args):</span><br><span class="line">    for param in args:</span><br><span class="line">        print(param)</span><br><span class="line"></span><br><span class="line"># 收集关键字参数</span><br><span class="line">def student(**kwargs):</span><br><span class="line">    for k, v in kwargs.items():</span><br><span class="line">        print(k, &apos;---&gt;&apos;, v)</span><br><span class="line"></span><br><span class="line"># Python lambda函数定义</span><br><span class="line">lambda [args[,arg2,...argn]]: expression</span><br><span class="line"></span><br><span class="line">x, y = 3, 2</span><br><span class="line">s = lambda x, y: x % y   # s = 1</span><br><span class="line"></span><br><span class="line">class MyClass:</span><br><span class="line">    #专有函数</span><br><span class="line">    def __init__(self,x):</span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    #私有函数</span><br><span class="line">    def __setStr(self):</span><br><span class="line">        self.str = &quot;a&quot;</span><br></pre></td></tr></table></figure><h1 id="Go函数"><a href="#Go函数" class="headerlink" title="Go函数"></a>Go函数</h1><p>Go函数和C函数是类似的，都有返回值，函数名，参数，但Go中还有闭包和方法。Go函数依照其首字母的大小写来判定是否可导出，命名一般是驼峰法。Go函数内部可以定义并使用匿名函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Go函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionname</span><span class="params">(parameters)</span> <span class="title">return_types</span></span> &#123;</span><br><span class="line">    code_body</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go函数实现，可外部引用Max</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num1 &gt; num2 &#123;</span><br><span class="line">        result = num1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = num2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不可外部引用max</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num1 &gt; num2 &#123;</span><br><span class="line">        <span class="keyword">return</span> num1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go闭包，指外部值直接被go函数引用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Println(i*i) <span class="comment">// 闭包</span></span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span> i)</span></span> &#123;</span><br><span class="line">            fmt.Println(i*i)</span><br><span class="line">        &#125;(i) <span class="comment">// 非闭包</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go方法，指一个包含了接受者的函数，接受者是类型、结构体的值或指针。所以给定类型的方法是该类型的方法集，相当于实现了一个类。</span></span><br><span class="line">PI = <span class="number">3.141592653</span>                           class Circle: #Python实现的Circle类</span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;                           def __init__(self, radius):</span><br><span class="line">    radius <span class="keyword">float64</span>                                 self.R = radius</span><br><span class="line">&#125;                                                  self.PI = <span class="number">3.141592653</span></span><br><span class="line">                                           </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getDiameter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;       def getDiameter(self):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * c.radius                            <span class="keyword">return</span> <span class="number">2</span> * self.R</span><br><span class="line">&#125;                                          </span><br><span class="line">                                               def getPerimeter(self):</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;          <span class="keyword">return</span> <span class="number">2</span> * self.PI * self.R</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * PI * c.radius               </span><br><span class="line">&#125;                                              def getArea(self):</span><br><span class="line">                                                       <span class="keyword">return</span> self.PI * self.R * self.R</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getArea</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PI * c.radius * c.radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust函数"><a href="#Rust函数" class="headerlink" title="Rust函数"></a>Rust函数</h1><p>Rust也有主函数main。Rust中一个模块中函数默认私有，要想导出供其他程序使用，需要加上pub关键字，命名多以以下划线分割。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rust函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">func_name</span></span>(parameters) -&gt; return_types &#123;</span><br><span class="line">    code_body</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">max_func</span></span>(num1:<span class="built_in">i32</span>, num2:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> y = &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num1 &gt; num2 &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2 - y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> num2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> res = max_func(num1, num2);</span><br><span class="line">    <span class="built_in">println!</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公开模块</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> a_public_module &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">func_1</span></span>() &#123; <span class="comment">// 公开函数</span></span><br><span class="line">        code_body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">func_2</span></span>() &#123;     <span class="comment">// 私有函数</span></span><br><span class="line">        code_body;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart函数"><a href="#Dart函数" class="headerlink" title="Dart函数"></a>Dart函数</h1><p>Dart函数有main函数、lambda函数、闭包、内嵌函数(内部定义的函数)。参数包含无参数、位置参数(必须位置参数，可选位置参数，默认可选位置参数，{}表示)、命名参数（可选命名参数，默认可选命名参数，用{}表示）。</p><p>以_开头的函数私有，命名用大驼峰，小驼峰，下划线分割均可，但要统一。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dart函数定义</span></span><br><span class="line">return_type function_name(parameters...) =&gt; expression;</span><br><span class="line">return_type function_name(parameters...) &#123;</span><br><span class="line">    code_body;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) &#123;</span><br><span class="line">    <span class="built_in">print</span>(arguments);</span><br><span class="line">    <span class="keyword">assert</span>(arguments.length == <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="built_in">Function</span> makeAdder(<span class="built_in">num</span> addBy) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">num</span> i) =&gt; addBy + i; <span class="comment">// lambda函数</span></span><br><span class="line">&#125;</span><br><span class="line">(<span class="built_in">num</span> x) =&gt; x;</span><br><span class="line">(<span class="built_in">num</span> x) &#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">(<span class="built_in">num</span> x, [<span class="built_in">int</span> step]) =&gt; x + setp;</span><br><span class="line">(<span class="built_in">num</span> x, &#123;<span class="built_in">int</span> step&#125;) =&gt; x + setp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数使用</span></span><br><span class="line"><span class="built_in">String</span> getDefaultMsg() =&gt; <span class="string">"Unknown Error!"</span>; <span class="comment">// 无参数</span></span><br><span class="line"><span class="built_in">String</span> getErrorMsg(Exception e) =&gt; e.toString();  <span class="comment">// 必须位置参数</span></span><br><span class="line"><span class="built_in">String</span> getErrorMsg([<span class="built_in">String</span> e]) =&gt; e ?? <span class="string">"Unknown Error!"</span>;  <span class="comment">// 可选位置参数</span></span><br><span class="line"><span class="built_in">String</span> getErrorMsg([Exception exp], [<span class="built_in">String</span> e]) =&gt; <span class="string">"<span class="subst">$&#123;exp.toString()&#125;</span>--<span class="subst">$e</span>"</span>;  <span class="comment">// 混合参数</span></span><br><span class="line"><span class="built_in">num</span> add1(&#123;<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c&#125;) &#123; <span class="comment">// 命名参数</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">num</span> add2(<span class="built_in">num</span> a,<span class="built_in">num</span> b, &#123;<span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;) &#123; <span class="comment">// 可选命名参数位于后面</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">num</span> add3(<span class="built_in">num</span> a, <span class="built_in">num</span> b, [<span class="built_in">num</span> c=<span class="number">5</span>]) &#123; <span class="comment">// 可选位置默认参数位于后面</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">num</span> add3(<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c=<span class="number">5</span>) &#123; <span class="comment">// 可选命名默认参数位于后面</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶层函数</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(add1(c:<span class="number">1</span>,a:<span class="number">2</span>,b:<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内嵌函数</span></span><br><span class="line"><span class="built_in">int</span> fibonacci(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; lastTwo(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &lt;<span class="built_in">int</span>&gt;[<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> p = lastTwo(n<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> &lt;<span class="built_in">int</span>&gt;[p[<span class="number">1</span>],p[<span class="number">0</span>]+p[<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lastTwo(n)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> getValue() =&gt; <span class="number">100</span>;  <span class="comment">// 静态函数</span></span><br><span class="line">    <span class="built_in">String</span> _name; <span class="comment">// 私有变量</span></span><br><span class="line">    <span class="built_in">int</span> _age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> PrintInfo() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>._age&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _run() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"私有函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execRun() &#123;</span><br><span class="line">        <span class="keyword">this</span>._run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/09/B7lTIS.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart控制原语</title>
    <link href="http://www.shieber.cn/title/5ad75c9d/"/>
    <id>http://www.shieber.cn/title/5ad75c9d/</id>
    <published>2020-11-08T13:02:25.000Z</published>
    <updated>2020-11-11T07:45:22.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/08/BTBsJI.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第八篇：流程控制原语。</p><p>流程控制原语，主要管理代码执行逻辑和路径，包括判断，跳转，循环，错误与异常。无论是面向对象还是面向过程，流程控制都必不可少。</p><h1 id="C流程控制原语-无错误处理"><a href="#C流程控制原语-无错误处理" class="headerlink" title="C流程控制原语[无错误处理]"></a>C流程控制原语[无错误处理]</h1><ul><li>if else </li><li>switch case</li><li>?:</li><li>for </li><li>while </li><li>do while </li><li>goto continue break</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    int num;</span><br><span class="line">    printf(&quot;Please enter a numer:&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line"></span><br><span class="line">    if (num &gt; 0) &#123;</span><br><span class="line">        printf(&quot;Greater than zero\n&quot;);</span><br><span class="line">    &#125;  </span><br><span class="line">    else if (num &lt; 0) &#123;</span><br><span class="line">        printf(&quot;Less than zero\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        printf(&quot;Equal to zero\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch (num) &#123;</span><br><span class="line">        case 0:</span><br><span class="line">            printf(&quot;Zero\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        case 1:</span><br><span class="line">            printf(&quot;One\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            printf(&quot;Other&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (num % 2 == 0) ? printf(&quot;Even\n&quot;):printf(&quot;Odd\n&quot;);</span><br><span class="line"></span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; num; i++) &#123;</span><br><span class="line">        if (i % 2 == 0) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d&quot;,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (num &gt; 0) &#123;</span><br><span class="line">        printf(&quot;%d&quot;, 2*num--);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        printf(&quot;%d&quot;, 3*num++);</span><br><span class="line">    &#125; while (num &lt;= 0);</span><br><span class="line"></span><br><span class="line">    LOOP: if (num &lt; 10) &#123;</span><br><span class="line">        printf(&quot;%d&quot;, num++);</span><br><span class="line">        goto LOOP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Python流程控制原语"><a href="#Python流程控制原语" class="headerlink" title="Python流程控制原语"></a>Python流程控制原语</h1><ul><li>if elif else</li><li>for in range</li><li>for else</li><li>while</li><li>while else</li><li>continue break pass </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3 </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">num = int(input(<span class="string">"Please enter a numer:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"Greater than zero"</span>)</span><br><span class="line"><span class="keyword">elif</span> num &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"Less than zero"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Equal to zero"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">10</span>:</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    print(<span class="number">2</span>*num)</span><br><span class="line">    num -= <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure><h1 id="Go流程控制原语"><a href="#Go流程控制原语" class="headerlink" title="Go流程控制原语"></a>Go流程控制原语</h1><ul><li>if else</li><li>switch case default fallthrough</li><li>select case default</li><li>for</li><li>goto continue break</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span> </span><br><span class="line">    <span class="string">"os"</span> </span><br><span class="line">    <span class="string">"strconv"</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n stirng</span><br><span class="line">    fmt.Print(<span class="string">"Please enter a numer:"</span>)</span><br><span class="line">    fmt.Scanln(&amp;n)</span><br><span class="line"></span><br><span class="line">    num, err := strconv.Atoi(n)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        e = errors.New(<span class="string">"convert error"</span>)</span><br><span class="line">        fmt.Println(e)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Greater than zero"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Less than zero"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Equal to zero\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> num &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Zero"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            fmt.Println(<span class="string">"One"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nums <span class="keyword">interface</span>&#123;&#125; = num</span><br><span class="line">    <span class="keyword">switch</span> nums.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Nil"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Int"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Float64"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">bool</span>, <span class="keyword">string</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Bool or String"</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> c1, c2 <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;- c1:</span><br><span class="line">            fmt.Println(<span class="string">"Recieved c1"</span>)</span><br><span class="line">        <span class="keyword">case</span> &lt;- c2:</span><br><span class="line">            fmt.Println(<span class="string">"Recieved c2"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Not recieved"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span>([]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;) &#123;</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="number">2</span>*num)</span><br><span class="line">        num--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOOP: <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">        num++</span><br><span class="line">        <span class="keyword">goto</span> LOOP</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rust流程控制原语"><a href="#Rust流程控制原语" class="headerlink" title="Rust流程控制原语"></a>Rust流程控制原语</h1><ul><li>if else</li><li>for in</li><li>while</li><li>loop break</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> line = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Please enter a numer:"</span>);</span><br><span class="line">    <span class="keyword">let</span> _ = io::stdin()</span><br><span class="line">        .read_line(&amp;<span class="keyword">mut</span> line)</span><br><span class="line">        .unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num:<span class="built_in">i32</span> = line</span><br><span class="line">        .trim()</span><br><span class="line">        .parse::&lt;<span class="built_in">i32</span>&gt;()</span><br><span class="line">        .unwrap(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Greater than zero"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Less than zero"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Equal to zero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..num &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="number">2</span>*num);</span><br><span class="line">        num -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> num &gt; <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,num);</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart流程控制原语"><a href="#Dart流程控制原语" class="headerlink" title="Dart流程控制原语"></a>Dart流程控制原语</h1><ul><li>if else</li><li>switch case default</li><li>for</li><li>for in </li><li>while</li><li>do while</li><li>continue break</li><li>?: ?? ??=</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"dart:io"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() </span><br><span class="line">&#123;</span><br><span class="line">    stdout.write(<span class="string">"Please enter a numer:"</span>);</span><br><span class="line">    <span class="keyword">var</span> line = stdin.readLineSync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">num</span> = <span class="built_in">int</span>.parse(line);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Greater than zero"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Less than zero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Equal to zero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">num</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"One"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Other"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;i&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">2</span>*i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">const</span>[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="built_in">print</span>(prop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">num</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">2</span>*<span class="built_in">num</span>);</span><br><span class="line">        <span class="built_in">num</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">num</span>);</span><br><span class="line">        <span class="built_in">num</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">num</span> &lt; <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    LOOP1: </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">num</span>);</span><br><span class="line">        <span class="built_in">num</span> += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span> LOOP1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LOOP2:</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span> LOOP2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = <span class="built_in">num</span> &gt; <span class="number">0</span> ? <span class="string">"greater"</span>:<span class="string">"less or equal"</span>;</span><br><span class="line">    <span class="built_in">print</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">num</span> ??= <span class="number">1</span>; </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">num</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> y = <span class="built_in">num</span> ?? <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">print</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/08/BTBsJI.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart运算符</title>
    <link href="http://www.shieber.cn/title/ed051314/"/>
    <id>http://www.shieber.cn/title/ed051314/</id>
    <published>2020-11-07T12:37:03.000Z</published>
    <updated>2020-11-11T07:21:34.600Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/BIFNv9.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第七篇：运算符。</p><p>运算符是一种告诉编译器/解释器执行特定数学，逻辑，关系等操作的符号。</p><h1 id="C运算符"><a href="#C运算符" class="headerlink" title="C运算符"></a>C运算符</h1><ul><li>算术运算符 [+ - * / % ++ –]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [sizeof  &amp;(取址)  *(取值)  ?:]</li></ul><h1 id="Python运算符"><a href="#Python运算符" class="headerlink" title="Python运算符"></a>Python运算符</h1><ul><li>算术运算符 [+ - * / % // **]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [and or not]</li><li>位运算符是 [&amp; | ^ ~ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= := += -= *= /= %= **= //= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [is, is not,  in, not in]]</li></ul><h1 id="Go运算符"><a href="#Go运算符" class="headerlink" title="Go运算符"></a>Go运算符</h1><ul><li>算术运算符 [+ - * / % ++ –]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [&amp;(取址)  *(取值)]</li></ul><h1 id="Rust运算符"><a href="#Rust运算符" class="headerlink" title="Rust运算符"></a>Rust运算符</h1><ul><li>算术运算符 [+ - * / %]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [-(取负) !(取反) &amp;(租借)  *(取值/指针) -&gt; 函数闭包 ?(错误) as(类型转换)]</li></ul><h1 id="Dart运算符"><a href="#Dart运算符" class="headerlink" title="Dart运算符"></a>Dart运算符</h1><ul><li>算术运算符 [+ - * / ~/ %]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ ~ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= ~/= %= ??= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li><li>其他运算符 [-(取负) as is is! . ?: ?? ?. ..]</li></ul><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>对比发现，下面这些运算符是所有语言都有的，且用法也一样。</p><ul><li>算术运算符 [+ - * / %]</li><li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li><li>逻辑运算符 [&amp;&amp; || !]</li><li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li><li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// operators.c C中使用运算符 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c1, c2, c3, c4, c5, c6 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    c1 = a + b;</span><br><span class="line">    c2 = a - b;</span><br><span class="line">    c3 = a * b;</span><br><span class="line">    c4 = b / a;</span><br><span class="line">    c5 = a % b;</span><br><span class="line">    c6 += c5;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a == b\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a != b\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !a &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ture\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> b &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        a *= <span class="number">2</span>;</span><br><span class="line">        b -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c1 &amp;&amp; c2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ture\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c3 &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c4 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c4 &amp; c5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c5 | c6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c5 ^ c6);</span><br><span class="line"></span><br><span class="line">    c6 &amp;= c5;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c6);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/BIFNv9.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart常量和变量</title>
    <link href="http://www.shieber.cn/title/bf474c89/"/>
    <id>http://www.shieber.cn/title/bf474c89/</id>
    <published>2020-11-07T08:22:04.000Z</published>
    <updated>2020-11-11T07:22:25.480Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/08/Bo6QFH.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第六篇：常量和变量。</p><p>编程语言中的量是一种表述和存储模型，它表征了某个对象或事物在内存中的保存和使用方式。这些量即有值又有类型。常量就是值和类型均不能变的量，相反，变量的值可以变，但类型不可变，除非重定义。</p><h1 id="C常量和变量"><a href="#C常量和变量" class="headerlink" title="C常量和变量"></a>C常量和变量</h1><p>C中常量</p><ul><li>define 定义</li><li>const 定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量定义方式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 9.8   <span class="comment">// 没有;号</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">54</span>;</span><br></pre></td></tr></table></figure><p>C中变量</p><ul><li>type variable 定义方式1</li><li>type variable = value 定义方式2</li><li>type variable1, variable2 定义方式3</li><li>type variable1 = value1, variable2 = value2 定义方式4</li><li>extern type variable 定义方式5</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C中变量类型</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">int</span> <span class="keyword">float</span> <span class="keyword">double</span></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">struct</span> <span class="title">union</span></span></span><br><span class="line"><span class="class"><span class="title">array</span></span></span><br><span class="line"><span class="class"><span class="title">pointer</span></span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">C</span>变量定义及初始化</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">i</span>;</span></span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>, d = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> l = <span class="string">"s"</span>;</span><br><span class="line"><span class="keyword">float</span> m = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> WEEK&#123; MON = <span class="number">1</span>,Tue,Wed,Thu,Fri,Sat,Sun&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125;s1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> subject[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> book_id;</span><br><span class="line">&#125;k1;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">t1</span>, <span class="title">t2</span>[20], *<span class="title">t3</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125;Simple;</span><br><span class="line">Simple u1, u2[<span class="number">20</span>], *u3;</span><br><span class="line"></span><br><span class="line">unio Data &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">&#125;data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> Data newData; <span class="comment">// 一次最好只使用一个变量</span></span><br><span class="line">newData.i = <span class="number">10</span>;</span><br><span class="line">newData.f = <span class="number">12.5</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(newData.str <span class="string">"C programming"</span>);</span><br></pre></td></tr></table></figure><h1 id="Python常量和变量"><a href="#Python常量和变量" class="headerlink" title="Python常量和变量"></a>Python常量和变量</h1><p>Python中并没有C中那种命名常量，一切都看使用形式。数字、字符串、布尔值、空值等都是常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 常量定义方式</span><br><span class="line">PI = <span class="number">3.141592653</span></span><br><span class="line">NAME = <span class="string">"Shieber"</span></span><br><span class="line">YES = <span class="literal">True</span></span><br><span class="line">RESULT = <span class="literal">None</span></span><br><span class="line">PERSON = (<span class="string">"Shieber"</span>, <span class="number">24</span>, <span class="number">172</span>)</span><br><span class="line"></span><br><span class="line">// 变量定义方式</span><br><span class="line">age = <span class="number">24</span></span><br><span class="line">name = [<span class="string">"Shieber"</span>,<span class="string">"Kew"</span>,<span class="string">"Kim"</span>]</span><br><span class="line">dics = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</span><br><span class="line">sets = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="Go常量和变量"><a href="#Go常量和变量" class="headerlink" title="Go常量和变量"></a>Go常量和变量</h1><p>Go中基本变量包括布尔型，数字型，字符串，它的定义和C一样使用const。</p><p>Go中常量</p><ul><li>const 定义</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量定义方式</span></span><br><span class="line"><span class="keyword">const</span> i <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> y <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> b <span class="keyword">string</span> = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">const</span> a, b = <span class="string">"a"</span>, <span class="string">"b"</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span>      <span class="comment">// 0</span></span><br><span class="line">    b             <span class="comment">// 1</span></span><br><span class="line">    _             <span class="comment">// 2</span></span><br><span class="line">    d             <span class="comment">// 3</span></span><br><span class="line">    e = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 16</span></span><br><span class="line">    f             <span class="comment">// 32 </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Go中变量</p><ul><li>var定义</li><li>:= 定义</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量定义方式</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> bar [<span class="number">10</span>]<span class="keyword">float32</span></span><br><span class="line">baz := [...]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>      <span class="comment">//映射</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">n := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">30</span>)  <span class="comment">//切片</span></span><br><span class="line">q := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)   <span class="comment">//通道</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">struct</span> person &#123;</span><br><span class="line">    Name: <span class="keyword">string</span></span><br><span class="line">    Gender: <span class="keyword">string</span></span><br><span class="line">    Age: <span class="keyword">int</span></span><br><span class="line">    Address: <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p := person&#123;</span><br><span class="line">    Name: <span class="string">"Shieber"</span>,</span><br><span class="line">    Gender: <span class="string">"Male"</span>,</span><br><span class="line">    Age: <span class="number">24</span>,</span><br><span class="line">    Address: <span class="string">"CD"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d, e <span class="keyword">int</span></span><br><span class="line">c, d, e = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d, e  = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">c, d, e := <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"Shieber"</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"Shieber"</span></span><br><span class="line"></span><br><span class="line">s := <span class="string">"Shieber"</span></span><br></pre></td></tr></table></figure><h1 id="Rust常量和变量"><a href="#Rust常量和变量" class="headerlink" title="Rust常量和变量"></a>Rust常量和变量</h1><p>Rust中常量定义和C中相似，只是Rust加入了生命周期概念。</p><p>Rust中常量</p><ul><li>const 定义常量，类似C中#define </li><li>static 定义全局变量，可当常量使用</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AGE:<span class="built_in">i32</span> = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">const</span> NUM:<span class="built_in">f64</span> = <span class="number">3.0</span>;</span><br><span class="line"><span class="keyword">const</span> NUMS:[<span class="built_in">i32</span>:<span class="number">4</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> NAME:<span class="built_in">String</span> = <span class="string">"Shieber"</span></span><br></pre></td></tr></table></figure><p>Rust中变量</p><ul><li>let 定义，值不能变，但变量能重定义</li><li>let mut 定义，值能变，变量也能重定义</li><li>static mut 定义，静态变量，但值可变</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量定义方式</span></span><br><span class="line"><span class="keyword">let</span> x:<span class="built_in">f64</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">6.28</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> z = <span class="number">70000</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> k: int64 = <span class="number">70000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> NUM:<span class="built_in">i32</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">    NUM += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Num:&#123;&#125;"</span>,NUM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart常量和变量"><a href="#Dart常量和变量" class="headerlink" title="Dart常量和变量"></a>Dart常量和变量</h1><p>Dart中常量</p><ul><li>const  定义并赋值</li><li>final  定义时可不赋值，但只能赋值一次</li></ul><p>final和const区别：final修饰的是变量，定义时可不赋值，但初始化赋值只能一次，之后就不再变，类似常量。而const一开始修饰的就必须是常量，且必须初始化。final用时才申请内存，const一开始就处理好了，所以速度要快些。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592653</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> F = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">int</span> A; <span class="comment">//未初始化</span></span><br><span class="line">A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> C = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> NAME = <span class="string">'Shieber'</span>; <span class="comment">// 可以加上类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> bar = <span class="keyword">const</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> baz = <span class="keyword">const</span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> x; <span class="comment">// 内部变量必须是final，因为类型不定</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> y;</span><br><span class="line">    <span class="keyword">const</span> Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y); <span class="comment">// 返回必须是const</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dart中变量</p><ul><li>var 定义</li><li>dynamic 定义，类型可变</li><li>type variable  定义</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Shieber'</span>; <span class="comment">// 自动推导类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dynamic</span> str = <span class="string">'Shieber'</span>;</span><br><span class="line">str = <span class="number">20</span>;            <span class="comment">// dynamic变量的类型可改变</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> str = <span class="string">'Shieber'</span>;</span><br><span class="line"><span class="built_in">String</span> s = <span class="string">'''</span></span><br><span class="line"><span class="string">Hello</span></span><br><span class="line"><span class="string">Dart</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> y = <span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">int</span> str = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">double</span> c = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> l2 = <span class="keyword">const</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// const 可构造变量, l2可修改</span></span><br><span class="line"><span class="built_in">List</span> l3 =  <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">l3.add(<span class="string">'z'</span>);</span><br><span class="line">l3.add(<span class="string">'k'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span> m1 = &#123;</span><br><span class="line">    <span class="string">'Name'</span>: <span class="string">'Shieber'</span>,</span><br><span class="line">    <span class="string">'Age'</span>: <span class="number">24</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span> m2 = <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="string">'Name'</span>: <span class="string">'Shieber'</span>,</span><br><span class="line">    <span class="string">'Age'</span>: <span class="number">24</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m3[<span class="string">'Name'</span>] = <span class="string">'Shieber'</span>;</span><br><span class="line">m3[<span class="string">'Age'</span>] = <span class="number">24</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/08/Bo6QFH.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart数据类型及其转换</title>
    <link href="http://www.shieber.cn/title/6a4fc2a2/"/>
    <id>http://www.shieber.cn/title/6a4fc2a2/</id>
    <published>2020-11-07T03:23:55.000Z</published>
    <updated>2020-11-11T07:20:47.408Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5B37R.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第五篇：数据类型及其转换规则。</p><h1 id="C语言数据类型"><a href="#C语言数据类型" class="headerlink" title="C语言数据类型"></a>C语言数据类型</h1><p>因为C是底层语言，所以它的数据类型偏底层，和内存联系在一起。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>基本类型</strong></p><ul><li>字符类型 char  </li><li>数值类型 [signed/unsigned] short int long float double </li></ul><p><strong>派生类型</strong>  </p><ul><li>枚举体型 enum  </li><li>结构体型 struct  </li><li>联合体型 union  </li><li>数组类型 array  </li><li>函数类型 function </li></ul><p><strong>指针类型</strong></p><ul><li>指针类型 pointer </li></ul><p><strong>空类型</strong></p><ul><li>空类型 void</li></ul><h3 id="类型转变"><a href="#类型转变" class="headerlink" title="类型转变"></a>类型转变</h3><p>C语言中的数值数据会因为所处的代码上下文环境而发生类型转变，如降级，提升。</p><p>以下是C语言中数据类型转换的基本规则：</p><ul><li>强制转换格式为 (类型名) (表达式)</li><li>在表达式中，参与运算的量的类型不同时会转换为同一类型</li><li>在表达式中，有符号和无符号的char和short类型将自动转换为int</li><li>在包含两种数据类型的任何运算中，较低级别类型会转为较高级别的数据类型</li><li>赋值语句中结果将转换为被赋值量类型，可能级别提升或者降级，提升无损，降级可能丢失数据</li><li>函数参数传递时，char和short转为int，float转为double，可通过函数原型指定以阻止提升的发生</li><li>数据类型级别高低顺序是long double、double、float、usigned long、long、unsigned int、int，当long和int具有相同大小时，unsigned int级别高于long</li></ul><h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><p>Python作为动态语言，数据分可变与否，偏实用。</p><h3 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>不可变类型</strong>    </p><ul><li>布尔类型 bool</li><li>字符串型 string    </li><li>元组类型 tuple   </li><li>数值类型 number [int float complex]  </li></ul><p><strong>可变类型</strong>  </p><ul><li>列表类型 list  </li><li>字典类型 dict  </li><li>集合类型 set   </li></ul><h3 id="数据类型转变"><a href="#数据类型转变" class="headerlink" title="数据类型转变"></a>数据类型转变</h3><p>Python支持的数值类型有整型int、浮点型float、复数型complex。但Python中，数据类型不会自动转换，有需要时，要自己调用相应函数实现转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">""</span>.join(lst)</span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'3'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'3'</span>)</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>complex(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="number">3</span>+<span class="number">1j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">3</span>)</span><br><span class="line"><span class="string">'3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(lst)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(<span class="string">'123'</span>)</span><br><span class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">97</span>)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">21</span>)</span><br><span class="line"><span class="string">'0x15'</span></span><br><span class="line">&gt;&gt; oct(<span class="number">21</span>)</span><br><span class="line"><span class="string">'0o25'</span></span><br></pre></td></tr></table></figure><p>具体转换规则如下图:</p><p><img src="https://s1.ax1x.com/2020/11/10/BqWWKe.png" alt="data2p"></p><h1 id="Go数据类型"><a href="#Go数据类型" class="headerlink" title="Go数据类型"></a>Go数据类型</h1><p>Go作为网络时代的C，其数据类型中既有偏底层的，又有偏实用的，其中有一些是Go特有的。</p><h3 id="数据类型-2"><a href="#数据类型-2" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>基本类型</strong>  </p><ul><li>布尔类型 bool</li><li>码点类型 rune</li><li>字符及串 byte string  </li><li>数值类型 (u)int(8,16,32,64) float(32,64) complex  </li></ul><p><strong>派生类型</strong>  </p><ul><li>指针类型 pt := &amp;v (nil)  </li><li>数组类型 nu := [4]int{0,1,2,3}   </li><li>切片类型 sl := []int{0,1,2,3,}  </li><li>映射类型 mp := make(map[string]string)  </li><li>结构类型 type Employee struct {}  </li><li>管道类型 ch := make(chan int, 2)  </li><li>接口类型 func (p *Ptr) getName() string{}  </li><li>函数类型 func sayHello(name strin){}  </li></ul><h3 id="数据类型转变-1"><a href="#数据类型转变-1" class="headerlink" title="数据类型转变"></a>数据类型转变</h3><p>GO中数据类型一般需要显式转换，但一些底层有着相同类型的数据也会隐式转换。</p><ul><li><code>byte</code> 和 <code>uint8</code></li><li><code>rune</code> 和 <code>int32</code></li><li><code>[]byte</code> 和 <code>[]uint8</code></li><li>转换规则是 <code>(T) (x)</code>。</li></ul><p>对于接口类型，可通过断言转换为对应类型。而所有unsafe pointer都是unsafe.Pointer类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">interface</span>&#123;&#125; = a</span><br><span class="line"></span><br><span class="line">c := b.(<span class="keyword">int</span>) <span class="comment">// c是int型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line">mean := <span class="keyword">float32</span>(sum) / <span class="keyword">float32</span>(count)</span><br></pre></td></tr></table></figure><h1 id="Rust数据类型"><a href="#Rust数据类型" class="headerlink" title="Rust数据类型"></a>Rust数据类型</h1><p>Rust面向底层，数据类型和C很像，但又有些数据类型和Go相似。</p><h3 id="数据类型-3"><a href="#数据类型-3" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>标量类型</strong></p><ul><li>布尔类型 bool</li><li>字符类型 char  </li><li>数值类型 u|i(8/16/32/64/128/size)  f32(64)  </li></ul><p><strong>复合类型</strong></p><ul><li>元组类型 tuple</li><li>数组类型 array</li><li>切片类型 slice</li><li>结构体型 struct</li><li>枚举类型 enum</li><li>泛型类型 generics [trait]</li></ul><h3 id="数据类型转变-2"><a href="#数据类型转变-2" class="headerlink" title="数据类型转变"></a>数据类型转变</h3><p>Rust不提供原生类型之间的隐式类型转换，但可使用as关键字显式类型转换。整型之间的转换大体使用且遵循C语言惯例，在Rust中所有整型转换都是定义良好的。as只能用于i64 i32 f64 f32 u32 u8 char类型。</p><p>Rust内部对于Struce和Enum的类型转换提供了From和Into两个trait，实现From会默认实现Into。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">From</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>&lt;T&gt; -&gt; <span class="keyword">Self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Info</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">into</span></span>&lt;T&gt; -&gt; T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(overflowing_literals)]</span>  <span class="comment">// 忽略类型转换的溢出警告</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> decimal = <span class="number">61.3214_f32</span>;</span><br><span class="line">    <span class="keyword">let</span> integer: <span class="built_in">u8</span> = decimal;   <span class="comment">// 此行错误，默认不能将f32转为u8</span></span><br><span class="line">    <span class="keyword">let</span> integer = decimal <span class="keyword">as</span> <span class="built_in">u8</span>; <span class="comment">// 正确，as转换</span></span><br><span class="line">    <span class="keyword">let</span> character = integer <span class="keyword">as</span> <span class="built_in">char</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"1000 as a u16 is: &#123;&#125;"</span>, <span class="number">1000</span> <span class="keyword">as</span> <span class="built_in">u16</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"1000 as a u8 is: &#123;&#125;"</span>, <span class="number">1000</span> <span class="keyword">as</span> <span class="built_in">u8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[derive(Debug)]</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span> &#123;</span><br><span class="line">        re: <span class="built_in">i32</span>,</span><br><span class="line">        im: <span class="built_in">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">impl</span> <span class="built_in">From</span>&lt;<span class="built_in">i32</span>&gt; <span class="keyword">for</span> Complex &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(re: <span class="built_in">i32</span>) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">            Complex &#123;</span><br><span class="line">                re,</span><br><span class="line">                im:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dart数据类型"><a href="#Dart数据类型" class="headerlink" title="Dart数据类型"></a>Dart数据类型</h1><p>Dart即可看成动态，又可看成静态语言，数据类型丰富。</p><h3 id="数据类型-4"><a href="#数据类型-4" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>基本类型</strong></p><ul><li>布尔类型 bool</li><li>字符串型 String</li><li>码点类型 rune </li><li>符号类型 Symbol</li><li>数值类型 num int double</li></ul><p><strong>集合类型</strong></p><ul><li>列表类型 List</li><li>映射类型 Map</li><li>集合类型 Set</li><li>队列类型 Queue</li><li>枚举类型 enum</li></ul><p><strong>动态类型</strong></p><ul><li>动态类型 dynamic</li></ul><h3 id="数据类型转变-3"><a href="#数据类型转变-3" class="headerlink" title="数据类型转变"></a>数据类型转变</h3><p>Dart不提供隐式转换，所有类型转换需要显式执行。</p><ul><li>toXtype</li><li>parse(Xtype)</li><li>as</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    age.toString();</span><br><span class="line">    <span class="built_in">int</span>.parse(<span class="string">"100"</span>);</span><br><span class="line">    <span class="keyword">var</span> oneP = <span class="built_in">double</span>.parse(<span class="string">"1.1"</span>);</span><br><span class="line">    <span class="built_in">String</span> pi = <span class="number">3.1415926</span>.toStringAsFixed(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    (emp <span class="keyword">as</span> Person).firstName = <span class="string">"Tim"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型对比"><a href="#类型对比" class="headerlink" title="类型对比"></a>类型对比</h1><ul><li>Go和Dart共有码点(rune)类型</li><li>C和Rust与Dart共有枚举(enum)类型</li><li>Python和Rust共有元组(tuple)类型</li><li>Python和Dart共有列表(list)，集合(set)和映射(map)类型</li><li>Go独有通道(channel)和接口(interface)类型</li><li>Dart独有符号(Symbol)，队列(queue)，动态(dynamic)类型</li><li>各种语言都或多或少存在指针(*&amp;)，引用的使用</li></ul><p>布尔型，字符型，数值型，数组型几乎是各语言共有的类型，这说明此四类型是基础，重中之重。基于这些类型，各语言构造了不同用途的复杂数据结构。</p><p>学习时，要先从基础类型学，然后学习各语言衍生的复杂结构，最后总结。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/B5B37R.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>C、Python、Go、Rust、Dart程序规则和工具</title>
    <link href="http://www.shieber.cn/title/2e9fe2ee/"/>
    <id>http://www.shieber.cn/title/2e9fe2ee/</id>
    <published>2020-11-07T01:58:08.000Z</published>
    <updated>2020-11-11T07:20:07.192Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B50NLj.png" alt="cpygorsdart"></p><a id="more"></a><p>本文为五种语言对比学习的第四篇：程序规则和工具。</p><p>程序中包含的基本要素(不同语言包含的元素不完全一样，只是大体上一样)</p><ul><li>库/包/头文件</li><li>变量</li><li>语句/表达式</li><li>控制流程</li><li>函数</li><li>类/接口</li><li>标签</li><li>注释</li></ul><p>标识符是程序中元素的名称，如变量，函数等。五种语言标识符的规则是一样的：</p><ul><li>标识符不能是关键字</li><li>标识符可以包括字符和数字，不能以数字开头</li><li>除下划线_或美元符号$外，不能包含特殊符号</li><li>标识符必须是唯一的，标识符区分大小写，不能包含空格</li></ul><p>各语言分割符，注释方式，括号/缩进，格式化，文档，包管理，测试，工程的区别如下</p><table><thead><tr><th align="center">语言</th><th align="center">分割符</th><th align="center">注释方式</th><th align="center">括号/缩进</th><th align="center">格式化</th><th align="center">文档</th><th align="center">包管理</th><th align="center">测试</th><th align="center">工程工具</th></tr></thead><tbody><tr><td align="center">C</td><td align="center">;</td><td align="center"><code>// /**/</code></td><td align="center">{ 可换行</td><td align="center">无</td><td align="center">无</td><td align="center">无</td><td align="center">Gtest</td><td align="center">无</td></tr><tr><td align="center">Python</td><td align="center">无</td><td align="center"><code># &#39;&#39;&#39; &quot;&quot;&quot;</code></td><td align="center">有: 和<code>\t</code>或<code></code></td><td align="center">无</td><td align="center">无</td><td align="center">pip</td><td align="center">unittest</td><td align="center">无</td></tr><tr><td align="center">Go</td><td align="center">无</td><td align="center"><code>// /**/</code></td><td align="center">{ 不可换行</td><td align="center">gofmt</td><td align="center">godoc</td><td align="center">go get</td><td align="center">go test</td><td align="center">mod</td></tr><tr><td align="center">Rust</td><td align="center">;</td><td align="center"><code>// /**/</code></td><td align="center">{ 可换行</td><td align="center">rustfmt</td><td align="center">rustdoc</td><td align="center">rustup</td><td align="center">cargo test</td><td align="center">cargo</td></tr><tr><td align="center">Dart</td><td align="center">;</td><td align="center"><code>// /**/</code></td><td align="center">{ 可换行</td><td align="center">dartfmt</td><td align="center">dartdoc</td><td align="center">pub</td><td align="center">group test</td><td align="center">无</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/B50NLj.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="C" scheme="http://www.shieber.cn/tags/C/"/>
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
      <category term="Dart" scheme="http://www.shieber.cn/tags/Dart/"/>
    
  </entry>
  
</feed>
