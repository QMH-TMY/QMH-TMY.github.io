<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shieber</title>
  
  <subtitle>友朋自远方来，不亦乐乎?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shieber.cn/"/>
  <updated>2020-08-07T09:13:11.569Z</updated>
  <id>http://www.shieber.cn/</id>
  
  <author>
    <name>Shieber</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux内核代码结构</title>
    <link href="http://www.shieber.cn/title/71001b59/"/>
    <id>http://www.shieber.cn/title/71001b59/</id>
    <published>2020-08-07T08:58:13.000Z</published>
    <updated>2020-08-07T09:13:11.569Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/07/afOPyT.png" alt="linus-tux"></p><h1 id="Linux系统结构"><a href="#Linux系统结构" class="headerlink" title="Linux系统结构"></a>Linux系统结构</h1><p>阅读过linus再1991年写的kernel-0.01版，发现和今天的内核比起来结构超级简单。下图是Linux系统架构图，中线间就是内核。</p><p><img src="https://s1.ax1x.com/2020/08/07/afL3in.png" alt="kernel-arch"></p><p>#1991年 0.01版本linux内核目录</p><h3 id="所有内核目录及文件"><a href="#所有内核目录及文件" class="headerlink" title="所有内核目录及文件"></a>所有内核目录及文件</h3><table><thead><tr><th align="left">num</th><th align="left">dir</th><th align="left">note</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">boot</td><td align="left">启动文件</td></tr><tr><td align="left">2</td><td align="left">init</td><td align="left">初始化/主进程</td></tr><tr><td align="left">2</td><td align="left">fs</td><td align="left">文件系统</td></tr><tr><td align="left">7</td><td align="left">mm</td><td align="left">内存管理</td></tr><tr><td align="left">5</td><td align="left">kernel</td><td align="left">内核文件</td></tr><tr><td align="left">3</td><td align="left">include</td><td align="left">头文件</td></tr><tr><td align="left">6</td><td align="left">lib</td><td align="left">函数库</td></tr><tr><td align="left">8</td><td align="left">tools</td><td align="left">工具</td></tr><tr><td align="left">9</td><td align="left">Makefile</td><td align="left">编译脚本</td></tr></tbody></table><p>启动文件中boot.s先运行，接着是head.s运行，最后切换到init中的main.c开启init线程。其他文件是kernel用来管理的各类必备文件。</p><p>#2020年 5.8版本linux内核目录</p><h3 id="所有内核目录及文件-1"><a href="#所有内核目录及文件-1" class="headerlink" title="所有内核目录及文件"></a>所有内核目录及文件</h3><table><thead><tr><th align="left">num</th><th align="left">item</th><th align="left">item</th><th align="left">item</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">arch</td><td align="left">init</td><td align="left">net</td></tr><tr><td align="left">2</td><td align="left">block</td><td align="left">ipc</td><td align="left">README</td></tr><tr><td align="left">3</td><td align="left">certs</td><td align="left">Kbuild</td><td align="left">samples</td></tr><tr><td align="left">4</td><td align="left">COPYING</td><td align="left">Kconfig</td><td align="left">scripts</td></tr><tr><td align="left">5</td><td align="left">CREDITS</td><td align="left">kernel</td><td align="left">security</td></tr><tr><td align="left">6</td><td align="left">crypto</td><td align="left">lib</td><td align="left">sound</td></tr><tr><td align="left">7</td><td align="left">Documentation</td><td align="left">Makefile</td><td align="left">tools</td></tr><tr><td align="left">8</td><td align="left">drivers</td><td align="left">mm</td><td align="left">usr</td></tr><tr><td align="left">9</td><td align="left">fs</td><td align="left">LICENSES</td><td align="left">virt</td></tr><tr><td align="left">10</td><td align="left">include</td><td align="left">MAINTAINERS</td><td align="left"></td></tr></tbody></table><p>可以看到，2020年的内核和1991年的内核相比，变化非常大。具体代码行数变化如下图所示。  </p><p><img src="https://s1.ax1x.com/2020/08/07/afjNsf.png" alt="code-0.01"></p><p><img src="https://s1.ax1x.com/2020/08/07/afjgyV.png" alt="code-5.80"></p><p>30年间，从89个文件变成了69319个文件。代码行数从8326行到1950万行，这就是开源的奇迹。</p><h3 id="0-01版代码树"><a href="#0-01版代码树" class="headerlink" title="0.01版代码树"></a>0.01版代码树</h3><p>.<br>├── boot 启动文件<br>│   ├── boot.s<br>│   └── head.s<br>├── fs  文件系统<br>│   ├── bitmap.c<br>│   ├── block_dev.c<br>│   ├── buffer.c<br>│   ├── char_dev.c<br>│   ├── exec.c<br>│   ├── fcntl.c<br>│   ├── file_dev.c<br>│   ├── file_table.c<br>│   ├── inode.c<br>│   ├── ioctl.c<br>│   ├── Makefile<br>│   ├── namei.c<br>│   ├── open.c<br>│   ├── pipe.c<br>│   ├── read_write.c<br>│   ├── stat.c<br>│   ├── super.c<br>│   ├── truncate.c<br>│   └── tty_ioctl.c<br>├── include 头文件<br>│   ├── a.out.h<br>│   ├── asm<br>│   │   ├── io.h<br>│   │   ├── memory.h<br>│   │   ├── segment.h<br>│   │   └── system.h<br>│   ├── const.h<br>│   ├── ctype.h<br>│   ├── errno.h<br>│   ├── fcntl.h<br>│   ├── linux<br>│   │   ├── config.h<br>│   │   ├── fs.h<br>│   │   ├── hdreg.h<br>│   │   ├── head.h<br>│   │   ├── kernel.h<br>│   │   ├── mm.h<br>│   │   ├── sched.h<br>│   │   ├── sys.h<br>│   │   └── tty.h<br>│   ├── signal.h<br>│   ├── stdarg.h<br>│   ├── stddef.h<br>│   ├── string.h<br>│   ├── sys<br>│   │   ├── stat.h<br>│   │   ├── times.h<br>│   │   ├── types.h<br>│   │   ├── utsname.h<br>│   │   └── wait.h<br>│   ├── termios.h<br>│   ├── time.h<br>│   ├── unistd.h<br>│   └── utime.h<br>├── init 初始化/主进程0<br>│   └── main.c<br>├── kernel 内核文件<br>│   ├── asm.s<br>│   ├── console.c<br>│   ├── exit.c<br>│   ├── fork.c<br>│   ├── hd.c<br>│   ├── keyboard.s<br>│   ├── Makefile<br>│   ├── mktime.c<br>│   ├── panic.c<br>│   ├── printk.c<br>│   ├── rs_io.s<br>│   ├── sched.c<br>│   ├── serial.c<br>│   ├── sys.c<br>│   ├── system_call.s<br>│   ├── traps.c<br>│   ├── tty_io.c<br>│   └── vsprintf.c<br>├── lib  函数库<br>│   ├── close.c<br>│   ├── ctype.c<br>│   ├── dup.c<br>│   ├── errno.c<br>│   ├── execve.c<br>│   ├── _exit.c<br>│   ├── Makefile<br>│   ├── open.c<br>│   ├── setsid.c<br>│   ├── string.c<br>│   ├── wait.c<br>│   └── write.c<br>├── Makefile<br>├── mm  内存管理<br>│   ├── Makefile<br>│   ├── memory.c<br>│   └── page.s<br>└── tools 工具<br>│   └── build.c  </p><p>11 directories, 88 files  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/07/afOPyT.png&quot; alt=&quot;linus-tux&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Linux系统结构&quot;&gt;&lt;a href=&quot;#Linux系统结构&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="内核" scheme="http://www.shieber.cn/categories/%E5%86%85%E6%A0%B8/"/>
    
    
      <category term="Linux" scheme="http://www.shieber.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>华为面试</title>
    <link href="http://www.shieber.cn/title/f822c036/"/>
    <id>http://www.shieber.cn/title/f822c036/</id>
    <published>2020-08-04T04:52:39.000Z</published>
    <updated>2020-08-04T05:10:36.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/04/a0F4bR.png" alt="interview"></p><a id="more"></a><p>最近参加华为面试，感觉问的问题很有价值，总结了下面试的题目。</p><h2 id="一面-2020-08-03-10-05"><a href="#一面-2020-08-03-10-05" class="headerlink" title="一面 [2020.08.03 10:05]"></a>一面 [2020.08.03 10:05]</h2><ul><li>谈谈分布式。  </li><li>谈谈数据结构。  </li><li>哈希碰撞如何解决？  </li><li>手撕代码：集合合并。  </li><li>谈Python，Rust语言。  </li><li>四层B+树，查找需要次数？  </li><li>B+树的查找过程是怎么样？  </li><li>B+树适合的情况，B+树节点分裂的条件。  </li><li>存储10万左右的中国地名数据，自己设计数据模型来存储，要求实现快速访问。  </li></ul><h2 id="二面-2020-08-04-10-01"><a href="#二面-2020-08-04-10-01" class="headerlink" title="二面 [2020.08.04 10:01]"></a>二面 [2020.08.04 10:01]</h2><ul><li>谈汇编语言。</li><li>谈编程语言发展。</li><li>谈微服务和集群。</li><li>谈软件开发原则。</li><li>软件开发设计模式。</li><li>谈对Linux系统认识。</li><li>谈谈Linux内核架构。</li><li>谈Linux系统调用流程。</li><li>操作系统调度的单位是？</li><li>谈面向对象和面向过程。</li><li>谈软件开发，如何优化呢？</li><li>谈如何使用各种数据结构。</li><li>调用时栈的情况，栈的毁坏。</li><li>为什么会出现NoSql，NewSql？</li><li>关系型数据库和NoSQL有什么区别？</li><li>设计一个图书馆系统，你如何设计？</li><li>设计一个调度系统，你考虑如何设计？</li><li>100亿文档数据存储，你如何存储处理？</li><li>1+2这样的计算，计算机的处理流程是？</li></ul><h2 id="面试官建议"><a href="#面试官建议" class="headerlink" title="面试官建议 "></a>面试官建议 </h2><ul><li>计算机技术飞速发展，但底层技术永不过时，需要学好。  </li><li>了解技术发展的历史沿革，要做到即有广度，更有深度。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/04/a0F4bR.png&quot; alt=&quot;interview&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://www.shieber.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="IT" scheme="http://www.shieber.cn/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>21世纪计算机技术发展展望</title>
    <link href="http://www.shieber.cn/title/a1d4a508/"/>
    <id>http://www.shieber.cn/title/a1d4a508/</id>
    <published>2020-08-02T07:58:24.000Z</published>
    <updated>2020-08-08T01:42:03.915Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/02/aY6dW8.png" alt="21-new-tech"></p><a id="more"></a><p>学习计算机技术的过程中，不免发现问题，有时还能迸发些新的思想。本文就是这样的情况下诞生的，试着对本世纪计算机可能发展的趋势作预测，算是瞎猜吧！</p><p>对网络尤其是七层参考互联模型的研究使我相信，未来一定会有新的协议和技术出现。结合个人对技术的掌握和理解，下面两幅图整理了未来我眼中的计算机技术发展方向。</p><p><img src="https://s1.ax1x.com/2020/08/02/aY6jSO.png" alt="21-new-tech-part1"><br><img src="https://s1.ax1x.com/2020/08/02/aYcpmd.png" alt="21-new-tech-part2"></p><h2 id="对语言的看法"><a href="#对语言的看法" class="headerlink" title="对语言的看法"></a>对语言的看法</h2><p>  传统的语言，比如C/C++/Java/Python之类的语言都是在单机时代设计的，那时多CPU的机器没有，所以很多语言就没有考虑多CPU并行，更多的考虑是和机器硬件的交互，如指针，内存。虽然部分语言也支持并行，但程度不够。这类语言我称之为机器系语言。</p><p>  类似Go语言这样的语言，天生自带并发/并行机制，是网络时代需要的语言。Go对许多问题的处理都比较好，写出的代码也很规范。在网络大并发时代，Go必将大放异彩，我称Go这类语言为网络系语言。</p><p>  量子系语言，这是为量子计算机准备的。鄙人学过一点量子力学(知道名词)，知道这技术和传统IT技术的不同，所以在量子计算机上跑的语言必定需要专门设计，目前这类语言有Q#和Silq。</p><p>  最后是星际系语言，这是我本人的设想。设想人类在月球和火星上建立科研机构，甚至永久居住地。那么地球如何与之通信？现行的通信机制需要修改，语言核心特性也需要改。</p><p>  我的设想是，通过发射足够多的环日卫星和环球卫星，在火星，地球，月球周围形成通信卫星网。然后就可以利用环日卫星作中转站实现大规模跨空域信息传送。</p><p>  这样一种构建在太阳，地球，月球，火星等星体间的网络。我称之为银河网。据此网络，可提出银河网需要的通信协议和计算，存储等概念。</p><h2 id="对操作系统的看法"><a href="#对操作系统的看法" class="headerlink" title="对操作系统的看法"></a>对操作系统的看法</h2><p>  目前手机端是安卓和苹果，桌面是Linux/Mac OS/Windows，相信未来这些都会发生变化。比如谷歌正在推Fuchsia系统，计划用Dart/Flutter统一桌面和手机端。未来的趋势可能是手机和桌面统一，前端开发统一标准，一处编写，到处都可以用。</p><p>  工业用的系统，比如物联网系统要应对产业园，家用，医疗，交通等场景。这些场景对实时，性能的要求和传统的手机和电脑不同，所以应该会诞生适合物联网的系统。</p><p>  云时代，云产品商作为后台为开发者/企业服务。云产品很大程度上相当于运维，所以对存储，配置，管理，灾备要求高，反而通用系统的一些性能不用那么在意。所以云操作系统可以在传统系统上改进。目前已经有很多云系统了，阿里就有飞天系统。</p><p>  量子体系和传统PC不一样，所以也需要配套的操作系统。</p><p>  至于设想的银河网，设计星际通信，更需要专用系统，它应该会从传统的系统演进。</p><h2 id="对计算的看法"><a href="#对计算的看法" class="headerlink" title="对计算的看法"></a>对计算的看法</h2><p>  计算机，计算占了2/3，所以未来的计算也必定走出自己的发展道路。传统的计算，最快就是超级计算，代表了一个国家的科技实力。而云/雾/霾计算是过去几年提得比较多的，适应的是不同需求。边缘计算就是终端计算，比如手机和电脑端。量子计算是专业的，一直在搞的量子计算机就是为了作计算，这块是必然发展的。星际计算是传统计算的衍生，只是把计算放到星际环境考虑。</p><h2 id="对存储的看法"><a href="#对存储的看法" class="headerlink" title="对存储的看法"></a>对存储的看法</h2><p>硬盘，高速存储芯片这些我们都用过了，大型数据库也有了。今天来看似乎我们进入了大数据时代，好像数据就有多大似的。然而人的追求是无限的。比如，如何保存数据几十上百年？未来的数据，目前的数据库能不能处理得了？如何快速取出？量子信息如何保存？这些需求都需要相应的存储技术。分布式，超大规模的存储技术必然还要向前发展。对保存时间的追求诞生了玻璃存储，对数据量的追求诞生了DNA存储。这些新的存储形式如何运用到计算机系统中？还有，物联网实时数据会有多大呢？目前磁盘存储速度太慢了，无法满足高速率大数据持续写入。从目前的技术来看，未来相变(PCM)存储可能会成为主流，说不定还会替代DRAM内存。类似的还有赛道存储器、高速磁存储器。</p><h2 id="对协议的看法"><a href="#对协议的看法" class="headerlink" title="对协议的看法"></a>对协议的看法</h2><p>一流企业做协议(专利)，二流做产品，三流做服务。Unicode码不断发展，解决了地球人的文字保存问题。TCP/IP协议族给出了网际通信的标准。区块链协议给出了信任链。新的需求推动新的协议诞生。量子通信，必然有量子协议。星际通信则会有星际通信协议。</p><h2 id="对网络的看法"><a href="#对网络的看法" class="headerlink" title="对网络的看法"></a>对网络的看法</h2><p>局域网，互联网已蔚为大观。然而互联网也有问题：文件重复(不同地方重复)，文件易丢失(404)。如何解决冗余，如何避免404？以p2p技术为组成的IPFS正是为此而来。物联网，也有一张网，可能是家具，汽车，医院，工厂等大家伙构成的一张网，和人类用的互联网并行不悖。若是造出了量子计算机，是否可能重走传统计算机构成互联网的套路，再打造出一个量子网络？最后，以太阳，地球，月球，火星等星球组成一张银河网是否可能呢？</p><h2 id="对分布式的看法"><a href="#对分布式的看法" class="headerlink" title="对分布式的看法"></a>对分布式的看法</h2><p>云时代，大数据时代。数据多，繁杂。系统模块越来越多。如何拆分，如何优化？拆分后如何协调？传统的单体架构正不断拆解，专业化。分解后的模块要实现原有的功能，那么存储，一致性，通信，计算如何解决？</p><h2 id="对智能技术的看法"><a href="#对智能技术的看法" class="headerlink" title="对智能技术的看法"></a>对智能技术的看法</h2><p>AI火了，到处是谈AI的人。那么AI如何发展？目前对图像，语音，视频的处理算是可以用，但还可以优化，对自然语言的理解也还没有解决，多语言翻译如何像口译员一样？以AI技术为基础，能否得到智能机器人，智能的决策系统？最后，今天的AI还无法实现逻辑推理，也就是说它并不像人一样智能。今后如何实现逻辑推理，通过图灵测试？</p><h2 id="对安全的看法"><a href="#对安全的看法" class="headerlink" title="对安全的看法"></a>对安全的看法</h2><p>黑客的猖獗，计算能力的突破都使得安全问题日益突显。未来，某些今天(2020)还管用的加密技术可能就能被破解了。所以，加密技术会不断发展。前段时间IBM推出了全同态加密技术，这意味着安全又上了一个台阶，是否能破解这种技术呢？其他的安全技术，如量子加密，这技术有量子力学原理兜底，不可破。除了技术层面，个人层面，社会工程如何应对？目前的黑客攻击，问题多是出在人身上。如何保护个人隐私，如何划定员工权限？</p><h2 id="对应用软件的看法"><a href="#对应用软件的看法" class="headerlink" title="对应用软件的看法"></a>对应用软件的看法</h2><p>  其实一般人用的软件，大部分都有了。目前来看医疗和法律方面还比较欠缺。未来社会，一定是一个法治社会，个人对法律的需求会上升，此类应用或者服务定会多起来。对医疗的需求也差不多，没有人不需要医生和医药的。今天订外卖，以后可以订(线上预约)医生。还有是否未来人人会有一套私有云设备，这需要开发对应的产品和应用。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这些问题？其实对应着各高校/企业在计算机技术方面的研究方向。它们可能在大学就是一门学科，在企业就是一个岗位，正不断培养人才。今后怎样，实在难想。我个人的水平有限，只能开脑洞到此。瞎想一番，发现计算机技术还处于快速发展阶段，还有很多发展的方向可以研究嘛! 吾辈当不断前行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/02/aY6dW8.png&quot; alt=&quot;21-new-tech&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.shieber.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CS" scheme="http://www.shieber.cn/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>python下各种虚拟环境使用</title>
    <link href="http://www.shieber.cn/title/3f375b95/"/>
    <id>http://www.shieber.cn/title/3f375b95/</id>
    <published>2020-07-23T06:52:32.000Z</published>
    <updated>2020-07-23T08:18:06.312Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/23/UL2XtO.png" alt="virtualenv"></p><a id="more"></a><p>Python下存在多种虚拟环境构建方式，现做整理。</p><h2 id="为什么需要虚拟环境"><a href="#为什么需要虚拟环境" class="headerlink" title="为什么需要虚拟环境"></a>为什么需要虚拟环境</h2><p>传统的库安装方式，如pip install package，会将包安装到系统，不管你后面用不用都在。然而大部分人安装后就忘了卸载，导致占用内存。还有的时候，项目可能需要python2.7，有时又需要python3.5，甚至对同一个包的版本需求也不一样，既要1.1版又要1.4版，然而传统安装方式只可能保留一个版本，这该怎么办？</p><p>为了解决占用和多版本问题，python给出了虚拟环境。虚拟环境其实就是一个目录，项目需要的包不再安装到系统而是该目录。不同的目录可以放同一个包不同的版本。项目不要了，可直接删除该目录，节约内存。如下图，一个主目录下是各种虚拟环境。</p><p><img src="https://s1.ax1x.com/2020/07/23/ULRCnI.png" alt="virtualenv1"></p><p>python的虚拟环境方式主要有三种，分别是virtualenv，virtualenvwrapper，pipenv。三者的区别是管理依赖的方式和指令的复杂度，主体功能肯定都是一样的。</p><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>最早出现的就是virtualenv了，下面是其用法。</p><p><img src="https://s1.ax1x.com/2020/07/23/ULoaWV.png" alt="virtualenv-op"></p><h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p>virtualenvwrapper是virtualenv的升级版，管理各个环境，切换方便</p><p><img src="https://s1.ax1x.com/2020/07/23/ULofSK.png" alt="virtualenvwrapper-op"></p><h2 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h2><p>pipenv 是pip和virtualenv的结合，使用Pipfile和Pipfile.lock来管理依赖关系，更加方便，未来会是Python开虚拟环境的首选方法。下面是其用法。</p><p><img src="https://s1.ax1x.com/2020/07/23/ULT9Ts.png" alt="pipenv-op"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/23/UL2XtO.png&quot; alt=&quot;virtualenv&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="虚拟环境" scheme="http://www.shieber.cn/categories/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
      <category term="virtualenv" scheme="http://www.shieber.cn/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>学习Scrapy源代码</title>
    <link href="http://www.shieber.cn/title/ae08e597/"/>
    <id>http://www.shieber.cn/title/ae08e597/</id>
    <published>2020-07-21T06:07:36.000Z</published>
    <updated>2020-07-21T08:01:32.555Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/21/UI6CX4.png" alt="scrapy-structure"></p><a id="more"></a><p>近期学习Scrapy源代码，稍作整理。</p><h2 id="Scrapy架构"><a href="#Scrapy架构" class="headerlink" title="Scrapy架构"></a>Scrapy架构</h2><p><img src="https://s1.ax1x.com/2020/07/21/UI6CX4.png" alt="scrapy-structure"></p><p>主体架构包含五大主体，两大中间件。</p><table><thead><tr><th align="left">主体/中间件</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">engine</td><td align="left">调动爬虫，使其运转起来</td></tr><tr><td align="left">scheduler</td><td align="left">接受新的url，并安排下载器下载Request</td></tr><tr><td align="left">downloader</td><td align="left">专注于下载，返回Response给spider</td></tr><tr><td align="left">spider</td><td align="left">爬虫，处理Response并返回url给scheduler，item给item pipeline</td></tr><tr><td align="left">item pipeline</td><td align="left">管道，保存下载的数据项item</td></tr><tr><td align="left">downloadermiddlewares</td><td align="left">下载器中间件，处理request中各种问题</td></tr><tr><td align="left">spidermiddlewares</td><td align="left">爬虫中间件，处理response中各种问题</td></tr></tbody></table><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>Scrapy爬虫的运行流程如上图红色圆圈标示。</p><table><thead><tr><th align="left">流程</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">引擎从初始化spider中获取start_urls</td></tr><tr><td align="left">2</td><td align="left">引擎将start_urls给调度器并请求下载任务</td></tr><tr><td align="left">3</td><td align="left">调度器取出url给引擎以驱动下载器</td></tr><tr><td align="left">4</td><td align="left">引擎分发url给下载器</td></tr><tr><td align="left">5</td><td align="left">下载器按url下载</td></tr><tr><td align="left">6</td><td align="left">下载器返回下载内容给spider</td></tr><tr><td align="left">7</td><td align="left">spider处理返回内容，提取新url和item</td></tr><tr><td align="left">8</td><td align="left">spider将新url给调度器，item给pipeline以保存</td></tr><tr><td align="left">9</td><td align="left">返回第三步，开启多线程调度，循环工作</td></tr></tbody></table><p>第一二步使用的是起始url，这是我们在项目spider/xxxspider.py中写好的，如下面的代码所示，这是起始时爬虫需要的，从第三步开始，爬虫自己有新爬取到的url，可以自行调度实现循环下载，直到任务结束。所以编写scrapy爬虫只需要很少的代码。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoSGad.png" alt="scrapy-code"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>如下是scrapy所有目录及外层代码。目录比较重，里面包含许多处理代码，而外层代码是scrapy实现的逻辑，这些外层代码调用目录中的代码完成整个爬取流程。所有目录及代码在/usr/local/lib/python3.6/dist-packages/scrapy/下。</p><table><thead><tr><th align="left">目录</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">commands</td><td align="left">命令行命令具体实现</td></tr><tr><td align="left">contracts</td><td align="left">爬虫可用性检测代码</td></tr><tr><td align="left">core</td><td align="left">核心类，包括downloader, engine, scheduler, scraper, spidermw</td></tr><tr><td align="left">downloadermiddlewares</td><td align="left">下载器中间件，包括ajax,cookie,http,agent,robots等</td></tr><tr><td align="left">extensions</td><td align="left">扩展类，包括logstats, spiderstates等</td></tr><tr><td align="left">http</td><td align="left">网络处理，包括Request和Response等</td></tr><tr><td align="left">linkextractors</td><td align="left">链接抽取类，包括html, lxml, regex, sgml</td></tr><tr><td align="left">loader</td><td align="left">Item加载器</td></tr><tr><td align="left">pipelines</td><td align="left">Item管道，包含file, image和media</td></tr><tr><td align="left">selector</td><td align="left">基于lxml的xpath选择器</td></tr><tr><td align="left">settings</td><td align="left">爬虫基本配置，十分多，可自定义</td></tr><tr><td align="left">spidermiddlewares</td><td align="left">爬虫中间件，包括深度优先深度设置，http错误处理等</td></tr><tr><td align="left">spiders</td><td align="left">爬虫类，实现xmlFeed, sitemap，crawl</td></tr><tr><td align="left">templates</td><td align="left">项目和爬虫模板，包括一个项目架构，基本爬虫，双向爬虫等</td></tr><tr><td align="left">utils</td><td align="left">各种工具类，用于实现各种处理功能</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>外层代码</strong></td><td align="left"><strong>作用</strong></td></tr><tr><td align="left">cmdline.py</td><td align="left">命令行参数处理</td></tr><tr><td align="left">crawler.py</td><td align="left">爬虫</td></tr><tr><td align="left">dupefilters.py</td><td align="left">去重</td></tr><tr><td align="left">exceptions.py</td><td align="left">错误处理</td></tr><tr><td align="left">exporters.py</td><td align="left">序列化保存文件</td></tr><tr><td align="left">extension.py</td><td align="left">扩展管理</td></tr><tr><td align="left">interfaces.py</td><td align="left">爬虫接口</td></tr><tr><td align="left">item.py</td><td align="left">数据流Item</td></tr><tr><td align="left">link.py</td><td align="left">链接对象结构</td></tr><tr><td align="left">logformatter.py</td><td align="left">日志生成</td></tr><tr><td align="left">mail.py</td><td align="left">邮件助手</td></tr><tr><td align="left">middleware.py</td><td align="left">中间件管理</td></tr><tr><td align="left">pqueues.py</td><td align="left">下载器先级队列</td></tr><tr><td align="left">resolver.py</td><td align="left">Twisted异步处理</td></tr><tr><td align="left">responsetypes.py</td><td align="left">请求响应数据</td></tr><tr><td align="left">robotstxt.py</td><td align="left">禁止爬取规则</td></tr><tr><td align="left">shell.py</td><td align="left">命令行工具</td></tr><tr><td align="left">signalmanager.py</td><td align="left">信号管理</td></tr><tr><td align="left">signals.py</td><td align="left">信号</td></tr><tr><td align="left">spiderloader.py</td><td align="left">爬虫加载</td></tr><tr><td align="left">squeues.py</td><td align="left">调度器队列</td></tr><tr><td align="left">statscollectors.py</td><td align="left">爬虫信息统计</td></tr><tr><td align="left">mime.types</td><td align="left">支持的文件类型</td></tr><tr><td align="left">VERSION</td><td align="left">版本信息</td></tr><tr><td align="left">_monkeypatches.py</td><td align="left">猴子补丁，处理Twisted</td></tr><tr><td align="left">__init__.py</td><td align="left">项目初始化</td></tr><tr><td align="left">__main__.py</td><td align="left">执行入口</td></tr></tbody></table><h2 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h2><p>__main__(或命令行的scrapy crawl xxx等) 调用cmdline.py，cmdline.py调用utils中文件处理配置，再调用crawler.py。crcrawler.py调用spider和core中引擎。引擎初始化scheduler，downloader，scraper等，开启下载流程。</p><p>重要文件：cmdline.py, crawler.py<br>重要目录：core, http, pipelines, utils, spider<br>其他的目录和文件都为重要文件和目录服务，主逻辑实现也在重要目录和文件中。  </p><h2 id="调用关系图"><a href="#调用关系图" class="headerlink" title="调用关系图"></a>调用关系图</h2><p>图一是从命令行开始的全过程，图二是核心架构运行流程，也即图一crawl下面那部分。当然，很多都省略了，比如日志，错误处理，这些不是主要的内容，加上反而让人看不懂。</p><p><img src="https://s1.ax1x.com/2020/07/21/UIIPGd.png" alt="whole"></p><p>我们自己写的代码只在start_request处执行一次，此后就是核心线程开启循环下载直到结束，可以看到scrapy为我们完成了大多数内容。由于scrapy整体架构高度解耦合，所以需要什么功能，我们可以自己去添加配置。每一个箭头就是一步，对这一步需要添加功能就编写好代码然后串在中间。比如觉得downloader和scraper中还需要处理，自己写好代码，将其放在downloader和scraper间，这样整个爬虫处理流程是不变的，但增加了自定义内容。</p><p><img src="https://s1.ax1x.com/2020/07/21/UIImdS.png" alt="core"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/21/UI6CX4.png&quot; alt=&quot;scrapy-structure&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://www.shieber.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Code" scheme="http://www.shieber.cn/tags/Code/"/>
    
      <category term="scrapy" scheme="http://www.shieber.cn/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>linux下软件安装方式</title>
    <link href="http://www.shieber.cn/title/d63ca381/"/>
    <id>http://www.shieber.cn/title/d63ca381/</id>
    <published>2020-07-11T02:33:13.000Z</published>
    <updated>2020-07-23T08:18:59.841Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/11/UQtLvT.png" alt="linux-software"></p><a id="more"></a><p>Windows下安装软件似乎只有一种方式，那就是下载.exe，然后执行安装。然而Linux系统中软件安装方式可谓五花八门，下面总结一番。</p><p>因为Linux系统发行版多，各家有各家的软件安装方式，这种种不同方式可称为专用安装方式。另外，有人开发的软件若是想要支持各大发行版，那么就需要一种通用的软件安装方式。</p><h2 id="A-Linux通用的跨发行版软件包安装方式"><a href="#A-Linux通用的跨发行版软件包安装方式" class="headerlink" title="A.Linux通用的跨发行版软件包安装方式"></a>A.Linux通用的跨发行版软件包安装方式</h2><p>1.snap<br>2.flatpak<br>3.AppImage<br>4.source-code  </p><p>1.snap是ubuntu搞的，但目前已经支持多种发行版的安装，可归类为通用安装方式。snap目前甚至可以安装微信到linux。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install xxx #用snap安装软件</span><br></pre></td></tr></table></figure><p>2.flatpak(前身为xdg-app) 是一种用于构建，分发，安装和运行应用程序的技术。通过在沙箱中隔离应用程序来提高Linux桌面的安全性，允许应用程序安装在任何Linux发行版上。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo flatpak install xxx #用flatpak安装软件</span><br></pre></td></tr></table></figure><p>3.AppImage是打包好的可执行镜像，赋予执行权限后直接运行就可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x AppImage</span><br><span class="line">./AppImage</span><br></pre></td></tr></table></figure><p>4.source-code，源代码安装，这是最基本的，最通用的安装方式。而源代码发布时，作者可能提供了不同安装选项给用户，有以下三种。  </p><blockquote><p>a. 只有configure文件，则按如下方式安装<br>    ./configure #为了生成makefile<br>    make<br>    make install<br>b. 已有makefile<br>    make<br>    make install<br>c. 只有Imake<br>    xmkmf<br>    make<br>    make install  </p></blockquote><p>说完通用的方式，接着看看专用的方式。</p><h2 id="B-Linux专用的软件包管理器"><a href="#B-Linux专用的软件包管理器" class="headerlink" title="B.Linux专用的软件包管理器"></a>B.Linux专用的软件包管理器</h2><ol><li>.deb</li><li>.rpm</li><li>etc…</li></ol><p>主要是两大类 </p><blockquote><p><strong>a</strong>.以Debian系列的dpkg安装deb包，和apt-get方式<br>sudo dpkg -i xxx.deb<br>sudo apt-get install xxx<br><strong>b</strong>.以Redhat系列的rpm安装rpm包，和yum方式<br>sudo rpm xxx.rpm<br>sudo yum install xxx<br><strong>c</strong>.其他的，比如Arch用pacman -S xxx 安装</p></blockquote><h2 id="rpm包转deb包"><a href="#rpm包转deb包" class="headerlink" title="rpm包转deb包"></a>rpm包转deb包</h2><p>rpm包还可以转换为deb包，以便安装到debian系linux系统。具体方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install alien</span><br><span class="line">sudo aline xxx.rpm     #当前目录生成xxx.deb</span><br><span class="line">sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure><p>这样，就能将rpm包转换为deb包，然后装到debian系系统，不过有的软件转换后未必能安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/11/UQtLvT.png&quot; alt=&quot;linux-software&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="http://www.shieber.cn/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="software" scheme="http://www.shieber.cn/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>理解递归和动态规划</title>
    <link href="http://www.shieber.cn/title/1e14846f/"/>
    <id>http://www.shieber.cn/title/1e14846f/</id>
    <published>2020-07-07T13:42:02.000Z</published>
    <updated>2020-07-21T08:24:26.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/08/UE1Wad.png" alt="recursion"></p><a id="more"></a><p>什么是递归，尾递归呢？动态规划和递归有什么关系，区别？什么时候用递归，什么时候用动态规划？<br>这些问题令人苦恼，有人长时间搞不清楚其中道理。</p><h2 id="先说结论，再逐个分析"><a href="#先说结论，再逐个分析" class="headerlink" title="先说结论，再逐个分析"></a>先说结论，再逐个分析</h2><blockquote><p>1.递归是一种调用自身，通过<strong>分解大问题成小问题</strong>以解决问题的技术。<br>2.尾递归解决了递归<strong>大量占用栈</strong>的缺点，是对递归的一种优化，节约了内存。<br>3.动态规划是一种利用<strong>小问题解决大问题</strong>的技术。<br>4.递归从大到小，自顶(大)向下(小)；动态规划从小到大，自底(小)向上(大)。<br>5.两者选取了不同角度解决问题，同时都各自<strong>带来了新问题</strong>。  </p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>第一条：递归是一种调用自身，通过<strong>分解大问题成小问题</strong>以解决问题的技术。大问题分解成小问题是重点，我们来看一例。</p><p>最著名的斐波那契数列问题。都知道斐波那契数列是一列数字，现在我问你第23个斐波那契数是多少？答不上来吧？这就叫大问题，因为你脑袋一下子算不出来，这问题就大了。计算机最不怕算了，它就是干计算的。要让计算机解决这个问题，就需要告诉他，<strong>a.该怎么开始，b.怎么结束，c.计算规则</strong>是什么，然后它就能算出来了。</p><p>现在的问题是，计算机不知道这个问题如何下手。这时人就想，我能不能先算第21和22个数，我知道第21个和22个数就能由规则计算出第23个了。此处<strong>规则</strong>，就是需要告诉机器的，这里是Fib(23) = Fib(22) + Fib(21)。现在问题是Fib(22)和Fib(21)还是不知道。聪明的人类又想，我再知道前面两个数不就能算了？所以问题演变成Fib(23) = Fib(21) + Fib(20) + Fib(20) + Fib(19)。可是这么还是不知道，还要算再前面的数，什么时候是个头啊？对，就是头，找到头，不就算出来了吗？头，就是停止，就是端，就是边界，就是约束。也就是该 <strong>b.怎么结束</strong>。而<strong>c.计算规则Fib(n) = Fib(n-1) + Fib(n-2)</strong>是人类定义的。如果你将Fib(23)展开，发现是一串加法，特别长。而计算机计算时也是这么干的，所以它特别耗费内存，就像你不能记住展开式一样，因为占用你的脑存。仔细一看，发现Fib(23)最后会变成由Fib(0)和Fib(1)组成的超长加法。而Fib(0)和Fib(1)也是人类定义的，这就是<strong>b.该怎么结束</strong>。Fib(0)和Fib(1)既然是人定义的，肯定对我们和计算机来说就是小问题了，too simple，sometimes naive。这就是<strong>分解大问题成小问题</strong>。所以利用递归，我们把Fib(23)变成了一堆Fib(1)和Fib(0)的加法运算，<strong>a.该怎么开始</strong>则指从23开始，这是需求。</p><p>所以看到一来就是一个超大的数，规模，尺度的问题，多半可以考虑递归手段。就是化大为小，化繁为简。这是该用递归的时候。</p><p>现在再去翻书，看递归定义：1.出口，2.转移条件。你发现就好懂了。因为解决大问题，需要必要的规则和起始条件(或终止条件)。其实，理科有什么科学规律不是这样呢？</p><p>比如描述宇宙规律，牛顿爵士提出理解和解决世界小问题的方案，加点约束，就可以解决宇宙的大问题了。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFFr6.png" alt="newtown-laws"></p><p>受力与否为起始条件(边界)，三大定律就是转移条件。有了力，宇宙就动起来了。</p><p>当然，你说既然力是起始条件(边界)，那力呢？牛顿发现不把起始原因找到，肯定不行，因为那套运动规则就没法动起来。所以牛逼的爵士，再来一律，万有引力定律。就是说，到处都是起始原因，万有嘛，大家都有，这下宇宙不就动了吗。</p><p>$$万有引力定律:  F = G\frac{M_{1}M_{2}}{R^{2}}$$</p><p>所以，牛，很牛！我看了觉得简单，自己要是不看，到死也想不出来。所以，牛顿牛逼。就这几句话，你我独自是整不出来的，所以要尊重数学家和物理学家嘛！</p><p>扯远了，但是这么个理解法。下面写出Fibnacci的算法。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFfQ1.png" alt="fibnacci1"></p><p>上面的代码，就可以用来计算了。但是，我们上面分析指出，它占内存，不断的压栈。所以是否能够优化一下，减少内存占用呢？当然可以，尾递归就是干这事的。</p><p>尾递归，字面意思，就是它是尾巴上的，最后一个调用的。所以，尾递归只能调用自身，不能乘除加减。下面就是斐波那契的尾递归版本。最后一行，不加减，无乘除，单是调用自身，这就是尾递归。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFbJH.png" alt="fibnacci2"></p><p>那它如何减少内存消耗呢？我们知道纯递归版中，栈主要用来记录中间状态了，而这些中间状态中我们需要的无非就是些加法罢了，因为依据规则Fib(n) = Fib(n-1) + Fib(n-2)，这里就只有加法。那么我们把加法保留到下次函数调用，不就可以只用一个栈了吗？所以我们就这么干了。下面的参数中y和x+y就是保留的值和加法状态。</p><p>现在回过头看第二条：尾递归解决了递归<strong>大量占用栈</strong>的缺点，是对递归的一种优化，节约了内存。可第五条又说，都各自<strong>带来了新问题</strong>。什么问题？</p><p>函数递归调用，参数入栈，栈上还有很多操作系统用得到的信息，尤其出Bug了，调试时，就需要栈上的信息。现在尾递归给优化了，全部信息都在一份参数里，而且还是多次相加后的值，找不出问题了。所以尾递归在操作系统层面，还有许多需要栈信息的应用上并没有得到太多应用。别看优化了，节约资源了，但是也引入了新问题。</p><p>全部最优，最后结果可能最糟，许多问题都是这样，工程问题要考虑全局，不要一来就优化，就凸优化。</p><blockquote><p>过早的优化是万恶之源，因为让正确的程序更快，要比让快速的程序正确容易得多。– Donald Knuth</p></blockquote><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>第三条：动态规划是一种利用<strong>小问题解决大问题</strong>的技术。刚才我们看了递归是把大问题分解成小问题，现在我们从小问题能不能推导些大问题出来呢？当然能，这就是动态规划。动态二字是说，新问题是热乎的，才得到的。比如还是用斐波那契数列说，我们用两个小问题Fib(0) + Fib(1)就得到Fib(2)了，看到没，没叫你算Fib(2)，但是由小问题构造出了大问题。而且Fib(3) = Fib(2) + Fib(1)，这里Fib(3)又是由刚生成的Fib(2)构成，和最开始的Fib(0)无关了，始终用这种规律动态生成下一个。是不是利用小问题解决大问题？</p><p>再看动态规划版的斐波那契数列计算代码。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFqWd.png" alt="fibnacci3"></p><p>此处是从2开始计算到n，由0和1两个基本条件构造大问题，这就是动态规划。递归的终止条件恰好就是动态规划的起始条件，所以不同的叫法，出口，边界，约束，其实都一样。</p><p>再看第五条，各自<strong>带来了新问题</strong>。 动态规划带来什么问题？动态规划不好找准转移规则和起始条件。而这两点又是必须的，所以动态规划好用，不好理解。比如爬楼梯问题，可以爬1阶，2阶，3阶。计算到n阶楼梯的爬法。<br>还有很多问题，乍一看是看不出能用动态规划的，甚至条件复杂得很。还有上面的dp数组也很费内存。</p><p>当然，费内存可以优化，用两个变量来存储信息。</p><p><img src="https://s1.ax1x.com/2020/07/21/UoFjyt.png" alt="fibnacci4"></p><p>这也是数学教材上的斐波那契算法定义。</p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>第四条：递归从大到小，自顶(大)向下(小)；动态规划从小到大，自底(小)向上(大)。现在应该好理解了。自顶向下和自底向上是另一种说法罢了。递归时，从一个大问题不断产生新的小问题，画成树，不就是顶上一个点，下面一堆点吗？所以从顶向下，最下面刚好是基本条件。而动态规划恰好就从基本条件开始，不断向上计算较大的问题。自然自底向上了。递归和动态规划两者联系就在于此，看从哪头开始。</p><p><img src="https://s1.ax1x.com/2020/07/08/UElmkR.png" alt="recursion_fibnacci"></p><h2 id="斐波那契数列算法合集"><a href="#斐波那契数列算法合集" class="headerlink" title="斐波那契数列算法合集"></a>斐波那契数列算法合集</h2><p>计算斐波那契数列的5种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line">#纯递归 最糟糕的算法</span><br><span class="line">def fibnacci(n):</span><br><span class="line">    if n &lt; 2: return n</span><br><span class="line"></span><br><span class="line">    return fibnacci(n-1) + fibnacci(n-2)</span><br><span class="line"></span><br><span class="line">#动态规划，迭代，不要数组</span><br><span class="line">def fibnacci0(n):</span><br><span class="line">    if n &lt; 2: return n</span><br><span class="line"></span><br><span class="line">    p, q, = 0, 1</span><br><span class="line">    for i in range(2, n+1):</span><br><span class="line">        p , q = q, p + q</span><br><span class="line"></span><br><span class="line">    return q</span><br><span class="line"></span><br><span class="line">#尾递归，x, y保存了递归的状态</span><br><span class="line">def fibnacci1(n, x=0, y=1):</span><br><span class="line">    if n &lt; 2:</span><br><span class="line">        return y</span><br><span class="line">    else:</span><br><span class="line">        return fibnacci0(n-1, y, x+y)</span><br><span class="line"></span><br><span class="line">#递归 + 自备缓存 (减少重复计算)</span><br><span class="line">res = []</span><br><span class="line">def fibnacci2(n):</span><br><span class="line">    if n &lt; 2:</span><br><span class="line">        val = n</span><br><span class="line">    else:</span><br><span class="line">        val = fibnacci2(n-1) + fibnacci2(n-2)</span><br><span class="line">    res.append(val)</span><br><span class="line"></span><br><span class="line">    return val</span><br><span class="line"></span><br><span class="line">#递归 + python官方提供缓存</span><br><span class="line">from functools import lru_cache</span><br><span class="line">@lru_cache(maxsize=1000)</span><br><span class="line">def fibnacci3(n):</span><br><span class="line">    if n &lt; 2: return n      #return后的值会放到lru_cache里</span><br><span class="line"></span><br><span class="line">    return fibnacci3(n-1) + fibnacci3(n-2)</span><br><span class="line"></span><br><span class="line">#面向线上笔试编程</span><br><span class="line">def fibnacci4(n):</span><br><span class="line">    offer =[  </span><br><span class="line">             0,</span><br><span class="line">           1,   1,</span><br><span class="line">         2,       3,</span><br><span class="line">        5,         8,</span><br><span class="line">       13,          21,</span><br><span class="line">      34,            55,</span><br><span class="line">      89,            144,</span><br><span class="line">     233,            377,</span><br><span class="line">     610,            987,</span><br><span class="line">     1597,           2584,</span><br><span class="line">     4181,         6765,</span><br><span class="line">      10946,      17711,</span><br><span class="line">        28657,   46368,</span><br><span class="line">             75025,</span><br><span class="line"></span><br><span class="line">        121393, 196418, 317811,</span><br><span class="line">        514229, 832040, 1346269,</span><br><span class="line">        2178309, 3524578, 5702887,</span><br><span class="line">        9227465, 4930352, 24157817,</span><br><span class="line">        39088169,</span><br><span class="line">        63245986,</span><br><span class="line">        102334155,</span><br><span class="line">        165580141,</span><br><span class="line">        267914296,</span><br><span class="line">        433494437,</span><br><span class="line">        701408733,</span><br><span class="line">        1134903170,</span><br><span class="line">        1836311903,</span><br><span class="line">        2971215073,</span><br><span class="line">        4807526976,</span><br><span class="line">        7778742049,</span><br><span class="line">        12586269025, 20365011074,32951280099,</span><br><span class="line">        53316291173, 86267571272, 139583862445,</span><br><span class="line">        225851433717, 365435296162, 591286729879,</span><br><span class="line">        956722026041, 1548008755920,2504730781961</span><br><span class="line">        4052739537881,</span><br><span class="line">        6557470319842,</span><br><span class="line">        10610209857723,</span><br><span class="line">        17167680177565,</span><br><span class="line">        27777890035288,</span><br><span class="line">        44945570212853,</span><br><span class="line">        72723460248141,</span><br><span class="line">        117669030460994,</span><br><span class="line">        190392490709135,</span><br><span class="line">        308061521170129,</span><br><span class="line">        498454011879264,</span><br><span class="line">        806515533049393,</span><br><span class="line">        1304969544928657,</span><br><span class="line">        2111485077978050,</span><br><span class="line">        3416454622906707,</span><br><span class="line">        5527939700884757,</span><br><span class="line">        8944394323791464,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        14472334024676221, 23416728348467685</span><br><span class="line">        37889062373143906, 61305790721611591,</span><br><span class="line">        99194853094755497, 160500643816367088,</span><br><span class="line">        259695496911122585, 420196140727489673,</span><br><span class="line">        679891637638612258, 1100087778366101931,</span><br><span class="line">        1779979416004714189,</span><br><span class="line">        2880067194370816120,</span><br><span class="line">        4660046610375530309,</span><br><span class="line">        7540113804746346429,</span><br><span class="line">        12200160415121876738,</span><br><span class="line">        19740274219868223167,</span><br><span class="line">        31940434634990099905,</span><br><span class="line">        51680708854858323072,</span><br><span class="line">        83621143489848422977,</span><br><span class="line">        135301852344706746049,</span><br><span class="line">        218922995834555169026,</span><br><span class="line">        354224848179261915075,</span><br><span class="line">        573147844013817084101,</span><br><span class="line">        927372692193078999176,</span><br><span class="line">        1500520536206896083277,2427893228399975082453, </span><br><span class="line">        3928413764606871165730, 6356306993006846248183,</span><br><span class="line">        10284720757613717413913,16641027750620563662096,</span><br><span class="line">        26925748508234281076009, 43566776258854844738105, </span><br><span class="line">        70492524767089125814114, 114059301025943970552219,</span><br><span class="line">        184551825793033096366333, 298611126818977066918552,</span><br><span class="line">        483162952612010163284885,</span><br><span class="line">        781774079430987230203437,</span><br><span class="line">        1264937032042997393488322,</span><br><span class="line">        2046711111473984623691759,</span><br><span class="line">        3311648143516982017180081,</span><br><span class="line">        5358359254990966640871840,</span><br><span class="line">        8670007398507948658051921,</span><br><span class="line">        14028366653498915298923761,</span><br><span class="line">        22698374052006863956975682,</span><br><span class="line">        36726740705505779255899443,</span><br><span class="line">        59425114757512643212875125,</span><br><span class="line">        96151855463018422468774568,</span><br><span class="line">        155576970220531065681649693,</span><br><span class="line">        251728825683549488150424261,</span><br><span class="line">        407305795904080553832073954,</span><br><span class="line">        659034621587630041982498215,</span><br><span class="line">        1066340417491710595814572169,</span><br><span class="line">        1725375039079340637797070384,</span><br><span class="line">                    </span><br><span class="line">                                 2791715456571051233611642553,</span><br><span class="line">                               4517090495650391871408712937,</span><br><span class="line">                     7308805952221443105020355490,  11825896447871834976429068427,</span><br><span class="line">             19134702400093278081449423917,               30960598847965113057878492344,</span><br><span class="line">      50095301248058391139327916261,                       81055900096023504197206408605,  </span><br><span class="line">    131151201344081895336534324866,                         212207101440105399533740733471, </span><br><span class="line">   343358302784187294870275058337,                           555565404224292694404015791808,</span><br><span class="line">   898923707008479989274290850145,                            1454489111232772683678306641953,</span><br><span class="line">   2353412818241252672952597492098,                           3807901929474025356630904134051,</span><br><span class="line">   6161314747715278029583501626149,                           9969216677189303386214405760200,</span><br><span class="line">   16130531424904581415797907386349,                         26099748102093884802012313146549,</span><br><span class="line">    42230279526998466217810220532898,                       68330027629092351019822533679447,</span><br><span class="line">    110560307156090817237632754212345,                     178890334785183168257455287891792,</span><br><span class="line">     89450641941273985495088042104137,                    468340976726457153752543329995929,</span><br><span class="line">      757791618667731139247631372100066,                 1226132595394188293000174702095995,</span><br><span class="line">        1983924214061919432247806074196061,            3210056809456107725247980776292056,</span><br><span class="line">          5193981023518027157495786850488117,        8404037832974134882743767626780173,</span><br><span class="line">              13598018856492162040239554477268290, 22002056689466296922983322104048463,</span><br><span class="line">                  35600075545958458963222876581316753,</span><br><span class="line">                    57602132235424755886206198685365216,</span><br><span class="line">                       93202207781383214849429075266681969,</span><br><span class="line">                         150804340016807970735635273952047185,</span><br><span class="line">                              244006547798191185585064349218729154,</span><br><span class="line">                                 394810887814999156320699623170776339,</span><br><span class="line">                                    638817435613190341905763972389505493,</span><br><span class="line">                                         1033628323428189498226463595560281832,</span><br><span class="line">                                           1672445759041379840132227567949787325,</span><br><span class="line">                                               2706074082469569338358691163510069157,</span><br><span class="line">                                                   4378519841510949178490918731459856482,</span><br><span class="line">                                                      7084593923980518516849609894969925639,</span><br><span class="line">                                                         11463113765491467695340528626429782121,</span><br><span class="line">                                                           18547707689471986212190138521399707760,</span><br><span class="line"></span><br><span class="line">        30010821454963453907530667147829489881,</span><br><span class="line">        48558529144435440119720805669229197641,</span><br><span class="line">        78569350599398894027251472817058687522,</span><br><span class="line">        127127879743834334146972278486287885163,</span><br><span class="line">        205697230343233228174223751303346572685,</span><br><span class="line">        332825110087067562321196029789634457848,</span><br><span class="line">        538522340430300790495419781092981030533,</span><br><span class="line">        871347450517368352816615810882615488381,</span><br><span class="line">        1409869790947669143312035591975596518914,</span><br><span class="line">        2281217241465037496128651402858212007295,</span><br><span class="line">        3691087032412706639440686994833808526209,          5972304273877744135569338397692020533504,</span><br><span class="line">        9663391306290450775010025392525829059713,         15635695580168194910579363790217849593217,</span><br><span class="line">        25299086886458645685589389182743678652930,       40934782466626840596168752972961528246147,</span><br><span class="line">        66233869353085486281758142155705206899077,      107168651819712326877926895128666735145224,</span><br><span class="line">        173402521172797813159685037284371942044301,    280571172992510140037611932413038677189525,</span><br><span class="line">        453973694165307953197296969697410619233826,   734544867157818093234908902110449296423351,</span><br><span class="line">        1188518561323126046432205871807859915657177, 1923063428480944139667114773918309212080528,</span><br><span class="line">        3111581989804070186099320645726169127737705,5034645418285014325766435419644478339818233,</span><br><span class="line">        8146227408089084511865756065370647467555938,13180872826374098837632191485015125807374171,</span><br><span class="line">        21327100234463183349497947550385773274930109,</span><br><span class="line">        34507973060837282187130139035400899082304280,</span><br><span class="line">        55835073295300465536628086585786672357234389,</span><br><span class="line">        90343046356137747723758225621187571439538669,</span><br><span class="line">        146178119651438213260386312206974243796773058,</span><br><span class="line">        236521166007575960984144537828161815236311727,</span><br><span class="line">        382699285659014174244530850035136059033084785,</span><br><span class="line">        619220451666590135228675387863297874269396512,</span><br><span class="line">        1001919737325604309473206237898433933302481297,</span><br><span class="line">        1621140188992194444701881625761731807571877809,</span><br><span class="line">        2623059926317798754175087863660165740874359106,</span><br><span class="line">        4244200115309993198876969489421897548446236915,</span><br><span class="line">        6867260041627791953052057353082063289320596021,</span><br><span class="line">        11111460156937785151929026842503960837766832936,</span><br><span class="line">        17978720198565577104981084195586024127087428957,</span><br><span class="line">        29090180355503362256910111038089984964854261893,</span><br><span class="line">        47068900554068939361891195233676009091941690850,</span><br><span class="line">        76159080909572301618801306271765994056795952743,</span><br><span class="line">        123227981463641240980692501505442003148737643593,</span><br><span class="line">        199387062373213542599493807777207997205533596336,</span><br><span class="line">        322615043836854783580186309282650000354271239929,</span><br><span class="line">        522002106210068326179680117059857997559804836265,</span><br><span class="line">        844617150046923109759866426342507997914076076194,</span><br><span class="line">        1366619256256991435939546543402365995473880912459,</span><br><span class="line">        2211236406303914545699412969744873993387956988653,</span><br><span class="line">        3577855662560905981638959513147239988861837901112,</span><br><span class="line">        5789092068864820527338372482892113982249794889765,</span><br><span class="line">        9366947731425726508977331996039353971111632790877,</span><br><span class="line">        15156039800290547036315704478931467953361427680642,</span><br><span class="line">        24522987531716273545293036474970821924473060471519,</span><br><span class="line">        39679027332006820581608740953902289877834488152161,</span><br><span class="line">        64202014863723094126901777428873111802307548623680,</span><br><span class="line">        103881042195729914708510518382775401680142036775841,</span><br><span class="line">        168083057059453008835412295811648513482449585399521,</span><br><span class="line">        271964099255182923543922814194423915162591622175362,</span><br><span class="line">        440047156314635932379335110006072428645041207574883,</span><br><span class="line">        712011255569818855923257924200496343807632829750245,</span><br><span class="line">        1152058411884454788302593034206568772452674037325128,</span><br><span class="line">        1864069667454273644225850958407065116260306867075373,</span><br><span class="line">        3016128079338728432528443992613633888712980904400501,</span><br><span class="line">        4880197746793002076754294951020699004973287771475874,</span><br><span class="line">        ]</span><br><span class="line">    return offer[n] #这个函数是没问题的，可以直接返回，共250位斐波那契数</span><br></pre></td></tr></table></figure><p>计算出来，用的时候直接返回是最快的，面试时n不超过30的。最后一种看起来傻，但实际用得多。计算机里实际运用的就是这么干的。一个定理，若是被证明了，直接计算出数保存，用的时候返回就是最好的，谁还拿机器去算呐，无法确定的需要机器算，确定的值直接用不就好了吗？比如第13个梅森素数是多少？是不是要CPU去跑？肯定不会啊，算出足够多的素数，保存成表，用的时候返回，多省事儿啊！傻了吧叽的算，别人孩子都两岁了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/08/UE1Wad.png&quot; alt=&quot;recursion&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.shieber.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Algorithm" scheme="http://www.shieber.cn/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s Go</title>
    <link href="http://www.shieber.cn/title/23e3bd3/"/>
    <id>http://www.shieber.cn/title/23e3bd3/</id>
    <published>2020-07-01T13:29:05.000Z</published>
    <updated>2020-07-01T14:27:56.611Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/01/NHF7on.png" alt="gopher"></p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近学习Go这门语言，感觉有很多特性和Python一样，但又有很多特性和C一样。Go语言借鉴了许多其他语言的优秀用法。</p><p>Go由Google推出，主要开发者是贝尔实验室的大佬们(Rob Pike, Robert Griesemer, Ken Thompson)。</p><p>开发的目的主要是解决C++编译时间长的问题。Go于2009年11月正式推出第一个版本，到如今快11年了。而这十余年来，Go也逐渐火了起来。</p><h2 id="Go的几大优点"><a href="#Go的几大优点" class="headerlink" title="Go的几大优点"></a>Go的几大优点</h2><blockquote><p>1.简洁<br>2.速度接近C<br>3.原生并发非常好<br>4.对网络支持很好<br>5.文档支持也不错   </p></blockquote><h2 id="Go的几大特性"><a href="#Go的几大特性" class="headerlink" title="Go的几大特性"></a>Go的几大特性</h2><blockquote><p>1.反射<br>2.defer<br>3.工程化<br>4.错误处理<br>5.通道概念<br>6.goroutine<br>7.垃圾收集器GC<br>8.包机制(类似python)</p></blockquote><h2 id="Go的重要数据类型"><a href="#Go的重要数据类型" class="headerlink" title="Go的重要数据类型"></a>Go的重要数据类型</h2><blockquote><p>1.complex<br>2.string<br>3.slice<br>4.map<br>5.chan<br>6.interface  </p></blockquote><h2 id="Go的应用领域"><a href="#Go的应用领域" class="headerlink" title="Go的应用领域"></a>Go的应用领域</h2><blockquote><p>1.Web<br>2.分布式<br>3.中间件<br>4.服务器<br>5.数据库<br>6.网络编程<br>7.图像处理<br>8.游戏引擎  </p></blockquote><p>Go的重要产品Docker和Kubernetes，基本上大的互联网公司都在使用Go和Docker，微服务的实践因Docker和Kubernetes而火了起来。</p><p>目前云是热点，而Go天生的网络能力，使得Go成了云上的C语言。感觉未来的物联网时代，Go还会大放异彩。Go再许多方面超过了Java，又能接下许多C/C++的工作，能力是毋庸置疑的。</p><p>现在学习Go正是时候，Let’s Go!</p><p><img src="https://s1.ax1x.com/2020/07/01/NHuPxI.png" alt="golearn"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/01/NHF7on.png&quot; alt=&quot;gopher&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Go" scheme="http://www.shieber.cn/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>国内软件源</title>
    <link href="http://www.shieber.cn/title/39893abb/"/>
    <id>http://www.shieber.cn/title/39893abb/</id>
    <published>2020-06-29T02:37:53.000Z</published>
    <updated>2020-07-23T08:18:27.224Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/29/NWW8LF.png" alt="sources-list"></p><a id="more"></a><p>Linux系统安装软件，尤其是国外软件特别麻烦，因为GFW的封锁，很多软件下载安装速度简直是龟速。好在国内各大公司，机构还备有软件源，我们可以利用国内源加快下载速度。</p><h2 id="常见的国内源"><a href="#常见的国内源" class="headerlink" title="常见的国内源"></a>常见的国内源</h2><table><thead><tr><th align="left">机构</th><th align="left">源主地址</th></tr></thead><tbody><tr><td align="left">阿里云</td><td align="left"><a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></td></tr><tr><td align="left">网易</td><td align="left"><a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a></td></tr><tr><td align="left">华为</td><td align="left"><a href="http://mirrors.huaweicloud.com/" target="_blank" rel="noopener">http://mirrors.huaweicloud.com/</a></td></tr><tr><td align="left">搜狐</td><td align="left"><a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a></td></tr><tr><td align="left">清华</td><td align="left"><a href="http://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/</a></td></tr><tr><td align="left">中科大</td><td align="left"><a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/</a></td></tr></tbody></table><h2 id="如何设置呢"><a href="#如何设置呢" class="headerlink" title="如何设置呢?"></a>如何设置呢?</h2><p>找到软件更新器，点击进去是如下界面。</p><p><img src="https://s1.ax1x.com/2020/06/29/NWWxyT.png" alt="sources-list"></p><p>在<strong>下载自</strong>处点击，进去找China或者中国，点开下面就是国内可用的源了，选择一个，然后确认，接着会显示过期了，点更新。</p><p><img src="https://s1.ax1x.com/2020/06/29/NWW8LF.png" alt="sources-list"></p><p>接着是处理/etc/apt/sources.list内容。</p><p>首先备份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.back</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>加入如下内容</p><p>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-security universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-security multiverse  </p><p>最后更新    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update   </span><br><span class="line">$ sudo apt upgrade</span><br></pre></td></tr></table></figure><p>现在安装软件速度就快了，可以试试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install xxx</span><br></pre></td></tr></table></figure><h2 id="加入其他源"><a href="#加入其他源" class="headerlink" title="加入其他源"></a>加入其他源</h2><p>若要安装其他软件，可以自行添加对应源，比如要安装docker<br>deb [arch=amd64] <a href="http://download.docker.com/linux/ubuntu" target="_blank" rel="noopener">http://download.docker.com/linux/ubuntu</a> bionic stable  </p><p><strong>注意：</strong>bionic是ubuntu18.04的代号，若是16.04和20.04就需要更换为对应的xenial及focal。上面的阿里云源的bionic也对应更换。比如20.04是如下</p><p>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-updates main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-updates universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-updates multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-security main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-security universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-security multiverse  </p><h2 id="若软件不在源-ubuntu下，如何处理？"><a href="#若软件不在源-ubuntu下，如何处理？" class="headerlink" title="若软件不在源/ubuntu下，如何处理？"></a>若软件不在源/ubuntu下，如何处理？</h2><p>用阿里云的源，比如deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a>  结尾是/ubuntu/，那么只有ubuntu加入了官方软件仓库的软件才能命令行一行代码下载，可有的是没有加入/ubuntu仓库的，如何解决？</p><p>其实也很间单，没加入/ubuntu/，说不定阿里云源或者其他源单独准备了。比如安装Rust可用中科大的源<br><a href="http://mirrors.ustc.edu.cn/rust-static/rustup" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/rust-static/rustup</a> 这个源是可以用的。</p><h2 id="若各个源都没有，只能安装外网的软件怎么办？"><a href="#若各个源都没有，只能安装外网的软件怎么办？" class="headerlink" title="若各个源都没有，只能安装外网的软件怎么办？"></a>若各个源都没有，只能安装外网的软件怎么办？</h2><p>这种情况我遇到过一次，而且是被封的软件。解决办法很间单：翻墙。</p><p>如果能找到代理ip，就可以用代理ip在命令行翻墙下载。</p><p>具体操作<br>1.网上(或自己的)找一个代理Ip<br>2.按照如下格式下载安装xxx软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install xxx -o Acquire::http::proxy=&quot;http://190.103.178.14:8080&quot;   #http协议</span><br><span class="line">$ sudo apt install xxx -o Acquire::https::proxy=&quot;https://190.103.178.14:8080&quot; #https协议</span><br></pre></td></tr></table></figure><p>注意端口不一定是8080，协议也不一定是https，上面Ip是随意写的，你需要自己找一个可用的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/06/29/NWW8LF.png&quot; alt=&quot;sources-list&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="http://www.shieber.cn/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="software" scheme="http://www.shieber.cn/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>100本西方元典书籍(metabook)</title>
    <link href="http://www.shieber.cn/title/7ba15624/"/>
    <id>http://www.shieber.cn/title/7ba15624/</id>
    <published>2020-06-29T02:17:57.000Z</published>
    <updated>2020-07-24T04:14:22.062Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/29/NWagmV.png" alt="metabook"></p><a id="more"></a><h1 id="100本值得读的西方元典书籍-metabook"><a href="#100本值得读的西方元典书籍-metabook" class="headerlink" title="100本值得读的西方元典书籍(metabook)"></a>100本值得读的西方元典书籍(metabook)</h1><p>前段时间整理了<a href="https://blog.csdn.net/Shieber/article/details/89295299" target="_blank" rel="noopener">一百本中华元典书籍</a>，今日顺便把值得读的100本西方元典书籍补上。还是那个观点，先读基本书籍，才能对西方的文明有深入了解，我自己也得按照这份书单来学习，西方元典大概也是按照朝代列出。</p><p><a id="download" href="https://github.com/QMHTMY/Ebooks/blob/master/%E5%85%83%E5%85%B8%E4%B9%A6%E7%B1%8D.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>100本元典书籍PDF文件下载</span></a></p><table><thead><tr><th align="left">书名</th><th align="left">作者</th></tr></thead><tbody><tr><td align="left">《圣经和合本》</td><td align="left">众信徒</td></tr><tr><td align="left">《古兰经》</td><td align="left">奥托曼</td></tr><tr><td align="left">《奥德赛》</td><td align="left">荷马</td></tr><tr><td align="left">《伊利亚特》</td><td align="left">荷马</td></tr><tr><td align="left">《伯罗奔尼撒战争史》</td><td align="left">修昔底德</td></tr><tr><td align="left">《对话录》</td><td align="left">柏拉图</td></tr><tr><td align="left">《申辩篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《克力同篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《政治家篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《法律篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《会饮篇》</td><td align="left">柏拉图</td></tr><tr><td align="left">《理想国》</td><td align="left">柏拉图</td></tr><tr><td align="left">《诗学》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《论灵魂》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《修辞学》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《物理学》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《工具论》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《形而上学》</td><td align="left">亚里士多德</td></tr><tr><td align="left">《论世界》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《论人》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《方法论》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《几何学》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《哲学原理》</td><td align="left">笛卡尔</td></tr><tr><td align="left">《乌托邦》</td><td align="left">托马斯·莫尔</td></tr><tr><td align="left">《自然哲学的数学原理》</td><td align="left">牛顿</td></tr><tr><td align="left">《拉摩的侄儿》</td><td align="left">狄德罗</td></tr><tr><td align="left">《修女》</td><td align="left">狄德罗</td></tr><tr><td align="left">《定命论者雅克和他的主人》</td><td align="left">狄德罗</td></tr><tr><td align="left">《狄德罗哲学选集》</td><td align="left">狄德罗</td></tr><tr><td align="left">《政府论》</td><td align="left">洛克</td></tr><tr><td align="left">《人生论》</td><td align="left">培根</td></tr><tr><td align="left">《新工具》</td><td align="left">培根</td></tr><tr><td align="left">《培根随笔集》</td><td align="left">培根</td></tr><tr><td align="left">《人类知识原理》</td><td align="left">貝克萊</td></tr><tr><td align="left">《西利斯》</td><td align="left">貝克萊</td></tr><tr><td align="left">《海拉斯与斐洛斯对话三篇》</td><td align="left">貝克萊</td></tr><tr><td align="left">《哈姆雷特》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《罗密欧与朱丽叶》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《仲夏夜之梦》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《威尼斯商人》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《李尔王》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《麦克白》</td><td align="left">莎士比亞</td></tr><tr><td align="left">《纯粹理性批评》</td><td align="left">康德</td></tr><tr><td align="left">《实践理性批评》</td><td align="left">康德</td></tr><tr><td align="left">《判断力批判》</td><td align="left">康德</td></tr><tr><td align="left">《逻辑学讲义》</td><td align="left">康德</td></tr><tr><td align="left">《论美感和崇高感》</td><td align="left">康德</td></tr><tr><td align="left">《历史理性批判文集》</td><td align="left">康德</td></tr><tr><td align="left">《法的形而上学原理》</td><td align="left">康德</td></tr><tr><td align="left">《小逻辑》</td><td align="left">黑格尔</td></tr><tr><td align="left">《精神现象学》</td><td align="left">黑格尔</td></tr><tr><td align="left">《逻辑学》</td><td align="left">黑格尔</td></tr><tr><td align="left">《历史哲学》</td><td align="left">黑格尔</td></tr><tr><td align="left">《美学》</td><td align="left">黑格尔</td></tr><tr><td align="left">《法哲学原理》</td><td align="left">黑格尔</td></tr><tr><td align="left">《哲学史演讲录》</td><td align="left">黑格尔</td></tr><tr><td align="left">《少年威特的烦恼》</td><td align="left">歌德</td></tr><tr><td align="left">《浮士德》</td><td align="left">歌德</td></tr><tr><td align="left">《葛朗台》</td><td align="left">巴尔扎克</td></tr><tr><td align="left">《高老头》</td><td align="left">巴尔扎克</td></tr><tr><td align="left">《人间喜剧幻灭》</td><td align="left">巴尔扎克</td></tr><tr><td align="left">《 驴皮记》</td><td align="left">巴尔扎克</td></tr><tr><td align="left">《安娜·卡列尼娜》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《战争与和平》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《复活》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《伊凡·伊里奇之死》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《托尔斯泰忏悔录》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《童年》</td><td align="left">高尔基</td></tr><tr><td align="left">《在人间》</td><td align="left">高尔基</td></tr><tr><td align="left">《我的大学》</td><td align="left">高尔基</td></tr><tr><td align="left">《母亲》</td><td align="left">高尔基</td></tr><tr><td align="left">《巴黎圣母院》</td><td align="left">雨果</td></tr><tr><td align="left">《悲惨世界》</td><td align="left">雨果</td></tr><tr><td align="left">《笑面人》</td><td align="left">雨果</td></tr><tr><td align="left">《九三年》</td><td align="left">雨果</td></tr><tr><td align="left">《论人类不平等的起源和基础》</td><td align="left">卢梭</td></tr><tr><td align="left">《社会契约论》</td><td align="left">卢梭</td></tr><tr><td align="left">《致希罗多德信》</td><td align="left">伊壁鸠鲁</td></tr><tr><td align="left">《神曲》</td><td align="left">但丁</td></tr><tr><td align="left">《君主论》</td><td align="left">马基雅弗利</td></tr><tr><td align="left">《牧歌》</td><td align="left">维吉尔</td></tr><tr><td align="left">《罗马史》</td><td align="left">李维</td></tr><tr><td align="left">《达芬奇笔记》</td><td align="left">达芬奇</td></tr><tr><td align="left">《随笔集》</td><td align="left">蒙田</td></tr><tr><td align="left">《堂吉诃德》</td><td align="left">塞万提斯</td></tr><tr><td align="left">《莎士比亚全集》</td><td align="left">莎士比亚</td></tr><tr><td align="left">《关于两门新科学的对话》</td><td align="left">伽利略</td></tr><tr><td align="left">《利维坦》</td><td align="left">托马斯·霍布斯</td></tr><tr><td align="left">《国富论》</td><td align="left">亚当·斯密</td></tr><tr><td align="left">《道德情操论》</td><td align="left">亚当·斯密</td></tr><tr><td align="left">《罗马帝国的衰亡》</td><td align="left">爱德华·吉本</td></tr><tr><td align="left">《傲慢与偏见》</td><td align="left">奥斯汀</td></tr><tr><td align="left">《红与黑》</td><td align="left">司汤达</td></tr><tr><td align="left">《意志和表象的世界》</td><td align="left">叔本华</td></tr><tr><td align="left">《卡拉马佐夫兄弟》</td><td align="left">陀思妥耶夫斯基</td></tr><tr><td align="left">《包法利夫人》</td><td align="left">福楼拜</td></tr><tr><td align="left">《战争与和平》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《安娜·卡列尼娜》</td><td align="left">托尔斯泰</td></tr><tr><td align="left">《梦的解析》</td><td align="left">弗洛伊德</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献            "></a>参考文献            </h2><p>《如何阅读一本书》–莫提默</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/06/29/NWagmV.png&quot; alt=&quot;metabook&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://www.shieber.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="book" scheme="http://www.shieber.cn/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>100本中国元典书籍(metabook)</title>
    <link href="http://www.shieber.cn/title/53658772/"/>
    <id>http://www.shieber.cn/title/53658772/</id>
    <published>2020-06-29T01:54:33.000Z</published>
    <updated>2020-06-29T02:13:00.513Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/29/NWNXDK.png" alt="metabook"></p><a id="more"></a><h1 id="100本中国元典书籍-metabook"><a href="#100本中国元典书籍-metabook" class="headerlink" title="100本中国元典书籍(metabook) "></a>100本中国元典书籍(metabook) </h1><p>任何的书籍都是建立在一定的基础之上，而有些书籍却属于开宗立派，故而它们的价值极为的重大，这些书籍我称之为元典书籍(metabook)。metabook这个单词是我造的，依据是形而上学这个单词metaphysics。metaphysics原指亚里士多德的哲学著作被放在其自然科学著作后面，有之后的意思，引申为更基本，在之上的意思，哲学就是形而上的。形而上学这个中文词汇来自于《易经》：形而上者谓之道，形而下者谓之器 —《易经・系辞》[1]。元，意味着其独一无二，不可替代。有的时候读书，常看到别人引用一段古文或是圣经词句，但是我们自己是不知道的，只有看作者如何解释，而作者的理解不一定对。所以读书先读元典书籍，再看今天的人写的书，就会感到通透彻底，读起来才能体会作者的真正意图。金克木老先生在其《书读完了》一书中提倡的正是此法：先读基本书籍，也就是元典书籍，花个三冬的时间，人文历史就基本够了。</p><p>写到这里，我突然想起北京大学通识教育经典名著阅读计划中将文艺复兴以降的科学经典著作称为科学元典，以和经典相区别。我这里说的元典和科学元典不同，科学元典只是为了区别科学和人文，而metabook是为了表明书的特殊地位，价值，并不分科学人文。我希望这个单词和中文词汇能得到广泛使用，进而推动百姓读书，学知识，长见识，扬文化，做真人。本文只按朝代列出了中国元典。</p><p><a id="download" href="https://github.com/QMHTMY/Ebooks/blob/master/%E5%85%83%E5%85%B8%E4%B9%A6%E7%B1%8D.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>100本元典书籍PDF文件下载</span></a></p><table><thead><tr><th align="left">书名</th><th align="center">年代</th><th align="center">作者</th><th align="left">评价</th></tr></thead><tbody><tr><td align="left">《周易》</td><td align="center">殷商</td><td align="center">佚名</td><td align="left">中华文化之本源</td></tr><tr><td align="left">《道德经》</td><td align="center">春秋</td><td align="center">老子</td><td align="left">道学之精髓哲学之先本</td></tr><tr><td align="left">《论语》</td><td align="center">春秋</td><td align="center">孔子</td><td align="left">儒家文化之起源</td></tr><tr><td align="left">《左转》</td><td align="center">春秋</td><td align="center">左丘明</td><td align="left">中国史学叙事传统的奠基之作</td></tr><tr><td align="left">《诗经》</td><td align="center">春秋</td><td align="center">佚名</td><td align="left">中国最早的诗歌总集</td></tr><tr><td align="left">《尚书》</td><td align="center">春秋</td><td align="center">佚名</td><td align="left">中国现存最早的散文总集</td></tr><tr><td align="left">《孙子兵法》</td><td align="center">春秋</td><td align="center">孙武</td><td align="left">世界现存最早的兵家圣典</td></tr><tr><td align="left">《鬼谷子》</td><td align="center">春秋</td><td align="center">鬼谷子</td><td align="left">研究纵横捭阖之术的千古奇书</td></tr><tr><td align="left">《夏小正》</td><td align="center">春秋</td><td align="center">佚名</td><td align="left">中国现存最早的农事历书</td></tr><tr><td align="left">《黄帝内经》</td><td align="center">春秋</td><td align="center">佚名</td><td align="left">中国现存最早的医学典籍</td></tr><tr><td align="left">《墨子》</td><td align="center">战国</td><td align="center">墨子</td><td align="left">古代劳动者的哲学圣经</td></tr><tr><td align="left">《孟子》</td><td align="center">战国</td><td align="center">孟子</td><td align="left">剖析仁爱精髓的亚圣之书</td></tr><tr><td align="left">《庄子》</td><td align="center">战国</td><td align="center">庄子</td><td align="left">彰显道家浪漫主义思想的巨著</td></tr><tr><td align="left">《荀子》</td><td align="center">战国</td><td align="center">荀子</td><td align="left">以儒家为本，兼采百家之长</td></tr><tr><td align="left">《韩非子》</td><td align="center">战国</td><td align="center">韩非</td><td align="left">先秦法家学说集大成之作</td></tr><tr><td align="left">《吕氏春秋》</td><td align="center">战国</td><td align="center">吕不韦</td><td align="left">兼容并蓄的杂家经典</td></tr><tr><td align="left">《国语》</td><td align="center">战国</td><td align="center">佚名</td><td align="left">中国现存最早的国别体专著</td></tr><tr><td align="left">《孙膑兵法》</td><td align="center">战国</td><td align="center">孙膑</td><td align="left">战国兵书之杰</td></tr><tr><td align="left">《商君书》</td><td align="center">战国</td><td align="center">商鞅</td><td align="left">集中体现法家军政思想的专著</td></tr><tr><td align="left">《六韬》</td><td align="center">战国</td><td align="center">佚名</td><td align="left">开兵家权谋之先河</td></tr><tr><td align="left">《山海经》</td><td align="center">先秦</td><td align="center">佚名</td><td align="left">中国古代神话小说的本源</td></tr><tr><td align="left">《战国策》</td><td align="center">西汉</td><td align="center">刘向</td><td align="left">战国政治斗争最完整的文献记录</td></tr><tr><td align="left">《三略》</td><td align="center">西汉</td><td align="center">佚名</td><td align="left">中国第一部专述战略的兵书</td></tr><tr><td align="left">《九章算术》</td><td align="center">西汉</td><td align="center">佚名</td><td align="left">中国古代数学形成完整体系的标志</td></tr><tr><td align="left">《周髀算经》</td><td align="center">西汉</td><td align="center">佚名</td><td align="left">中国现存最早的天文算法类专著</td></tr><tr><td align="left">《淮南子》</td><td align="center">西汉</td><td align="center">刘安</td><td align="left">以道学为基，兼合百家之长</td></tr><tr><td align="left">《史记》</td><td align="center">西汉</td><td align="center">司马迁</td><td align="left">中国历史上第一部纪传体通史</td></tr><tr><td align="left">《楚辞》</td><td align="center">西汉</td><td align="center">刘向</td><td align="left">中国第一部浪漫主义诗歌总集</td></tr><tr><td align="left">《论衡》</td><td align="center">东汉</td><td align="center">王充</td><td align="left">中国历史上不朽的无神论著作</td></tr><tr><td align="left">《汉书》</td><td align="center">东汉</td><td align="center">班固</td><td align="left">中国历史上第一部纪传断代史</td></tr><tr><td align="left">《说文解字》</td><td align="center">东汉</td><td align="center">许慎</td><td align="left">中国首部以部首编排的字典</td></tr><tr><td align="left">《伤寒杂病论》</td><td align="center">东汉</td><td align="center">张仲景</td><td align="left">中医学方书鼻祖</td></tr><tr><td align="left">《三国志》</td><td align="center">西晋</td><td align="center">陈寿</td><td align="left">三国并叙的断代专著</td></tr><tr><td align="left">《后汉书》</td><td align="center">西晋</td><td align="center">范晔</td><td align="left">专注于东汉史的纪传体著作</td></tr><tr><td align="left">《抱朴子》</td><td align="center">东晋</td><td align="center">葛洪</td><td align="left">构建道教神仙理论体系的巨著</td></tr><tr><td align="left">《搜神记》</td><td align="center">东晋</td><td align="center">干宝</td><td align="left">中国笔记体志怪小说之鼻祖</td></tr><tr><td align="left">《华阳国志》</td><td align="center">东晋</td><td align="center">常璩</td><td align="left">中国现存最早的地方志专著</td></tr><tr><td align="left">《陶渊明集》</td><td align="center">东晋</td><td align="center">陶渊明</td><td align="left">开田园风光先河的诗文总集</td></tr><tr><td align="left">《文心雕龙》</td><td align="center">南朝</td><td align="center">刘勰</td><td align="left">中国古代最系统的文学理论专著</td></tr><tr><td align="left">《文选》</td><td align="center">南朝</td><td align="center">萧统</td><td align="left">中国现存最早的诗文选集</td></tr><tr><td align="left">《世说新语》</td><td align="center">南朝</td><td align="center">刘义庆</td><td align="left">南北朝志人小说代表作</td></tr><tr><td align="left">《洛阳伽蓝记》</td><td align="center">北朝</td><td align="center">杨炫之</td><td align="left">中国历史上唯一一部记述城市寺院的专著</td></tr><tr><td align="left">《水经注》</td><td align="center">北朝</td><td align="center">郦道元</td><td align="left">集六朝地志之大成</td></tr><tr><td align="left">《齐民要术》</td><td align="center">北朝</td><td align="center">贾思勰</td><td align="left">世界最早最系统的农业科学专著</td></tr><tr><td align="left">《史通》</td><td align="center">唐代</td><td align="center">刘知几</td><td align="left">中国现存最早的史学理论专著</td></tr><tr><td align="left">《大唐西域记》</td><td align="center">唐代</td><td align="center">玄奘</td><td align="left">中世纪中南亚地区最权威的史地文献</td></tr><tr><td align="left">《李太白集》</td><td align="center">唐代</td><td align="center">李白</td><td align="left">将浪漫主义推向极致的诗歌集</td></tr><tr><td align="left">《杜工部集》</td><td align="center">唐代</td><td align="center">杜甫</td><td align="left">中国古典诗歌现实主义高峰</td></tr><tr><td align="left">《昌黎先生集》</td><td align="center">唐代</td><td align="center">韩愈</td><td align="left">文起八代之衰的典范之作</td></tr><tr><td align="left">《河东先生集》</td><td align="center">唐代</td><td align="center">柳宗元</td><td align="left">寄意山水的古代散文经典</td></tr><tr><td align="left">《贞观政要》</td><td align="center">唐代</td><td align="center">吴兢</td><td align="left">反映贞观之治的政论专著</td></tr><tr><td align="left">《唐律疏议》</td><td align="center">唐代</td><td align="center">长孙无忌</td><td align="left">中国最早最完整的刑事法典</td></tr><tr><td align="left">《千金方》</td><td align="center">唐代</td><td align="center">孙思邈</td><td align="left">确立中医学分科的百代之师</td></tr><tr><td align="left">《开元占经》</td><td align="center">唐代</td><td align="center">瞿昙悉达</td><td align="left">中国古代占星术大全</td></tr><tr><td align="left">《茶经》</td><td align="center">唐代</td><td align="center">陆羽</td><td align="left">世界上第一部茶文化专著</td></tr><tr><td align="left">《虬髯客传》</td><td align="center">五代</td><td align="center">杜光庭</td><td align="left">开创古典武侠小说之先河</td></tr><tr><td align="left">《资治通鉴》</td><td align="center">北宋</td><td align="center">司马光</td><td align="left">中国历史上第一部编年体通史</td></tr><tr><td align="left">《欧阳文忠公集》</td><td align="center">北宋</td><td align="center">欧阳修</td><td align="left">北宋文坛的奠基之作</td></tr><tr><td align="left">《苏轼集》</td><td align="center">北宋</td><td align="center">苏轼</td><td align="left">豪放派诗词的巅峰之作</td></tr><tr><td align="left">《乐府诗集》</td><td align="center">北宋</td><td align="center">郭茂倩</td><td align="left">中国现存最早的最完备的乐府诗总集</td></tr><tr><td align="left">《乐章集》</td><td align="center">北宋</td><td align="center">柳永</td><td align="left">雅俗并收、尽显才情风流</td></tr><tr><td align="left">《太平广记》</td><td align="center">北宋</td><td align="center">李昉</td><td align="left">中国现存卷帙最长的古典小说集</td></tr><tr><td align="left">《梦溪笔谈》</td><td align="center">北宋</td><td align="center">沈括</td><td align="left">中国古代笔记体百科全书</td></tr><tr><td align="left">《漱玉词》</td><td align="center">南宋</td><td align="center">李清照</td><td align="left">清丽婉约、辞情相称的词中上品</td></tr><tr><td align="left">《稼轩长短句》</td><td align="center">南宋</td><td align="center">辛弃疾</td><td align="left">豪迈不失细腻，词收两宋之冠</td></tr><tr><td align="left">《洗冤集录》</td><td align="center">南宋</td><td align="center">宋慈</td><td align="left">世界上最早的法医学专著</td></tr><tr><td align="left">《窦娥冤》</td><td align="center">元代</td><td align="center">关汉卿</td><td align="left">中国古代悲剧的代表作</td></tr><tr><td align="left">《西厢记》</td><td align="center">元代</td><td align="center">王实甫</td><td align="left">中国古代戏剧的现实主义杰作</td></tr><tr><td align="left">《墙头马上》</td><td align="center">元代</td><td align="center">白朴</td><td align="left">中国古代经典爱情喜剧</td></tr><tr><td align="left">《汉宫秋》</td><td align="center">元代</td><td align="center">马致远</td><td align="left">颠覆历史的现实主义悲剧杰作</td></tr><tr><td align="left">《唐才子传》</td><td align="center">元代</td><td align="center">辛文房</td><td align="left">唐五代诗人评传汇集</td></tr><tr><td align="left">《三国演义》</td><td align="center">明初</td><td align="center">罗贯中</td><td align="left">中国章回体历史小说的开山之作</td></tr><tr><td align="left">《水浒传》</td><td align="center">明初</td><td align="center">施耐庵</td><td align="left">中国古代英雄英雄传奇小说之典范</td></tr><tr><td align="left">《传习录》</td><td align="center">明代</td><td align="center">王阳明</td><td align="left">宋明心学集大成之作</td></tr><tr><td align="left">《徐霞客游记》</td><td align="center">明代</td><td align="center">徐霞客</td><td align="left">中国最早的日记体游记专著</td></tr><tr><td align="left">《西游记》</td><td align="center">明代</td><td align="center">吴承恩</td><td align="left">色彩纷呈的浪漫主义神</td></tr><tr><td align="left">《牡丹亭》</td><td align="center">明代</td><td align="center">汤显祖</td><td align="left">中国戏曲史上浪漫主义杰作</td></tr><tr><td align="left">《封神演义》</td><td align="center">明代</td><td align="center">陈仲琳</td><td align="left">幻想奇特的神魔小说</td></tr><tr><td align="left">《三言》</td><td align="center">明代</td><td align="center">冯梦龙</td><td align="left">中国白话短篇小说的杰出代表</td></tr><tr><td align="left">《二拍》</td><td align="center">明代</td><td align="center">凌濛初</td><td align="left">中国首部文人独立创作的短篇小说集</td></tr><tr><td align="left">《本草纲目》</td><td align="center">明代</td><td align="center">李时珍</td><td align="left">东方中医药学百科巨典</td></tr><tr><td align="left">《农政全书》</td><td align="center">明代</td><td align="center">徐光启</td><td align="left">采集百家之长的农业百科全书</td></tr><tr><td align="left">《天工开物》</td><td align="center">明代</td><td align="center">宋应星</td><td align="left">世界上第一部工农业综合性著作</td></tr><tr><td align="left">《三十六计》</td><td align="center">清初</td><td align="center">佚名</td><td align="left">汇集兵家奇谋方略之杰作</td></tr><tr><td align="left">《明夷待访录》</td><td align="center">清初</td><td align="center">黄宗羲</td><td align="left">呼唤民主政体的思想启蒙专著</td></tr><tr><td align="left">《日知录》</td><td align="center">清初</td><td align="center">顾炎武</td><td align="left">中国近代思想启蒙的基石</td></tr><tr><td align="left">《海国图志》</td><td align="center">清代</td><td align="center">魏源</td><td align="left">中国近代史上第一部系统的世界地理著作</td></tr><tr><td align="left">《古文观止》</td><td align="center">清代</td><td align="center">吴楚才</td><td align="left">中国古文选本之最</td></tr><tr><td align="left">《纳兰词》</td><td align="center">清代</td><td align="center">纳兰性德</td><td align="left">哀感顽艳，颇有南唐后主遗风</td></tr><tr><td align="left">《长生殿》</td><td align="center">清代</td><td align="center">洪升</td><td align="left">震惊清初剧坛的传奇之作</td></tr><tr><td align="left">《聊斋志异》</td><td align="center">清代</td><td align="center">蒲松龄</td><td align="left">刺贪刺虐入木三分</td></tr><tr><td align="left">《桃花扇》</td><td align="center">清代</td><td align="center">孔尚任</td><td align="left">中国首部反映南明消亡的历史剧</td></tr><tr><td align="left">《儒林外史》</td><td align="center">清代</td><td align="center">吴敬梓</td><td align="left">中国古代讽刺小说中的圣品</td></tr><tr><td align="left">《红楼梦》</td><td align="center">清代</td><td align="center">曹雪芹</td><td align="left">中国古典小说史上的巅峰巨作</td></tr><tr><td align="left">《海上花列传》</td><td align="center">清代</td><td align="center">韩邦庆</td><td align="left">中国文学史上第一部方言小说</td></tr><tr><td align="left">《老残游记》</td><td align="center">清代</td><td align="center">刘鹗</td><td align="left">清末谴责小说的杰出代表</td></tr><tr><td align="left">《孔子改制考》</td><td align="center">清代</td><td align="center">康有为</td><td align="left">轰动晚晴思想界的变法理论专著</td></tr><tr><td align="left">《呐喊》</td><td align="center">现代</td><td align="center">鲁迅</td><td align="left">中国现代白话文小说的起点</td></tr><tr><td align="left">《朝花夕拾》</td><td align="center">现代</td><td align="center">鲁迅</td><td align="left">从往事中抄来的记忆</td></tr><tr><td align="left">《背影》</td><td align="center">现代</td><td align="center">朱自清</td><td align="left">天地间第一等至情文学</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献                           "></a>参考文献                           </h2><p>[1]《符号学导论》，黄华新。       </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/06/29/NWNXDK.png&quot; alt=&quot;metabook&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://www.shieber.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="book" scheme="http://www.shieber.cn/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>国产统一操作系统UOS</title>
    <link href="http://www.shieber.cn/title/7aceb1f4/"/>
    <id>http://www.shieber.cn/title/7aceb1f4/</id>
    <published>2020-06-29T01:40:29.000Z</published>
    <updated>2020-06-29T01:49:19.130Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200111132834618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="uos-cover"></p><a id="more"></a><p>前段时间国产操作系统UOS(Unity Operating System)释出，最近用虚拟机试了试。总体来说，操作流畅，符合国人习惯。UOS内置中文输入法和各类便捷工具，大大方便用户工作。</p><p>UOS是由中兴，电子集团，深之度科技等联合开发的一款国产Linux发行版，使用过Linux很快就能上手。UOS默认是没有root权限的，要登录帐号以开启，这和Ubuntu之类默认带root功能的发行版不同。UOS主体应该就是Deepin系统，软件安装方式则延续Debian系列的apt-get install方式。</p><p>UOS发布的时间表(2019)：<br>10月15日：面向BIOS、CPU、整机和ODM厂商，发布龙芯、华为、飞腾、兆芯、海光五个平台的桌面和服务器UOS alpha测试版本。该版本主要功能和用户交互基本完成，存在比较明显的细节缺失和bug，但可以开展面向指定CPU型号的适配验证。<br>11月10日：发布Alpha2版本，增加对申威、海光架构版本的支持。Alpha2版本将面向安全厂商、应用厂商开发，用于进行底层安全检查；软件应用厂商可以开始基本适配测试。<br>11月30日：合并新的功能代码，并修复alpha版本发现的问题。发布beta版本，各软件厂商可以针对该版本进行正式适配。<br>12月15日：发布RC版本，代码冻结，进入正式版本发布前的bug修复阶段。<br>12月31日：如基于RC版本的修复版本通过质量测试，则发布FINAL正式版本。  </p><h2 id="界面和功能欣赏"><a href="#界面和功能欣赏" class="headerlink" title="界面和功能欣赏"></a>界面和功能欣赏</h2><p>安装界面有各种语言可选择，包括台湾和港澳的繁体及正体中文。  </p><p><img src="https://img-blog.csdnimg.cn/20200111132945302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="install"></p><p>安装时间不长。</p><p><img src="https://img-blog.csdnimg.cn/20200111133009228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="install1"></p><p>开机界面，似乎Deepin默认就是这个，极光挺美的。</p><p><img src="https://img-blog.csdnimg.cn/20200111133028590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="login"></p><p>登录界面的图片可设置。</p><p><img src="https://img-blog.csdnimg.cn/20200111133043807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="login1"></p><p>自带的壁纸很好，我这里选用了一张必应壁纸。</p><p><img src="https://img-blog.csdnimg.cn/2020011113311328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="wallpaper"></p><p>界面和Windows很像，符合国人的习惯。  </p><p><img src="https://img-blog.csdnimg.cn/20200111133133192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="menu"></p><p>点击上图头像右上角扩展符号可以扩展为下面的样式。</p><p><img src="https://img-blog.csdnimg.cn/20200111133156994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="software"></p><p>UOS的浏览器似乎是封装某浏览器内核制作的，默认搜索工具是360搜索。   </p><p><img src="https://img-blog.csdnimg.cn/20200111133212660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="explorer"></p><p>自带的图片管理浏览工具。</p><p><img src="https://img-blog.csdnimg.cn/20200111133221348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="picview"></p><p>自带音乐播放器。 </p><p><img src="https://img-blog.csdnimg.cn/20200111133243487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="music"></p><p>自带视频播放器。 </p><p><img src="https://img-blog.csdnimg.cn/20200111133254569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="softwarezh"></p><p>自带的应用下载市场，软件还不多，后续应该会越来越多。若是嫌界面图标遮住界面，碍眼，可右键设置为自动隐藏。</p><p><img src="https://img-blog.csdnimg.cn/20200111133306939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="appmarket"></p><p>终端使用，透明度调节没问题。  </p><p><img src="https://img-blog.csdnimg.cn/20200111133327263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="bash"></p><p>系统监视工具，这个似乎是top命令的GUI版。</p><p><img src="https://img-blog.csdnimg.cn/20200111133348655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="htop"></p><p>自带编辑器，当然也预置了Vim。</p><p><img src="https://img-blog.csdnimg.cn/20200111133404815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="editor"></p><h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>UOS以Deepin为核心，各大公司合力开发，支持多种国产CPU，使用流畅，软件简洁好用。总体来说，是值得广大用户使用的一款国产Linux系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200111132834618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70&quot; alt=&quot;uos-cover&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="http://www.shieber.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="OS" scheme="http://www.shieber.cn/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>用RSS快速干净地获取各领域信息</title>
    <link href="http://www.shieber.cn/title/9ade8626/"/>
    <id>http://www.shieber.cn/title/9ade8626/</id>
    <published>2020-06-04T14:22:55.000Z</published>
    <updated>2020-06-05T07:04:57.896Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/04/tBLh11.jpg" alt="rsslogo"></p><a id="more"></a><p>信息时代，信息更新快，碎片化。大部分人都通过各类新闻软件获取信息，比如头条，腾讯新闻，微信公众号等等。然而这些信息是别人特意挑选，甚至是算法推送的。有没有可能自己选择些新闻信息聚合在一个软件里来看呢？当然有，那就是<a href="https://baike.baidu.com/item/rss/24470" target="_blank" rel="noopener">RSS简易信息聚合</a>，可以将其理解成各信息发布渠道提供的另一种信息访问方式。</p><p>比如一个网站，除了可以在浏览器中输入<a href="http://xxx" target="_blank" rel="noopener">http://xxx</a> 登录查看点击网页查看，还可用RSS获取同样的内容，而且可将各网站的信息聚合在一个软件。RSS的优点，多个消息渠道聚合在一个APP里节约空间，可自动推送，不会被算法分析，没有广告，隐私程度高，不想看了可随时取消订阅。</p><p>有很多优秀的RSS软件，在此推荐几个，可能需要翻墙到Google play才能获得。  </p><table><thead><tr><th align="left">软件名</th><th align="left">支持平台</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">RSS reader</td><td align="left">Android</td><td align="left"><a href="https://play.google.com" target="_blank" rel="noopener">https://play.google.com</a></td></tr><tr><td align="left">Winds</td><td align="left">Win,Mac,Linux</td><td align="left"><a href="https://getstream.io/winds" target="_blank" rel="noopener">https://getstream.io/winds</a></td></tr><tr><td align="left">订阅帝</td><td align="left">Android</td><td align="left"><a href="https://www.dingyuedi.com" target="_blank" rel="noopener">https://www.dingyuedi.com</a></td></tr></tbody></table><p>如下是Google play上的RSS软件，太多了，都很不错，各个特色不一样，有的收费。</p><p><img src="https://s1.ax1x.com/2020/06/05/tDNHl8.png" alt="rss2"></p><p><img src="https://s1.ax1x.com/2020/06/05/tDNxkn.png" alt="rss3"></p><p>接下来的一个问题是，我怎么知道某新闻是否提供RSS信息发布渠道呢？</p><p>这个有多种解决方法。</p><p>第一：网站提供RSS发布渠道，那么通常在顶部菜单、右侧菜单、底部菜单等地方会有RSS图标，鼠标放RSS图标上面或者点击进去可以看到对应的RSS地址，比如本网站订阅地址<a href="https://www.shieber.cn/atom.xml，">https://www.shieber.cn/atom.xml，</a> 其他网站可能是<a href="https://xxx.xxx.xx/feed，https://xxx.xxx.xx/rss。" target="_blank" rel="noopener">https://xxx.xxx.xx/feed，https://xxx.xxx.xx/rss。</a> 总之结尾是 atom.xml、feed、rss等，可多次尝试。</p><p>下图左侧橙色RSS图标很显眼，鼠标放上面，最下面就是订阅地址，添加到RSS软件里，这些博客就可以看了。</p><p><img src="https://s1.ax1x.com/2020/06/05/tDNgyD.png" alt="rss1"></p><p>第二：网站不提供RSS发布渠道，此时可以利用工具自己制作该网站的RSS源并订阅。制作工具及使用方法可以搜索一下，比如<a href="http://createfeed.fivefilters.org" target="_blank" rel="noopener">Feed Creatro</a>和<a href="http://www.feed43.com" target="_blank" rel="noopener">feed43</a>，具体操作可以看<a href="https://zhuanlan.zhihu.com/p/64457116" target="_blank" rel="noopener">如何用RSS订阅？</a>。</p><p>第三：利用别人总结好的源，直接订阅，比如<a href="https://www.zhihu.com/question/19580096" target="_blank" rel="noopener">你必读的RSS订阅源有哪些？</a>或者一些RSS订阅源汇聚网站如<a href="https://ohmyrss.com" target="_blank" rel="noopener">己思</a>。</p><p>第四：利用插件获取网站的RSS地址，一个值得推荐的插件是<a href="https://docs.rsshub.app" target="_blank" rel="noopener">RSShub</a>，浏览网站时，该插件会显示RSS地址。</p><p>微博，公众号，简书，B站，贴吧，知乎，豆瓣，抖音，网易云音乐，Github都是可以订阅的源。要是都开App，太麻烦，都聚合到一个App，岂不美哉？</p><p>自己挑选的源，内容要宽泛，质量要有保证，这样接受到的讯息才能和其他新闻软件有所差别，听见不同的声音。但凡用RSS的人都会发现类似其他新闻软件里的一片光明没了，民间疾苦冒了出来；对伟光正感性地歌功颂德没了，却更多看到理性的批评和民间疾苦。</p><p>如下为各类订阅内容，当然者是PC端的RSS软件，手机端太小，截屏不好看。</p><p><img src="https://s1.ax1x.com/2020/06/05/tr8GIP.png" alt="dingye"></p><p>下面是操作指南。</p><iframe src="https://player.bilibili.com/player.html?aid=38629650&cid=70525810" width="800" height="530" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/06/04/tBLh11.jpg&quot; alt=&quot;rsslogo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="通信" scheme="http://www.shieber.cn/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="information" scheme="http://www.shieber.cn/tags/information/"/>
    
  </entry>
  
  <entry>
    <title>数据结构及各语言中的实现</title>
    <link href="http://www.shieber.cn/title/fe068447/"/>
    <id>http://www.shieber.cn/title/fe068447/</id>
    <published>2020-05-31T12:53:39.000Z</published>
    <updated>2020-06-29T01:03:03.902Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/31/t3QBYF.png" alt="data structure"></p><a id="more"></a><p><strong>数据结构各种各样，其应用领域也不尽相同，现做部分整理。</strong></p><h1 id="一-数据结构"><a href="#一-数据结构" class="headerlink" title="一. 数据结构"></a>一. 数据结构</h1><table><thead><tr><th align="left">类型</th><th align="left">应用领域</th></tr></thead><tbody><tr><td align="left">数组</td><td align="left">同种数据存放，寻址方便</td></tr><tr><td align="left">链表</td><td align="left">用在文件系统，内存管理，数据库冲突解决，set集合，git记录</td></tr><tr><td align="left">跳表</td><td align="left">由链表通过索引构建，有序，用在替代平衡树(AVL Tree)，如redis就有使用，复杂度O(logn)</td></tr><tr><td align="left">栈</td><td align="left">用在递归，逆序输出，网页网址保存，计算表达式，运算符优先级，括号检查，数制转换，函数调用</td></tr><tr><td align="left">队列</td><td align="left">用在操作系统任务安排，模拟派对，一切按序安排的任务</td></tr><tr><td align="left">散列</td><td align="left">用在MD5，SHA1等加密算法，数据校验，数据分片(分布式)，负载均衡，散列表类似数组结合链表</td></tr><tr><td align="left">树</td><td align="left">树是链表的扩展，用在数据库，文件系统，搜索引擎，编译器。二/三/四/八叉树，线段树，字典树，红黑树，B+树，Trie树</td></tr><tr><td align="left">堆</td><td align="left">等效于完全二叉树，用在操作系统分配内存，优先队列，海量数据查找，排序</td></tr><tr><td align="left">图</td><td align="left">用在知识图谱，图数据库，任务安排，最短路径，最小生成树，网络处理，计算生物学</td></tr></tbody></table><h1 id="二-各语言的数据类型"><a href="#二-各语言的数据类型" class="headerlink" title="二. 各语言的数据类型"></a>二. 各语言的数据类型</h1><h2 id="C-C-语言"><a href="#C-C-语言" class="headerlink" title="C/C++语言"></a>C/C++语言</h2><p><strong>基本类型</strong>:<br> 1.字符类型 char<br> 2.数值类型 short int long float double<br> 3.布尔类型 bool (C++独有)  </p><p><strong>构造类型</strong>:<br> 1.数组类型 array<br> 2.结构体型 struct<br> 3.共用体型 union<br> 4.枚举体型 enum  </p><p><strong>指针类型</strong>:<br> 1.pointer </p><p><strong>空类型</strong>:<br> 1.void</p><h2 id="Rust语言"><a href="#Rust语言" class="headerlink" title="Rust语言"></a>Rust语言</h2><p><strong>标量类型</strong>:<br> 1.数值类型 u|i(8/16/32/64/128/size)  f32(64)<br> 2.布尔类型 true false<br> 3.字符类型 char  </p><p><strong>复合类型</strong>:<br> 1.数组类型 tup<br> 2.元组类型 array </p><h2 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h2><p><strong>基本类型</strong>:<br> 1.字符类型 char<br> 2.布尔类型 boolean<br> 3.数值类型 byte short int long float double  </p><p><strong>引用类型</strong>:<br> 1.类类型   class<br> 2.接口类型 interface<br> 3.数组类型 array  </p><h2 id="Go语言"><a href="#Go语言" class="headerlink" title="Go语言"></a>Go语言</h2><p><strong>基本类型</strong>:<br> 1.字符及串 rune byte string<br> 2.布尔类型 true false<br> 3.数值类型 (u)int(8,16,32,64) float(32,64) complex  </p><p><strong>派生类型</strong>：<br>    1.指针类型 pt := &amp;v (nil)<br>    2.数组类型 nu := [4]int{0,1,2,3}<br>    3.切片类型 sl := []int{0,1,2,3,}<br>    4.映射类型 var m = make(map[string]string)<br>    4.结构类型 type Employee struct {}<br>    5.管道类型 ch := make(chan int, 2)<br>    6.接口类型 func (p *Ptr) getName() string{}<br>    8.函数类型 func sayHello(name strin){}  </p><h2 id="Python语言"><a href="#Python语言" class="headerlink" title="Python语言"></a>Python语言</h2><p><strong>不可变类型</strong>：<br> 1.数值类型 number<br> 2.字符串型 string<br> 3.元组类型 tuple   </p><p><strong>可变类型</strong>：<br> 1.列表类型 list<br> 2.字典类型 dict<br> 3.集合类型 set   </p><h2 id="JavaScript语言"><a href="#JavaScript语言" class="headerlink" title="JavaScript语言"></a>JavaScript语言</h2><p><strong>基本类型</strong>:<br>    1.对空类型 Null<br>    2.字符串型 String<br>    3.数值类型 Number<br>    4.大整数型 BigInt<br>    5.符号类型 Symbol<br>    6.布尔类型 boolean<br>    7.未定义型 Undefined  </p><p><strong>对象类型</strong>:<br>    1.对象类型 Object<br>    2.数组类型 Array<br>    3.函数类型 Function  </p><p><strong>网络数据传输</strong>:<br> 1.JSON</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/31/t3QBYF.png&quot; alt=&quot;data structure&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://www.shieber.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="DataStructure" scheme="http://www.shieber.cn/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>Python自带元素</title>
    <link href="http://www.shieber.cn/title/80b7d3cf/"/>
    <id>http://www.shieber.cn/title/80b7d3cf/</id>
    <published>2020-05-30T03:26:31.000Z</published>
    <updated>2020-07-21T08:35:51.996Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/30/tMtMUf.png" alt="pythoninternal"></p><a id="more"></a><h2 id="关键字33个"><a href="#关键字33个" class="headerlink" title="关键字33个"></a>关键字33个</h2><p>查看 help(‘keywords’)</p><table><thead><tr><th align="left">关键字</th><th align="left">解释</th><th align="left">关键字</th><th align="left">解释</th><th align="left">关键字</th><th align="left">解释</th><th align="left">关键字</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">False</td><td align="left">逻辑假</td><td align="left">def</td><td align="left">函数定义</td><td align="left">if</td><td align="left">逻辑判断</td><td align="left">raise</td><td align="left">抛出错误</td></tr><tr><td align="left">None</td><td align="left">空</td><td align="left">del</td><td align="left">删除元素</td><td align="left">import</td><td align="left">模块导入</td><td align="left">return</td><td align="left">返回</td></tr><tr><td align="left">True</td><td align="left">逻辑真</td><td align="left">elif</td><td align="left">判断分支</td><td align="left">in</td><td align="left">是否存在</td><td align="left">try</td><td align="left">尝试执行</td></tr><tr><td align="left">and</td><td align="left">逻辑与</td><td align="left">else</td><td align="left">判断分支</td><td align="left">is</td><td align="left">是否相等</td><td align="left">while</td><td align="left">循环</td></tr><tr><td align="left">as</td><td align="left">重命名元素</td><td align="left">except</td><td align="left">捕获错误</td><td align="left">lambda</td><td align="left">匿名函数</td><td align="left">with</td><td align="left">安全打开文件</td></tr><tr><td align="left">assert</td><td align="left">判断以抛出错误</td><td align="left">finally</td><td align="left">最终执行</td><td align="left">nonlocal</td><td align="left">非全局</td><td align="left">yield</td><td align="left">迭代器使用</td></tr><tr><td align="left">break</td><td align="left">中断循环</td><td align="left">for</td><td align="left">循环</td><td align="left">not</td><td align="left">逻辑非</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">class</td><td align="left">类申明</td><td align="left">from</td><td align="left">模块导入</td><td align="left">or</td><td align="left">逻辑或</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">continue</td><td align="left">重新循环</td><td align="left">global</td><td align="left">全局</td><td align="left">pass</td><td align="left">跳过</td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><table><thead><tr><th align="left">类型</th><th align="left">具体</th><th align="left">类型</th><th align="left">具体</th></tr></thead><tbody><tr><td align="left">文本</td><td align="left">string</td><td align="left">映射</td><td align="left">dict</td></tr><tr><td align="left">数字</td><td align="left">int,float,complex</td><td align="left">集合</td><td align="left">set,frozenset</td></tr><tr><td align="left">布尔</td><td align="left">bool</td><td align="left">类</td><td align="left">class</td></tr><tr><td align="left">实例</td><td align="left">instance</td><td align="left">二进制</td><td align="left">bytes,bytearray,memoryview</td></tr><tr><td align="left">序列</td><td align="left">list,tuple,range</td><td align="left">异常</td><td align="left">XxxError</td></tr></tbody></table><h2 id="内置函数69个-全由C写成"><a href="#内置函数69个-全由C写成" class="headerlink" title="内置函数69个(全由C写成)"></a>内置函数69个(<a href="https://github.com/python/cpython/blob/master/Python/bltinmodule.c" target="_blank" rel="noopener">全由C写成</a>)</h2><table><thead><tr><th align="left">函数</th><th align="left">具体</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">abs(x)</td><td align="left">返回一个(整/浮点/复)数的绝对值(模)。若x定义了__abs__()，则abs(x)将返回x.__abs__()。</td><td align="left">abs(-1) -&gt; 1, abs(2+1j) -&gt; 2.23606797749979</td></tr><tr><td align="left">all(x)</td><td align="left">如果x是iterable的，且所有元素为真值，则返回True。</td><td align="left">a = [1,0,2], all(a) -&gt; False</td></tr><tr><td align="left">any(x)</td><td align="left">如果x是iterable的，且存在元素为真值，则返回True。</td><td align="left">a = [0,0,1], any(a) -&gt; True</td></tr><tr><td align="left">ascii(x)</td><td align="left">返回一个对象可打印的字符串。</td><td align="left">a = [0,0,1], ascii(a) -&gt; ‘[0,0,1]’</td></tr><tr><td align="left">bin(x)</td><td align="left">将一个整数转变为一个前缀为‘0b’的二进制字符串。</td><td align="left">a = 10, bin(a) -&gt; ‘0b1010’</td></tr><tr><td align="left">bool(x)</td><td align="left">若x为(空/非空)，就返回一个布尔值，(False/True)。</td><td align="left">a = 0,b=10; bool(a)-&gt; False, bool(b)-&gt; True</td></tr><tr><td align="left">breakpoint</td><td align="left">此函数会在调用时将你陷入调试器中。</td><td align="left"></td></tr><tr><td align="left">bytearray(x,coding,errs)</td><td align="left">由x的数值返回一个新的bytes数组，可变。</td><td align="left">a = [1,0], bytearray(a)-&gt; bytearray(b‘\x01\x00’)</td></tr><tr><td align="left">bytes(x,coding,errs)</td><td align="left">由x的数值返回一个新的bytes对象，不可变。</td><td align="left">a = [1,0], bytes(a)-&gt; b‘\x01\x00’</td></tr><tr><td align="left">callable(obj)</td><td align="left">如果参数obj是可调用的就返回True，否则返回False。</td><td align="left">a = lambda x: x**2, callable(a)-&gt; True</td></tr><tr><td align="left">chr(x)</td><td align="left">返回Unicode码位为整数x的字符的字符串格式。</td><td align="left">chr(97)-&gt; a，chr(38)-&gt;&amp;</td></tr><tr><td align="left">staticmethod</td><td align="left">把一个方法封装成静态方法@classmethod。</td><td align="left">在类中使用，使代码更规范。</td></tr><tr><td align="left">classmethod</td><td align="left">把一个方法封装成类方法@classmethod。</td><td align="left">在类中使用，使代码更规范。</td></tr><tr><td align="left">compile(x,flnm,mode)</td><td align="left">将x编译成代码或AST对象，代码对象可以被exec()或eval()执行。</td><td align="left">r = compile(‘3+4’,‘xx’,‘eval’), eval(r) -&gt; 7</td></tr><tr><td align="left">complex(real,imag)</td><td align="left">创建一个值为real+imag*j的复数或者转化一个字符串或数为复数。</td><td align="left">complex(1) -&gt; (1+0j)</td></tr><tr><td align="left">delattr(obj, name)</td><td align="left">删除obj指定的属性name。</td><td align="left"></td></tr><tr><td align="left">dict()</td><td align="left">新建字典。</td><td align="left">a = [(‘a’,1),(‘b’,2)], dict(a) -&gt; {‘a’:1,‘b’:2}</td></tr><tr><td align="left">dir(obj)</td><td align="left">如果没有参数，则返回本地作用域中的名称列表。如果有，返回有效属性列表。</td><td align="left"></td></tr><tr><td align="left">divmod(a,b)</td><td align="left">将两个（非复数）数字作为实参，并在执行整数除法时返回一对商和余数。</td><td align="left">divmod(3,2)-&gt; (1,1)</td></tr><tr><td align="left">enumerate(iter, st=0)</td><td align="left">返回一个枚举对象。iterable必须是一个序列，或iterator，或支持迭代的对象。</td><td align="left"></td></tr><tr><td align="left">eval(expr, glob, loc)</td><td align="left">实参是字符串，及可选的globals和locals。</td><td align="left">x = 1, eval(‘x+1’) -&gt; 2</td></tr><tr><td align="left">exec(obj,glob,loc)</td><td align="left">动态执行字节码或字符串。</td><td align="left"></td></tr><tr><td align="left">filter(func, iter)</td><td align="left">用函数func返回iterable中真值元素，构建一个新的迭代器。</td><td align="left">a = [1,2,3], b=filter(lambda x: x&lt;3, a), list(b)-&gt;[1,2]</td></tr><tr><td align="left">float(x)</td><td align="left">从数字或字符串x生成浮点数。</td><td align="left">float(‘ -2.3 ’) -&gt; -2.3</td></tr><tr><td align="left">format(val, format)</td><td align="left">将val转换为format控制的格式化表示。</td><td align="left">fomat(10,‘0b’) -&gt; ‘1010’</td></tr><tr><td align="left">frozenset(iterable)</td><td align="left">返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</td><td align="left"></td></tr><tr><td align="left">getattr(obj, name)</td><td align="left">返回对象命名属性的值。</td><td align="left"></td></tr><tr><td align="left">globals()</td><td align="left">返回表示当前全局符号表的字典。这总是当前模块的字典。</td><td align="left"></td></tr><tr><td align="left">hasattr(obj,name)</td><td align="left">如果name是对象属性的名称，则返回True。</td><td align="left"></td></tr><tr><td align="left">hash(obj)</td><td align="left">返回该对象的哈希值。</td><td align="left">a = ‘sr’, hash(a) -&gt; 1188857520429707771</td></tr><tr><td align="left">help(obj)</td><td align="left">启动内置的帮助系统，显示obj的帮助信息。</td><td align="left"></td></tr><tr><td align="left">hex(x)</td><td align="left">将整数转换为以‘0x’为前缀的小写十六进制字符串。</td><td align="left">hex(10) -&gt;‘0xa’</td></tr><tr><td align="left">id(obj)</td><td align="left">返回对象的标识值,该值是整数，在对象生命周期中保证唯一恒定。</td><td align="left">a = 1, id(a) -&gt; 10914496, b = a, id(b) -&gt; 10914496</td></tr><tr><td align="left">input(prompt)</td><td align="left">该函数从输入中读取一行，将其转换为字符串(除了末尾的换行符)并返回。</td><td align="left">input(‘&gt;&gt;&gt;’) -&gt; &gt;&gt;&gt;</td></tr><tr><td align="left">int(x,base=10)</td><td align="left">将字符串x按base转换，base默认为10。</td><td align="left">int(‘11’,2) -&gt; 3</td></tr><tr><td align="left">isinstance(obj,type)</td><td align="left">判断一个对象是否是一个已知的类型，子类也算。</td><td align="left">isinstance(1,int) -&gt; True</td></tr><tr><td align="left">issubclass(c, (cp1,cp2))</td><td align="left">用于判断参数c是否是类型参数cp1,cp2的子类。</td><td align="left">isinstance(A,(B,C,E))</td></tr><tr><td align="left">iter(obj,sentinel)</td><td align="left">返回迭代对象，可使用next()获取下一个元素。</td><td align="left">a = (1,2,3), iter(a)</td></tr><tr><td align="left">len(x)</td><td align="left">返回对象的长度(元素个数)。</td><td align="left">a = (1,2,3), len(a) -&gt; 3</td></tr><tr><td align="left">list(iterable)</td><td align="left">转换可迭代对象为列表。</td><td align="left">a = (1,2,3), list(a) -&gt; [1,2,3]</td></tr><tr><td align="left">locals()</td><td align="left">更新并返回表示当前本地符号表的字典。</td><td align="left"></td></tr><tr><td align="left">map(func,iterable)</td><td align="left">根据提供的函数对指定序列做映射并返回迭代器。</td><td align="left">a = [1,2], b = map(lambda x: x+1, a), list(b) -&gt; [2,3]</td></tr><tr><td align="left">max(iter,key,default)</td><td align="left">返回可迭代对象/数的最大元素。</td><td align="left">a = [1,3,2], max(a) -&gt; 3</td></tr><tr><td align="left">min(iter,key,default)</td><td align="left">返回可迭代对象/数的最小元素。</td><td align="left">a = [1,3,2], min(a) -&gt; 1</td></tr><tr><td align="left">memoryview</td><td align="left">返回由给定实参创建的内存视图对象。</td><td align="left"></td></tr><tr><td align="left">next(iter,default)</td><td align="left">调用iter的__next__()方法获取下一个元素。迭代耗尽，返回default</td><td align="left"></td></tr><tr><td align="left">object()</td><td align="left">创建并返回对象。</td><td align="left"></td></tr><tr><td align="left">oct(x)</td><td align="left">将一个整数转变为一个前缀为‘0o’的八进制字符串。</td><td align="left">oct(10) -&gt; ‘0o12’</td></tr><tr><td align="left">open(fl)</td><td align="left">参数有mode，buff，encoding，errors，newline，closefd，opener</td><td align="left">按参数设定打开文件</td></tr><tr><td align="left">ord(c)</td><td align="left">返回字符的Unicode码点整数。</td><td align="left">ord(‘习’) -&gt; 20064</td></tr><tr><td align="left">pow(base,exp,mod)</td><td align="left">返回base的exp次幂；如果mod存在，则返回次幂对mod取余。</td><td align="left">pow(2,3)-&gt;8,pow(2,3,3)-&gt;2</td></tr><tr><td align="left">print(obj)</td><td align="left">参数有sep=‘ ’，end=‘\n’，file=sys.stdout，flush=False</td><td align="left">输出信息到指定位置。</td></tr><tr><td align="left">property(fgt,fst,fdl,doc)</td><td align="left">返回property属性，fgt获取属性值，fst设置属性值。fdl删除属性值,doc为文档。</td><td align="left">多对函数修饰@property</td></tr><tr><td align="left">range(start,stop,step)</td><td align="left">返回一个序列，从start开始到stop，以step为间隔。</td><td align="left">range(1,3,1) -&gt; 1,2</td></tr><tr><td align="left">repr(obj)</td><td align="left">返回包含一个对象的可打印表示形式的字符串。</td><td align="left">repr([1,2,3])-&gt;‘[1,2,3]’</td></tr><tr><td align="left">reversed(seq)</td><td align="left">返回一个反向的iterator。</td><td align="left">list(reversed([1,2,3])) -&gt; [3,2,1]</td></tr><tr><td align="left">round(num,ndigits)</td><td align="left">返回number舍入到小数点后ndigits位精度的值。若省略则返回最接近的整数。</td><td align="left">round(3,245,1) -&gt; 3.2</td></tr><tr><td align="left">set(iterable)</td><td align="left">返回一个新的set对象，可以选择带有从iterable获取的元素。</td><td align="left">set([1,2,1]) -&gt; {1,2}</td></tr><tr><td align="left">setattr(obj,name,val)</td><td align="left">设置obj的属性name=val。</td><td align="left"></td></tr><tr><td align="left">slice(start,end,step)</td><td align="left">实现切片对象，主要用在切片操作函数里的参数传递。</td><td align="left">a = [1,2,3],b = slice(0,2), a[b] -&gt; [1,2]</td></tr><tr><td align="left">sorted(iter, key,reverse=False)</td><td align="left">对iterable对象排序，规则由key指定。</td><td align="left">sorted([1,3,2],reverse=True) -&gt; [3,2,1]</td></tr><tr><td align="left">str(obj,coding)</td><td align="left">转换obj为字符，coding默认为utf-8。</td><td align="left">str([1,2,3]) -&gt; ‘[1,2,3]’</td></tr><tr><td align="left">sum(iterable,start)</td><td align="left">从start开始自左向右对iterable的项求和并返回总计值。</td><td align="left">sum([1,2,3],1) -&gt; 7</td></tr><tr><td align="left">super(type, obj-or-type)</td><td align="left">调用父类(超类)的一个方法。</td><td align="left">super().__init__(xx)</td></tr><tr><td align="left">tuple(iterable)</td><td align="left">返回iterable的元组。</td><td align="left">tuple([1,2,3]) -&gt; (1,2,3)</td></tr><tr><td align="left">type(obj)</td><td align="left">返回obj类型。</td><td align="left">type(12)-&gt; class ‘int’</td></tr><tr><td align="left">vars</td><td align="left">返回模块、类、实例或任何具有__dict__属性的对象的__dict__ 属性。</td><td align="left"></td></tr><tr><td align="left">zip(*iterable)</td><td align="left">创建或解包可迭代对象的聚合。</td><td align="left">list(zip([1,2],[8,3])) -&gt; [(1,8),(2,3)]</td></tr></tbody></table><h2 id="一些用法和实现"><a href="#一些用法和实现" class="headerlink" title="一些用法和实现"></a>一些用法和实现</h2><p><img src="https://s1.ax1x.com/2020/07/21/UoVkSH.png" alt="usage1"></p><p><img src="https://s1.ax1x.com/2020/07/21/UoV86s.png" alt="usage2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/30/tMtMUf.png&quot; alt=&quot;pythoninternal&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据结构的各种操作</title>
    <link href="http://www.shieber.cn/title/98aa0392/"/>
    <id>http://www.shieber.cn/title/98aa0392/</id>
    <published>2020-05-28T07:54:20.000Z</published>
    <updated>2020-06-21T08:47:46.281Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/28/tZWFAA.jpg" alt="pythonic"></p><a id="more"></a><p>Python实现的数据有(字符，数字，元组)[不可变]，(列表，字典，集合)[可变]。每一种数据的操作都不同，现做一番总结。</p><h2 id="不可变数据"><a href="#不可变数据" class="headerlink" title="不可变数据"></a>不可变数据</h2><table><thead><tr><th align="left">数字操作</th><th align="left">解释</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">num.real</td><td align="left">返回数的实部</td><td align="left">(2+3j).real -&gt; 2</td></tr><tr><td align="left">num.imag</td><td align="left">返回数的虚部</td><td align="left">(2+3j).real -&gt; 3</td></tr><tr><td align="left">num.bit_length</td><td align="left">返回数的字节长度</td><td align="left">a=6; a.bit_length() -&gt; 3</td></tr><tr><td align="left">num.to_bytes(L,byteorder)</td><td align="left">返回数的字节数组</td><td align="left">a=6; a.to_bytes(2,‘big’) -&gt; b‘\x06\x00’</td></tr><tr><td align="left">int.form_bytes(bts,byteorder)</td><td align="left">返回由给定字节数组所表示的整数。</td><td align="left">int.form_bytes(b‘\x00\x10’,‘big’) -&gt; 16</td></tr><tr><td align="left">num.as_integer_ratio()</td><td align="left">返回一对整数，其比率为num</td><td align="left">a=6.0; a.as_integer_ratio() -&gt; (6,1)</td></tr><tr><td align="left">num.is_integer()</td><td align="left">若num能用有限位整数表示返回True</td><td align="left">a=6.0; a.is_integer() -&gt; True</td></tr><tr><td align="left">num.hex()</td><td align="left">以16进制返回浮点数</td><td align="left">a=6.0; a.hex() -&gt; ‘0x1.8000000000000p+2’</td></tr></tbody></table><table><thead><tr><th align="left">字符串操作</th><th align="left">解释</th><th align="left">举例(‘Ab ab’)</th></tr></thead><tbody><tr><td align="left">del sr</td><td align="left">删除sr</td><td align="left"></td></tr><tr><td align="left">sr[0]</td><td align="left">通过下标取元素</td><td align="left">‘A’</td></tr><tr><td align="left">st[1:3]</td><td align="left">字符串切片</td><td align="left">‘b a’</td></tr><tr><td align="left">sr[::-1]</td><td align="left">字符串反转</td><td align="left">‘ba bA’</td></tr><tr><td align="left">sr.lower()</td><td align="left">转换为小写</td><td align="left">‘ab ab’</td></tr><tr><td align="left">sr.upper()</td><td align="left">转换为大写</td><td align="left">‘AB AB’</td></tr><tr><td align="left">sr.title()</td><td align="left">单词首字母大写</td><td align="left">‘Ab Ab’</td></tr><tr><td align="left">sr.casefold()</td><td align="left">转换为小写，对所有字符，包括法国字母</td><td align="left">‘ab ab’</td></tr><tr><td align="left">sr.swapcase()</td><td align="left">转换大写为小写，小写为大写</td><td align="left">‘aB AB’</td></tr><tr><td align="left">sr.capitalize()</td><td align="left">首字母大写</td><td align="left">‘Ab ab’</td></tr><tr><td align="left">sr.center(10,‘-’)</td><td align="left">将sr居中对齐并扩展到长为10的字符串，不够用-补齐</td><td align="left">‘–Ab ab—’</td></tr><tr><td align="left">sr.ljust(10,‘-’)</td><td align="left">将sr左对齐并扩展到长为n的字符串，不够用sp补齐</td><td align="left">‘Ab ab—–’</td></tr><tr><td align="left">sr.rjust(10,‘-’)</td><td align="left">将sr右对齐并扩展到长为n的字符串，不够用sp补齐</td><td align="left">‘—–Ab ab’</td></tr><tr><td align="left">sr.zfill(10)</td><td align="left">将sr右对齐并扩展到长为n的字符串，不够用0补齐</td><td align="left">‘00000Ab ab’</td></tr><tr><td align="left">sr.split(‘ ’)</td><td align="left">按‘ ’分隔字符串sr为列表，‘ ’默认为空格</td><td align="left">[‘Ab’, ‘ab’]</td></tr><tr><td align="left">sr.rsplit(‘a’,1)</td><td align="left">按sp从右到左分隔字符串sr为列表，sp默认为空格，n为分割的次数</td><td align="left">[‘Ab ’, ‘b’]</td></tr><tr><td align="left">sr.startwith(‘a’)</td><td align="left">判断sr是否以sp开头</td><td align="left">False</td></tr><tr><td align="left">sr.endswith(‘ab’)</td><td align="left">判断sr是否以sp结尾</td><td align="left">True</td></tr><tr><td align="left">sr.expandtabs(4)</td><td align="left">将sr中的tab键转换为空格，4为空格数</td><td align="left">‘A\tB’ -&gt; ‘A    B’</td></tr><tr><td align="left">sr.isupper()</td><td align="left">判断sr是否是大写</td><td align="left">False</td></tr><tr><td align="left">sr.islower()</td><td align="left">判断sr是否是小写</td><td align="left">False</td></tr><tr><td align="left">sr.isalpha()</td><td align="left">判断sr是否是字母</td><td align="left">False</td></tr><tr><td align="left">sr.isdigit()</td><td align="left">判断sr是否是数字</td><td align="left">False</td></tr><tr><td align="left">sr.isalnum()</td><td align="left">判断sr是否是字母数字</td><td align="left">False</td></tr><tr><td align="left">sr.isspace()</td><td align="left">判断sr是否是空格</td><td align="left">False</td></tr><tr><td align="left">sr.istitle()</td><td align="left">判断sr中单词首字母是否是大写</td><td align="left">False</td></tr><tr><td align="left">sr.isdecimal()</td><td align="left">判断sr是否是十进制数</td><td align="left">False</td></tr><tr><td align="left">sr.isnumeric()</td><td align="left">判断sr是否是数</td><td align="left">False</td></tr><tr><td align="left">sr.strip()</td><td align="left">去掉sr两侧的空字符</td><td align="left">‘  Ab ab ’-&gt;‘Ab ab’</td></tr><tr><td align="left">sr.lstrip()</td><td align="left">去掉sr左侧的空字符</td><td align="left">‘  Ab ab ’-&gt;‘Ab ab ’</td></tr><tr><td align="left">sr.rstrip(‘ ’)</td><td align="left">去掉sr右侧的空字符</td><td align="left">‘  Ab ab ’-&gt;‘ Ab ab’</td></tr><tr><td align="left">sr.encode(encoding)</td><td align="left">按encoding规则编码sr</td><td align="left"></td></tr><tr><td align="left">sr.decode(encoding)</td><td align="left">按encoding规则解码sr</td><td align="left"></td></tr><tr><td align="left">sr.count(‘a’)</td><td align="left">统计sr中a的频度</td><td align="left">2</td></tr><tr><td align="left">sr.find(‘a’,s,e)</td><td align="left">返回sr中从左侧开始第一个a位置，无则返回-1，可指定查找范围s和e</td><td align="left">3</td></tr><tr><td align="left">sr.rfind(‘a’)</td><td align="left">返回sr中从右侧开始第一个a位置，无则返回-1，可指定查找范围s和e</td><td align="left">3</td></tr><tr><td align="left">sr.index(‘a’)</td><td align="left">返回sr中从左侧开始第一个a位置，无则报错，可指定查找范围s和e</td><td align="left">3</td></tr><tr><td align="left">sr.rindex(‘a’)</td><td align="left">返回sr中从右侧开始第一个a位置，无则报错，可指定查找范围s和e</td><td align="left">3</td></tr><tr><td align="left">sr.join(‘ABC’)</td><td align="left">将sr作为ABC的连接符号，组成AsrBsrC这种字符串</td><td align="left">‘AAb abBAb abC’</td></tr><tr><td align="left">sr.format()</td><td align="left">格式化输出，替代%方法</td><td align="left">‘{}-{}’.format(1,2) -&gt; ‘1-2’</td></tr><tr><td align="left">sr.replace(‘a’,‘b’)</td><td align="left">将sr中的a替换成b</td><td align="left">‘Ab bb’</td></tr></tbody></table><table><thead><tr><th align="left">元组操作</th><th align="left">解释</th><th align="left">举例(1,2,3,4,1)</th></tr></thead><tbody><tr><td align="left">del tpl</td><td align="left">删除tp</td><td align="left"></td></tr><tr><td align="left">tpl[0]</td><td align="left">索引元素</td><td align="left">1</td></tr><tr><td align="left">tpl[1:3]</td><td align="left">切片</td><td align="left">(2,3)</td></tr><tr><td align="left">tp1+tp2</td><td align="left">元组合并</td><td align="left">(1,2) + (2,3) -&gt; (1,2,2,3)</td></tr><tr><td align="left">sorted(tpl)</td><td align="left">按某规则排序tpl</td><td align="left"></td></tr><tr><td align="left">tpl.count(‘1’)</td><td align="left">统计tpl中1的频度</td><td align="left">2</td></tr><tr><td align="left">tpl.index(‘1’)</td><td align="left">返回tpl中第一个x位置</td><td align="left">0</td></tr></tbody></table><h2 id="可变数据"><a href="#可变数据" class="headerlink" title="可变数据"></a>可变数据</h2><table><thead><tr><th align="left">列表操作</th><th align="left">解释</th><th align="left">举例[1,2,3,4,1,2,3,4]</th></tr></thead><tbody><tr><td align="left">del lst[1]</td><td align="left">删除列表lst中某元素</td><td align="left">[1,3,4,1,2,3,4]</td></tr><tr><td align="left">del lst</td><td align="left">删除列表lst</td><td align="left"></td></tr><tr><td align="left">‘-’.join(lst)</td><td align="left">用-拼接lst为字符串</td><td align="left">‘1-3-4-1-2-3-4’</td></tr><tr><td align="left">lst.append(‘x’)</td><td align="left">向lst末尾添加元素x</td><td align="left">[1,3,4,1,2,3,4,‘x’]</td></tr><tr><td align="left">lst.extend(iter)</td><td align="left">将可迭代对象添加到lst</td><td align="left">lst.extend([10,9])-&gt;[1,3,4,1,2,3,4,10,9]</td></tr><tr><td align="left">lst.insert(0,‘x’)</td><td align="left">在lst的i位置插入x</td><td align="left">[‘x’,1,3,4,1,2,3,4]</td></tr><tr><td align="left">lst.remove(1)</td><td align="left">移除lst中的第一个1</td><td align="left">[‘x’,3,4,1,2,3,4]</td></tr><tr><td align="left">lst.pop(0)</td><td align="left">弹出lst中2位置的元素</td><td align="left">[3,4,1,2,3,4]</td></tr><tr><td align="left">lst.index(1,start,end)</td><td align="left">在start-end范围内查找元素，并返回位置</td><td align="left">2</td></tr><tr><td align="left">lst.count(3)</td><td align="left">统计lst中1的频度</td><td align="left">2</td></tr><tr><td align="left">lst.sort(key=None, reverse=False)</td><td align="left">对lst进行排序</td><td align="left">[1,2,3,3,4,4]</td></tr><tr><td align="left">lst.reverse()</td><td align="left">对lst进行逆序</td><td align="left">[4,4,3,3,2,1]</td></tr><tr><td align="left">lst.clear()</td><td align="left">清除lst中所有元素</td><td align="left">[]</td></tr><tr><td align="left">lst.copy()</td><td align="left">浅拷贝lst</td><td align="left"></td></tr><tr><td align="left">copy.deepcopy(lst)</td><td align="left">深拷贝lst</td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left">collections中的双队列</th><th align="left">解释</th><th align="left">举例deque([1,2,3,4])</th></tr></thead><tbody><tr><td align="left">copy(dq)</td><td align="left">浅拷贝</td><td align="left"></td></tr><tr><td align="left">append(5)</td><td align="left">队列末尾添加元素5</td><td align="left">deque([1,2,3,4,5])</td></tr><tr><td align="left">appendleft(5)</td><td align="left">队列首部添加元素5</td><td align="left">deque([5,1,2,3,4,5])</td></tr><tr><td align="left">pop()</td><td align="left">弹出队列尾部数据</td><td align="left">deque([5,1,2,3,4])</td></tr><tr><td align="left">popleft()</td><td align="left">弹出队列首部数据</td><td align="left">deque([1,2,3,4])</td></tr><tr><td align="left">extend([7,8,9])</td><td align="left">添加多个元素到队列尾部</td><td align="left">deque([1,2,3,4,7,8,9])</td></tr><tr><td align="left">extendleft([0,0,7])</td><td align="left">添加多个元素到队列首部</td><td align="left">deque([0,0,7,1,2,3,4,7,8,9])</td></tr><tr><td align="left">rotate(-2)</td><td align="left">向左移动两个位置，负左，正右</td><td align="left">deque([7,1,2,3,4,7,8,9,0,0])</td></tr><tr><td align="left">remove(7)</td><td align="left">删除第一个7</td><td align="left">deque([1,2,3,4,7,8,9,0,0])</td></tr><tr><td align="left">reverse()</td><td align="left">队列倒序</td><td align="left">deque([0,0,9,8,7,4,3,2,1])</td></tr></tbody></table><table><thead><tr><th align="left">字典操作</th><th align="left">解释</th><th align="left">举例{‘x’:1,‘z’:2,‘y’:3}</th></tr></thead><tbody><tr><td align="left">dct[‘x’]</td><td align="left">索引元素x</td><td align="left">1</td></tr><tr><td align="left">del dct[‘x’]</td><td align="left">删除元素x</td><td align="left">{z:2,y:3}</td></tr><tr><td align="left">del dct</td><td align="left">删除字典</td><td align="left"></td></tr><tr><td align="left">dct.pop(‘x’)</td><td align="left">弹出元素x</td><td align="left">{z:2,y:3}</td></tr><tr><td align="left">dct.popitem()</td><td align="left">弹出一个元素，一般为最后一个</td><td align="left">{x:1,z:2}</td></tr><tr><td align="left">dct.get(‘x’,‘s’)</td><td align="left">获取元素x，若没有则返回s</td><td align="left">1</td></tr><tr><td align="left">dct.setdefault(‘m’,4)</td><td align="left">获取元素m，若没有则设置m=4</td><td align="left">{x:1,z:2,y:3,m:4}</td></tr><tr><td align="left">dct.fromkeys(seq, val)</td><td align="left">由seq和val创建字典</td><td align="left"></td></tr><tr><td align="left">dct.update(dct1)</td><td align="left">将dct1合并到dct中 dct1={‘a’:1}</td><td align="left">{‘x’:1,‘z’:2,‘y’:3,‘a’:1}</td></tr><tr><td align="left">dct.keys()</td><td align="left">获取dct的所有键</td><td align="left">dict_keys([‘x’,‘z’,‘y’])</td></tr><tr><td align="left">dct.values()</td><td align="left">获取dct的所有值</td><td align="left">dict_keys([1,2,3])</td></tr><tr><td align="left">dct.items()</td><td align="left">获取dct的所有键值</td><td align="left">dict_keys([(‘x’,1),(‘z’,2),(‘y’,3)])</td></tr><tr><td align="left">dct.copy()</td><td align="left">浅拷贝dct</td><td align="left"></td></tr><tr><td align="left">dct.clear()</td><td align="left">清除dct中所有元素</td><td align="left">{}</td></tr></tbody></table><table><thead><tr><th align="left">集合操作</th><th align="left">解释</th><th align="left">举例{1,2,3}</th></tr></thead><tbody><tr><td align="left">st.issubset(t)</td><td align="left">判断st是否是t的子集合t={1,2}</td><td align="left">False</td></tr><tr><td align="left">st.issuperset(t)</td><td align="left">判断st是否是t的子集合</td><td align="left">True</td></tr><tr><td align="left">st.union(t)</td><td align="left">集合并操作   st or t</td><td align="left">{1,2,3}</td></tr><tr><td align="left">st.intersection(t)</td><td align="left">集合交操作   st &amp;  t</td><td align="left">{1,2}</td></tr><tr><td align="left">st.difference(t)</td><td align="left">集合差操作   st -  t</td><td align="left">{3}</td></tr><tr><td align="left">st.symmetric_difference(t)</td><td align="left">集合异或操作 st ^  t</td><td align="left">{3}</td></tr><tr><td align="left">st.update(t)</td><td align="left">合并t到st</td><td align="left">{1,2,3}</td></tr><tr><td align="left">st.intersection_update(t)</td><td align="left">合并st和t的交集到st</td><td align="left">{1,2}</td></tr><tr><td align="left">st.difference_update(t)</td><td align="left">合并st和t的差集到st</td><td align="left">{3}</td></tr><tr><td align="left">st.symmetric_difference_update(t)</td><td align="left">合并st和t的对称差集到st</td><td align="left">{}</td></tr><tr><td align="left">st.add(‘x’)</td><td align="left">向st中添加元素x</td><td align="left">{1,2,3,‘x’}</td></tr><tr><td align="left">st.copy()</td><td align="left">浅拷贝st</td><td align="left"></td></tr><tr><td align="left">st.remove(‘x’)</td><td align="left">移除st中x元素，不存在会报错</td><td align="left">{1,2,3}</td></tr><tr><td align="left">st.discard(‘x’)</td><td align="left">丢弃st中x元素，不存在不报错</td><td align="left">{1,2,3}</td></tr><tr><td align="left">st.pop()</td><td align="left">弹出最后一个元素</td><td align="left">{1,2}</td></tr><tr><td align="left">st.clear()</td><td align="left">清除st中所有元素</td><td align="left">{}</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/28/tZWFAA.jpg&quot; alt=&quot;pythonic&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>人有多重</title>
    <link href="http://www.shieber.cn/title/68109d68/"/>
    <id>http://www.shieber.cn/title/68109d68/</id>
    <published>2020-03-31T02:22:08.000Z</published>
    <updated>2020-04-01T07:32:51.996Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/03/31/GK2k9A.md.png" alt="humanweight"></p><a id="more"></a><h2 id="地球人的重量"><a href="#地球人的重量" class="headerlink" title="地球人的重量"></a>地球人的重量</h2><p>曾听过一个问题：要是地球上所有人同时跳起来，会不会对地球有影响？</p><p>最近看书，突发奇想，人类到底有多重呢？我是指地球上目前活着的所有人。计算是非常简单的，所以不妨计算一下。</p><p>所有人中，有儿童，成年人。不同年龄段的体重是不一样的，有的比较胖，但大部分人都算正常，所以可以取一个平均值代表每个人的体重。</p><p>成年人的标准体重应该是  </p><p>男性：（身高 － 80）×0．7（千克）</p><p>女性：（身高 － 70）×0．6（千克）</p><p>标准体重＋10％属于正常范围，超重20％属轻度肥胖，超重50％属重度肥胖，一般成人重65KG。儿童体重可估算一个均值，设为0.7倍成人体重，其实这个估算肯定不准确，但是偏差对最后结果定性分析影响不大。</p><p>截至2020.03.31日，全球230个国家和地区人口总数为7585204179，就是75.852亿，数据来源于联合国。而目前儿童人口数大约20亿。所以总重非常好算。</p><p>$$W_{human} = 20x10^{8}x0.7x65 + 55.852x10^{8}x65 (Kg) = 4.54038x10^{8}(ton)$$</p><p>所以地球人，活着的，大概4.54038亿吨重。然而，这个重量仍然不够直观。为此，我需要选择些参照物，将人转换为一种大家能直观感受的东西。</p><p>这里选择石头，因为地球上到处是石头。不同种类石头的密度是不同的，根据参考文献，大部分石头密度在3左右。这里选择大理石，密度为$3ton/m^{3}$。所以将所有人压缩为大理石密度，则体积有$1.51346*10^{8}m^{3}$，开立方得到一个边长为533米长的正方体。想象一个533米的正方体，感觉不大吧？其实，泰山露出来的部分大概1500米，就比这个正方体大，所以人类实际上不如泰山这样一座山重。而地球上何止一座泰山呢？所以地球人跳起来不会对地球有啥影响。</p><p>从物理角度算算，和地球对比一下，能得到更为精确的数据。</p><p>$$mg = G\frac{M_{e}m}{R^{2}}$$</p><p>G为引力常数，结合各个数据可得到地球质量$M_{e} = 6*10^{24}Kg$，人类质量占地球的比例为</p><p>$$r = \frac{4.54x10^{11}}{6x10^{24}} = 7.5x10^{-14}$$</p><p>大概是百万亿分之7.5，实在算不上什么。</p><p>地球要维持自转而不分裂，大概需要维持其密度为$4ton/m^{3}$，而地球平均密度为$5.52ton/m^{3}$。将人压缩成地球平均密度的话，大概就是一个$434.9m$的正方体，比上面数据更小。</p><p>这样说吧，把地球人口重量看作乘火车时穿过的一座山的重量大概是合理的。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://web.phb123.com/city/renkou/rk.html" target="_blank" rel="noopener">https://web.phb123.com/city/renkou/rk.html</a></li><li><a href="https://www.worldometers.info/cn/" target="_blank" rel="noopener">https://www.worldometers.info/cn/</a></li><li>《水利水电工程施工手册》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/03/31/GK2k9A.md.png&quot; alt=&quot;humanweight&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="议论" scheme="http://www.shieber.cn/categories/%E8%AE%AE%E8%AE%BA/"/>
    
    
      <category term="小杂感" scheme="http://www.shieber.cn/tags/%E5%B0%8F%E6%9D%82%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>为什么在股市容易亏钱</title>
    <link href="http://www.shieber.cn/title/8736ee58/"/>
    <id>http://www.shieber.cn/title/8736ee58/</id>
    <published>2020-03-19T03:42:44.000Z</published>
    <updated>2020-03-19T11:57:11.991Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/03/19/8rdjTf.jpg" alt="reinvare"></p><a id="more"></a><p>炒股成了一部分人的生活，他们谋求在股市大展身手，试要大赚一笔。然而，通过非常简单的计算，你就知道在股市损失要比赚钱容易得多，概率更大。</p><p>让我们假设你有初始资金T，全部投入股市，且不计手续费，印花税等等，也就是说T就购买成股票资产。让我们来看看在不同的股市波动后，你的资金T的变化。</p><p>设跌幅为$p_1\lt 100 %$，增幅为$p_2 \ge 0$，二者均只计算绝对值。</p><p>你遭遇到跌幅为$p_1$的波动，现在你的资产只有$T(1-p_1) \le T$。接着你梦想着资产至少恢复到T，要是超过T就更好了。那么从$T(1-p_1)$恢复成T需要增长多少呢？假如设此时增长率为$p_2$</p><p>$$T(1 - p_1)(1 + p_2)=T$$ </p><p>此时资产刚好恢复到T，那么：</p><p>$$(1 - p_1)(1 + p_2)=1$$ </p><p>$$ (1 + p_2)=\frac{1}{1 - p_1}$$</p><p>$$ p_2=\frac{1}{1 - p_1} - 1$$</p><p>$$ p_2=\frac{p_1}{1 - p_1}$$</p><p>将$p_2$看成$p_1$的函数，也就是将增长率看成跌幅的函数，来考察不同的跌幅下，到底需要增长多少才能保证不亏呢？<br>求导，看看增长率随跌幅的变化率。</p><p>$$ p_2^{‘}=(\frac{p_1}{1 - p_1})^{‘} = \frac{p_1^{‘}(1-p_1)-(1-p_1)^{‘}p_1 }{(1-p_1)^{2}}$$<br>$$ p_2^{‘}=(\frac{p_1}{1 - p_1})^{‘} = \frac{1(1-p_1)-(0-1)p_1}{(1-p_1)^{2}}$$<br>$$ p_2^{‘}=(\frac{p_1}{1 - p_1})^{‘} = \frac{1}{(1-p_1)^{2}} \gt 0$$<br>$$ \because p_2的导数恒大于0, \therefore p_2 为增函数 $$<br>$$ p_{1_{min}} = 0, p_{1_{max}} \lt 100% $$<br>$$ p_{2_{min}} = 0, p_{2_{max}} = \infty $$</p><p>用程序稍微计算下，得到如下结果: [括号内第一个数为跌幅，第二个数为至少保证不亏本时的增幅，均为百分数，略去百分号%。比如(1.0,1.01)表示跌1%时，要涨1.01%才能回本。]</p><p>(0.0, 0.0), (1.0, 1.01), (2.0, 2.04), (3.0, 3.09), (4.0, 4.17), (5.0, 5.26), (6.0, 6.38), (7.0, 7.53), (8.0, 8.7), (9.0, 9.89)，跌幅在10%以内时，回本比较容易，可以看到差距不大。 </p><p>(10.0, 11.11), (11.0, 12.36), (12.0, 13.64), (13.0, 14.94), (14.0, 16.28), (15.0, 17.65), (16.0, 19.05), (17.0, 20.48), (18.0, 21.95), (19.0, 23.46)，跌幅在10%-20%时，回本开始有点儿难度了，但还算行。此时，一些股民开始割肉止损。 </p><p>(20.0, 25.0), (21.0, 26.58), (22.0, 28.21), (23.0, 29.87), (24.0, 31.58), (25.0, 33.33), (26.0, 35.14), (27.0, 36.99), (28.0, 38.89), (29.0, 40.85)，跌幅在20%-30%时，回本明显困难起来，但也是有可能的。此时，更多股民开始割肉止损。 </p><p>(30.0, 42.86), (31.0, 44.93), (32.0, 47.06), (33.0, 49.25), (34.0, 51.52), (35.0, 53.85), (36.0, 56.25), (37.0, 58.73), (38.0, 61.29), (39.0, 63.93)，跌幅在30%-40%时，回本更困难，但还是有可能。此时，大量股民割肉。  </p><p>(40.0, 66.67), (41.0, 69.49), (42.0, 72.41), (43.0, 75.44), (44.0, 78.57), (45.0, 81.82), (46.0, 85.19), (47.0, 88.68), (48.0, 92.31), (49.0, 96.08)，跌幅在40%-50%时，回本难度攀升，但依然有可能。此时，大量股民割肉。  </p><p>(50.0, 100.0), (51.0, 104.08), (52.0, 108.33), (53.0, 112.77), (54.0, 117.39), (55.0, 122.22), (56.0, 127.27), (57.0, 132.56), (58.0, 138.1), (59.0, 143.9)，跌幅在50%-60%时，回本几乎不可能，绝大部分股民亏损割肉，或是打算长期持有。</p><p>(60.0, 150.0), (61.0, 156.41), (62.0, 163.16), (63.0, 170.27), (64.0, 177.78), (65.0, 185.71), (66.0, 194.12), (67.0, 203.03), (68.0, 212.5), (69.0, 222.58)，跌幅在60%-70%时，回本更加不可能，少部分股民打算长期持有。 </p><p>(70.0, 233.33), (71.0, 244.83), (72.0, 257.14), (73.0, 270.37), (74.0, 284.62), (75.0, 300.0), (76.0, 316.67), (77.0, 334.78), (78.0, 354.55), (79.0, 376.19)，跌幅在70%-80%时，开启搅肉机模式，回本渺茫，极少部分股民打算长期持有。 </p><p>(80.0, 400.0), (81.0, 426.32), (82.0, 455.56), (83.0, 488.24), (84.0, 525.0), (85.0, 566.67), (86.0, 614.29), (87.0, 669.23), (88.0, 733.33), (89.0, 809.09)，跌幅在80%-90%时，要回本至少要涨400%以上才可能，人人都知道涨百分之几百是小概率事件。此时很多公司可能被退市，你的股票成为废纸。</p><p>(90.0, 900.0), (91.0, 1011.11), (92.0, 1150.0), (93.0, 1328.57), (94.0, 1566.67), (95.0, 1900.0), (96.0, 2400.0), (97.0, 3233.33), (98.0, 4900.0), (99.0, 9900.0)，跌幅在90%-99%时，公司估计早已破产，你的股票也已是一堆废纸。 </p><p>跌幅达到百分之几十，轻易就遭遇到了，但要涨幅达到百分之几百估计没几人敢这么说。这还只是回本，若你还要赚10%-20%T资产，那就更困难了。同时不要忘了，这里的计算还没统计各种手续费和税，要再考虑那些，只要大跌一次，不管你有多少，都要给你跌掉。</p><p>下面是维持不亏本的跌幅和涨幅函数图(跌幅范围为0%-99%)。可以看到，前段平缓，后面成了指数。</p><p><img src="https://s1.ax1x.com/2020/03/19/8rn03D.md.png" alt="increduvare"></p><p>拉近看，考察一个区域。跌幅在0%-80%时保证不亏本的增幅变化(最大增幅400%左右)。</p><p><img src="https://s1.ax1x.com/2020/03/19/8rakgs.png" alt="vare1"></p><p>跌幅在80%-90%时保证不亏本的增幅变化(仅仅10%的变化，增幅也变化400%左右)。</p><p><img src="https://s1.ax1x.com/2020/03/19/8ranET.png" alt="vare2"></p><p>跌幅在80%-98%时保证不亏本的增幅变化(指数模式，无底洞)。</p><p><img src="https://s1.ax1x.com/2020/03/19/8raQC4.png" alt="vare3"></p><p>热力学第二定律关于熵，自然事物在不断变得无规则，扩散，也就是熵增。而要逆熵则太难，人是逆熵动物，但一死就将回归自然律。股票亏损就像熵增，不断扩大，而要逆熵赚钱则有些难度，当然本领好，也能赚钱，有人亏，就有人赚。</p><p>金钱有度，股灾无情。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/03/19/8rdjTf.jpg&quot; alt=&quot;reinvare&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="投资" scheme="http://www.shieber.cn/categories/%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="股市" scheme="http://www.shieber.cn/tags/%E8%82%A1%E5%B8%82/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu20.04 LTS</title>
    <link href="http://www.shieber.cn/title/8009ae71/"/>
    <id>http://www.shieber.cn/title/8009ae71/</id>
    <published>2020-03-05T04:33:44.000Z</published>
    <updated>2020-03-05T04:36:08.272Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/03/05/3TbKmD.png" alt="Focal Fossa"></p><a id="more"></a><p>近期Ubuntu20.04 LTS(Focal Fossa)冻结部分功能，特地下载试了试。  </p><h2 id="Ubuntu20-04发布的时间表-2020-："><a href="#Ubuntu20-04发布的时间表-2020-：" class="headerlink" title="Ubuntu20.04发布的时间表(2020)：  "></a>Ubuntu20.04发布的时间表(2020)：  </h2><p>1月09日：测试周 (可选)<br>2月27日：特性冻结，Debian导入冻结<br>3月05日：测试周 (可选)<br>3月19日：用户界面冻结<br>3月26日：文档字符串冻结<br>4月02日：测试版冻结<br>4月09日：内核冻结<br>4月16日：最终冻结，语言翻译包冻结，发布候选版<br>4月23日：发布稳定版  </p><p>在某个日期，Ubuntu18.04 LTS用户会收到新LTS通知，提示升级。</p><h2 id="支持时限："><a href="#支持时限：" class="headerlink" title="支持时限：  "></a>支持时限：  </h2><p>台式机及服务器：2020-2025年<br>企业扩展维护版：2020-2030年(收费)</p><h2 id="计划功能。"><a href="#计划功能。" class="headerlink" title="计划功能。  "></a>计划功能。  </h2><ul><li>Gnome3.36</li><li>游戏相关改进</li><li>改进的ZFS支持</li><li>GDM中多显示器</li><li>Xorg会话分数缩放</li><li>Linux Kernel 5.4 or higher</li></ul><p>看来就ZFS和新内核有点看头。Ubuntu以前用的是ext4系统，不知道新ZFS如何，最近Linus大佬到是对ZFS <a href="https://www.oschina.net/news/112779/linus-zfs-statements-arent-right-heres-the-straight-dope?p=2" target="_blank" rel="noopener">颇有看法</a>。</p><p>关于<a href="https://www.kernel.org" target="_blank" rel="noopener">内核</a>，<code>uname -a</code>显示结果:<br><code>Linux ubuntu 5.4.0-14-generic #17-Ubuntu SMP Thu Feb 6 22:47:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</code><br>5.4的内核比较新，微软去年贡献出的exFAT功能也已加入，所以也算得上20.04的新特性吧。</p><p>关于软件<br>预装的Amazon在本版本中被去掉了，LibreOffice提供了最新6.4版，我速度快多了。另外，官方正考虑预置新版PHP 7.4。<br>至于其他的都差不多，Firefox, vim等等这些和以前一样预置。</p><p>使用<br>虚拟机下使用也不怎么卡，Gnome优化得挺好，我这台电脑是2015年的垃圾货了，装双系统，再开虚拟机跑着还过得去。新版出来后多半会跟着升级吧，毕竟穷玩车，富玩表，屌丝玩电脑。服务器版除非买了新服务器，且够大胆，不然还是得用18.04或是16.04，我认为那是最优的，新的20.04不一定就合适。</p><p>安装节面：  </p><p><img src="https://s2.ax1x.com/2020/03/05/3Tb4AJ.png" alt="install"></p><p>软件中心：(微软家的Visual Studio和Skype也加入了)  </p><p><img src="https://s2.ax1x.com/2020/03/05/3TbbjK.png" alt="software"></p><p>自带软件：  </p><p><img src="https://s2.ax1x.com/2020/03/05/3TqPjf.png" alt="installed"></p><p>自带壁纸：  </p><p><img src="https://s2.ax1x.com/2020/03/05/3TqnCn.png" alt="wallpaper"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Ubuntu总体来说比较优秀。当然，近几年它很火，许多工具甚至特地发布了Ubuntu版。用了近两年Ubuntu(Windows用得很少了)，感觉我的工作它都处理得很好，它没有而我需要的功能我就自己写些脚步来处理，惟一的遗憾是缺个像Office这样好用的软件。无论如何，初学者或者喜欢玩操作系统的人不妨试试20.04。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/03/05/3TbKmD.png&quot; alt=&quot;Focal Fossa&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="http://www.shieber.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="OS" scheme="http://www.shieber.cn/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>回首猪年，展望鼠年</title>
    <link href="http://www.shieber.cn/title/93818f3d/"/>
    <id>http://www.shieber.cn/title/93818f3d/</id>
    <published>2020-01-24T13:36:16.000Z</published>
    <updated>2020-04-01T07:43:04.118Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/24/1ZfDJI.md.png" alt="RatYear"></p><a id="more"></a><p>2019农历猪年就要过去了，在此整理这一年来的大事件。这一年，极不平静，发生好多大事。真是逢九必乱！</p><h2 id="大事件"><a href="#大事件" class="headerlink" title="大事件"></a>大事件</h2><h3 id="猪瘟"><a href="#猪瘟" class="headerlink" title="猪瘟"></a>猪瘟</h3><p> 年初时一部短片《啥是佩琪?》火遍网络，可没成想本年度物价因为猪而飙升，CPI连连上涨。非洲猪瘟给老百姓的基本生活带来了极大不便。</p><p> <img src="https://s2.ax1x.com/2020/01/24/1ZWorD.md.png" alt="zhuwen"></p><h3 id="贸易战"><a href="#贸易战" class="headerlink" title="贸易战"></a>贸易战</h3><p> 美国总统特朗普大笔一挥，两国贸易战开打，双方国力耗损，经济受到影响，全球经济增长预期下降。</p><p> <img src="https://s2.ax1x.com/2020/01/24/1ZWTqe.md.png" alt="tradewar"></p><h3 id="宜宾地震"><a href="#宜宾地震" class="headerlink" title="宜宾地震"></a>宜宾地震</h3><p> 宜宾，醉美之城，突然又遭遇地震袭击，给当地百姓生活带来了极大困扰，好在伤亡人数不多。</p><p> <img src="https://s2.ax1x.com/2020/01/24/1ZWbad.md.png" alt="zhuwen"></p><h3 id="香港暴乱"><a href="#香港暴乱" class="headerlink" title="香港暴乱"></a>香港暴乱</h3><p> 从7月开始，香港不断有暴乱活动，给大陆带来很大麻烦。在国际上，香港的投资及金融地位受到影响。</p><p> <img src="https://s2.ax1x.com/2020/01/24/1ZWOPI.md.png" alt="zhuwen"></p><h3 id="国庆"><a href="#国庆" class="headerlink" title="国庆"></a>国庆</h3><p> 今年是各种重大日子的周年纪念日。中美建交40周年，五四运动一百周年，建国70周年等等。</p><p> <img src="https://s2.ax1x.com/2020/01/24/1ZWvxf.md.png" alt="zhuwen"></p><h3 id="2019-nCov"><a href="#2019-nCov" class="headerlink" title="2019-nCov"></a>2019-nCov</h3><p> 本以为好好过年，结果又来病毒。这次直接对人造成伤害，给社会带来恐慌。</p><p> <img src="https://s2.ax1x.com/2020/01/24/1Zfpqg.md.png" alt="zhuwen"></p><h2 id="祝福明天"><a href="#祝福明天" class="headerlink" title="祝福明天"></a>祝福明天</h2><p>  现在是除夕夜，我在成都，在某栋楼里写下这些文字。希望病毒早日消退，早点恢复社会生产和教学活动，积极发展经济。毕竟2020是中国人追求几千年的小康关键之年，不能因为一个病毒给毁了。我们这个民族，吃了太多苦了，付出了太多代价。在14亿人的大国里，任何一个麻烦都会影响国民。中国人要强大起来，富裕起来，自信起来。祝福中国，2020，鼠年！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/01/24/1ZfDJI.md.png&quot; alt=&quot;RatYear&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="年度报告" scheme="http://www.shieber.cn/categories/%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="回忆" scheme="http://www.shieber.cn/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
</feed>
